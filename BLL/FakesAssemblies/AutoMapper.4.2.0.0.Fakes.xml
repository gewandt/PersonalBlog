<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoMapper.4.2.0.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:AutoMapper.Fakes.ShimAliasedMember">
            <summary>Тип оболочки совместимости для AutoMapper.AliasedMember</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAliasedMember.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAliasedMember.#ctor(AutoMapper.AliasedMember)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAliasedMember.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAliasedMember.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAliasedMember.AliasGet">
            <summary>Задает оболочка совместимости AliasedMember.get_Alias()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAliasedMember.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAliasedMember.ConstructorStringString">
            <summary>Задает оболочка совместимости AliasedMember.AliasedMember(String member, String alias)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAliasedMember.EqualsAliasedMember">
            <summary>Задает оболочка совместимости AliasedMember.Equals(AliasedMember other)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAliasedMember.EqualsObject">
            <summary>Задает оболочка совместимости AliasedMember.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAliasedMember.GetHashCode">
            <summary>Задает оболочка совместимости AliasedMember.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAliasedMember.MemberGet">
            <summary>Задает оболочка совместимости AliasedMember.get_Member()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimAliasedMember.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAliasedMember.AllInstances.AliasGet">
            <summary>Задает оболочка совместимости AliasedMember.get_Alias()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAliasedMember.AllInstances.EqualsAliasedMember">
            <summary>Задает оболочка совместимости AliasedMember.Equals(AliasedMember other)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAliasedMember.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости AliasedMember.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAliasedMember.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости AliasedMember.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAliasedMember.AllInstances.MemberGet">
            <summary>Задает оболочка совместимости AliasedMember.get_Member()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimAllMemberInfo">
            <summary>Тип оболочки совместимости для AutoMapper.AllMemberInfo</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAllMemberInfo.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAllMemberInfo.#ctor(AutoMapper.AllMemberInfo)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAllMemberInfo.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAllMemberInfo.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAllMemberInfo.Bind(AutoMapper.IGetTypeInfoMembers)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAllMemberInfo.AddConditionFuncOfMemberInfoBoolean">
            <summary>Задает оболочка совместимости AllMemberInfo.AddCondition(Func`2&lt;MemberInfo,Boolean&gt; predicate)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAllMemberInfo.AllMembersTypeDetails">
            <summary>Задает оболочка совместимости AllMemberInfo.AllMembers(TypeDetails typeInfo)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAllMemberInfo.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAllMemberInfo.Constructor">
            <summary>Задает оболочка совместимости AllMemberInfo.AllMemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAllMemberInfo.GetMemberInfosTypeDetails">
            <summary>Задает оболочка совместимости AllMemberInfo.GetMemberInfos(TypeDetails typeInfo)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAllMemberInfo._GetMemberInfosb__1_0MemberInfo">
            <summary>Задает оболочка совместимости AllMemberInfo.&lt;GetMemberInfos&gt;b__1_0(MemberInfo m)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimAllMemberInfo.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAllMemberInfo.AllInstances.AddConditionFuncOfMemberInfoBoolean">
            <summary>Задает оболочка совместимости AllMemberInfo.AddCondition(Func`2&lt;MemberInfo,Boolean&gt; predicate)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAllMemberInfo.AllInstances.GetMemberInfosTypeDetails">
            <summary>Задает оболочка совместимости AllMemberInfo.GetMemberInfos(TypeDetails typeInfo)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAllMemberInfo.AllInstances._GetMemberInfosb__1_0MemberInfo">
            <summary>Задает оболочка совместимости AllMemberInfo.&lt;GetMemberInfos&gt;b__1_0(MemberInfo m)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimAutoMapperConfigurationException">
            <summary>Тип оболочки совместимости для AutoMapper.AutoMapperConfigurationException</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperConfigurationException.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperConfigurationException.#ctor(AutoMapper.AutoMapperConfigurationException)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperConfigurationException.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperConfigurationException.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperConfigurationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ConstructorAutoMapperConfigurationExceptionTypeMapConfigErrorsArray">
            <summary>Задает оболочка совместимости AutoMapperConfigurationException.AutoMapperConfigurationException(TypeMapConfigErrors[] errors)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ConstructorResolutionContext">
            <summary>Задает оболочка совместимости AutoMapperConfigurationException.AutoMapperConfigurationException(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ConstructorString">
            <summary>Задает оболочка совместимости AutoMapperConfigurationException.AutoMapperConfigurationException(String message)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ConstructorStringException">
            <summary>Задает оболочка совместимости AutoMapperConfigurationException.AutoMapperConfigurationException(String message, Exception inner)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ContextGet">
            <summary>Задает оболочка совместимости AutoMapperConfigurationException.get_Context()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ErrorsGet">
            <summary>Задает оболочка совместимости AutoMapperConfigurationException.get_Errors()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.MessageGet">
            <summary>Задает оболочка совместимости AutoMapperConfigurationException.get_Message()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.StackTraceGet">
            <summary>Задает оболочка совместимости AutoMapperConfigurationException.get_StackTrace()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimAutoMapperConfigurationException.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.AllInstances.ContextGet">
            <summary>Задает оболочка совместимости AutoMapperConfigurationException.get_Context()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.AllInstances.ErrorsGet">
            <summary>Задает оболочка совместимости AutoMapperConfigurationException.get_Errors()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.AllInstances.MessageGet">
            <summary>Задает оболочка совместимости AutoMapperConfigurationException.get_Message()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.AllInstances.StackTraceGet">
            <summary>Задает оболочка совместимости AutoMapperConfigurationException.get_StackTrace()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ShimTypeMapConfigErrors">
            <summary>Тип оболочки совместимости для AutoMapper.AutoMapperConfigurationException+TypeMapConfigErrors</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ShimTypeMapConfigErrors.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ShimTypeMapConfigErrors.#ctor(AutoMapper.AutoMapperConfigurationException.TypeMapConfigErrors)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ShimTypeMapConfigErrors.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ShimTypeMapConfigErrors.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ShimTypeMapConfigErrors.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ShimTypeMapConfigErrors.ConstructorTypeMapStringArray">
            <summary>Задает оболочка совместимости TypeMapConfigErrors.TypeMapConfigErrors(TypeMap typeMap, String[] unmappedPropertyNames)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ShimTypeMapConfigErrors.TypeMapGet">
            <summary>Задает оболочка совместимости TypeMapConfigErrors.get_TypeMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ShimTypeMapConfigErrors.UnmappedPropertyNamesGet">
            <summary>Задает оболочка совместимости TypeMapConfigErrors.get_UnmappedPropertyNames()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ShimTypeMapConfigErrors.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ShimTypeMapConfigErrors.AllInstances.TypeMapGet">
            <summary>Задает оболочка совместимости TypeMapConfigErrors.get_TypeMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperConfigurationException.ShimTypeMapConfigErrors.AllInstances.UnmappedPropertyNamesGet">
            <summary>Задает оболочка совместимости TypeMapConfigErrors.get_UnmappedPropertyNames()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimAutoMapperMappingException">
            <summary>Тип оболочки совместимости для AutoMapper.AutoMapperMappingException</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperMappingException.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperMappingException.#ctor(AutoMapper.AutoMapperMappingException)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperMappingException.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperMappingException.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimAutoMapperMappingException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.Constructor">
            <summary>Задает оболочка совместимости AutoMapperMappingException.AutoMapperMappingException()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.ConstructorResolutionContext">
            <summary>Задает оболочка совместимости AutoMapperMappingException.AutoMapperMappingException(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.ConstructorResolutionContextException">
            <summary>Задает оболочка совместимости AutoMapperMappingException.AutoMapperMappingException(ResolutionContext context, Exception inner)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.ConstructorResolutionContextString">
            <summary>Задает оболочка совместимости AutoMapperMappingException.AutoMapperMappingException(ResolutionContext context, String message)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.ConstructorString">
            <summary>Задает оболочка совместимости AutoMapperMappingException.AutoMapperMappingException(String message)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.ConstructorStringException">
            <summary>Задает оболочка совместимости AutoMapperMappingException.AutoMapperMappingException(String message, Exception inner)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.ConstructorTypePair">
            <summary>Задает оболочка совместимости AutoMapperMappingException.AutoMapperMappingException(TypePair types)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.ConstructorTypePairException">
            <summary>Задает оболочка совместимости AutoMapperMappingException.AutoMapperMappingException(TypePair types, Exception inner)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.ConstructorTypePairString">
            <summary>Задает оболочка совместимости AutoMapperMappingException.AutoMapperMappingException(TypePair types, String message)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.ContextGet">
            <summary>Задает оболочка совместимости AutoMapperMappingException.get_Context()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.GetDestPathResolutionContext">
            <summary>Задает оболочка совместимости AutoMapperMappingException.GetDestPath(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.MessageGet">
            <summary>Задает оболочка совместимости AutoMapperMappingException.get_Message()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.StackTraceGet">
            <summary>Задает оболочка совместимости AutoMapperMappingException.get_StackTrace()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.TypesGet">
            <summary>Задает оболочка совместимости AutoMapperMappingException.get_Types()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimAutoMapperMappingException.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.AllInstances.ContextGet">
            <summary>Задает оболочка совместимости AutoMapperMappingException.get_Context()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.AllInstances.GetDestPathResolutionContext">
            <summary>Задает оболочка совместимости AutoMapperMappingException.GetDestPath(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.AllInstances.MessageGet">
            <summary>Задает оболочка совместимости AutoMapperMappingException.get_Message()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.AllInstances.StackTraceGet">
            <summary>Задает оболочка совместимости AutoMapperMappingException.get_StackTrace()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimAutoMapperMappingException.AllInstances.TypesGet">
            <summary>Задает оболочка совместимости AutoMapperMappingException.get_Types()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimCaseInsensitiveName">
            <summary>Тип оболочки совместимости для AutoMapper.CaseInsensitiveName</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCaseInsensitiveName.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCaseInsensitiveName.#ctor(AutoMapper.CaseInsensitiveName)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCaseInsensitiveName.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCaseInsensitiveName.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCaseInsensitiveName.Bind(AutoMapper.ISourceToDestinationNameMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCaseInsensitiveName.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCaseInsensitiveName.Constructor">
            <summary>Задает оболочка совместимости CaseInsensitiveName.CaseInsensitiveName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCaseInsensitiveName.GetMatchingMemberInfoIGetTypeInfoMembersTypeDetailsTypeString">
            <summary>Задает оболочка совместимости CaseInsensitiveName.GetMatchingMemberInfo(IGetTypeInfoMembers getTypeInfoMembers, TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimCaseInsensitiveName.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCaseInsensitiveName.AllInstances.GetMatchingMemberInfoIGetTypeInfoMembersTypeDetailsTypeString">
            <summary>Задает оболочка совместимости CaseInsensitiveName.GetMatchingMemberInfo(IGetTypeInfoMembers getTypeInfoMembers, TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimCaseSensitiveName">
            <summary>Тип оболочки совместимости для AutoMapper.CaseSensitiveName</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCaseSensitiveName.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCaseSensitiveName.#ctor(AutoMapper.CaseSensitiveName)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCaseSensitiveName.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCaseSensitiveName.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCaseSensitiveName.Bind(AutoMapper.ISourceToDestinationNameMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCaseSensitiveName.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCaseSensitiveName.Constructor">
            <summary>Задает оболочка совместимости CaseSensitiveName.CaseSensitiveName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCaseSensitiveName.GetMatchingMemberInfoIGetTypeInfoMembersTypeDetailsTypeString">
            <summary>Задает оболочка совместимости CaseSensitiveName.GetMatchingMemberInfo(IGetTypeInfoMembers getTypeInfoMembers, TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCaseSensitiveName.MethodCaseSensitiveGet">
            <summary>Задает оболочка совместимости CaseSensitiveName.get_MethodCaseSensitive()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCaseSensitiveName.MethodCaseSensitiveSetBoolean">
            <summary>Задает оболочка совместимости CaseSensitiveName.set_MethodCaseSensitive(Boolean value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimCaseSensitiveName.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCaseSensitiveName.AllInstances.GetMatchingMemberInfoIGetTypeInfoMembersTypeDetailsTypeString">
            <summary>Задает оболочка совместимости CaseSensitiveName.GetMatchingMemberInfo(IGetTypeInfoMembers getTypeInfoMembers, TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCaseSensitiveName.AllInstances.MethodCaseSensitiveGet">
            <summary>Задает оболочка совместимости CaseSensitiveName.get_MethodCaseSensitive()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCaseSensitiveName.AllInstances.MethodCaseSensitiveSetBoolean">
            <summary>Задает оболочка совместимости CaseSensitiveName.set_MethodCaseSensitive(Boolean value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimConstructorMap">
            <summary>Тип оболочки совместимости для AutoMapper.ConstructorMap</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimConstructorMap.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimConstructorMap.#ctor(AutoMapper.ConstructorMap)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimConstructorMap.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimConstructorMap.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.ConstructorConstructorInfoIEnumerableOfConstructorParameterMap">
            <summary>Задает оболочка совместимости ConstructorMap.ConstructorMap(ConstructorInfo ctor, IEnumerable`1&lt;ConstructorParameterMap&gt; ctorParams)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.CtorGet">
            <summary>Задает оболочка совместимости ConstructorMap.get_Ctor()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.CtorParamsGet">
            <summary>Задает оболочка совместимости ConstructorMap.get_CtorParams()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.CtorSetConstructorInfo">
            <summary>Задает оболочка совместимости ConstructorMap.set_Ctor(ConstructorInfo value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.NewExpressionExpression">
            <summary>Задает оболочка совместимости ConstructorMap.NewExpression(Expression instanceParameter)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.ResolveValueResolutionContext">
            <summary>Задает оболочка совместимости ConstructorMap.ResolveValue(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.StaticConstructor">
            <summary>Задает оболочка совместимости ConstructorMap.ConstructorMap()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimConstructorMap.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.AllInstances.CtorGet">
            <summary>Задает оболочка совместимости ConstructorMap.get_Ctor()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.AllInstances.CtorParamsGet">
            <summary>Задает оболочка совместимости ConstructorMap.get_CtorParams()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.AllInstances.CtorSetConstructorInfo">
            <summary>Задает оболочка совместимости ConstructorMap.set_Ctor(ConstructorInfo value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.AllInstances.NewExpressionExpression">
            <summary>Задает оболочка совместимости ConstructorMap.NewExpression(Expression instanceParameter)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorMap.AllInstances.ResolveValueResolutionContext">
            <summary>Задает оболочка совместимости ConstructorMap.ResolveValue(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimConstructorParameterMap">
            <summary>Тип оболочки совместимости для AutoMapper.ConstructorParameterMap</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimConstructorParameterMap.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimConstructorParameterMap.#ctor(AutoMapper.ConstructorParameterMap)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimConstructorParameterMap.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimConstructorParameterMap.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.CanResolveGet">
            <summary>Задает оболочка совместимости ConstructorParameterMap.get_CanResolve()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.CanResolveSetBoolean">
            <summary>Задает оболочка совместимости ConstructorParameterMap.set_CanResolve(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.ConstructorParameterInfoIValueResolverArrayBoolean">
            <summary>Задает оболочка совместимости ConstructorParameterMap.ConstructorParameterMap(ParameterInfo parameter, IValueResolver[] sourceResolvers, Boolean canResolve)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.ParameterGet">
            <summary>Задает оболочка совместимости ConstructorParameterMap.get_Parameter()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.ParameterSetParameterInfo">
            <summary>Задает оболочка совместимости ConstructorParameterMap.set_Parameter(ParameterInfo value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.ResolveUsingIEnumerableOfIMemberGetter">
            <summary>Задает оболочка совместимости ConstructorParameterMap.ResolveUsing(IEnumerable`1&lt;IMemberGetter&gt; members)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.ResolveValueResolutionContext">
            <summary>Задает оболочка совместимости ConstructorParameterMap.ResolveValue(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.SourceResolversGet">
            <summary>Задает оболочка совместимости ConstructorParameterMap.get_SourceResolvers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.SourceResolversSetIValueResolverArray">
            <summary>Задает оболочка совместимости ConstructorParameterMap.set_SourceResolvers(IValueResolver[] value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimConstructorParameterMap.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.AllInstances.CanResolveGet">
            <summary>Задает оболочка совместимости ConstructorParameterMap.get_CanResolve()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.AllInstances.CanResolveSetBoolean">
            <summary>Задает оболочка совместимости ConstructorParameterMap.set_CanResolve(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.AllInstances.ParameterGet">
            <summary>Задает оболочка совместимости ConstructorParameterMap.get_Parameter()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.AllInstances.ParameterSetParameterInfo">
            <summary>Задает оболочка совместимости ConstructorParameterMap.set_Parameter(ParameterInfo value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.AllInstances.ResolveUsingIEnumerableOfIMemberGetter">
            <summary>Задает оболочка совместимости ConstructorParameterMap.ResolveUsing(IEnumerable`1&lt;IMemberGetter&gt; members)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.AllInstances.ResolveValueResolutionContext">
            <summary>Задает оболочка совместимости ConstructorParameterMap.ResolveValue(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.AllInstances.SourceResolversGet">
            <summary>Задает оболочка совместимости ConstructorParameterMap.get_SourceResolvers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimConstructorParameterMap.AllInstances.SourceResolversSetIValueResolverArray">
            <summary>Задает оболочка совместимости ConstructorParameterMap.set_SourceResolvers(IValueResolver[] value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimCtorParamConfigurationExpression`1">
            <summary>Тип оболочки совместимости для AutoMapper.CtorParamConfigurationExpression`1</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCtorParamConfigurationExpression`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCtorParamConfigurationExpression`1.#ctor(AutoMapper.CtorParamConfigurationExpression{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCtorParamConfigurationExpression`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCtorParamConfigurationExpression`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCtorParamConfigurationExpression`1.Bind(AutoMapper.ICtorParamConfigurationExpression{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCtorParamConfigurationExpression`1.MapFromOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Linq.Expressions.Expression{System.Func{`0,``0}}})">
            <summary>Задает оболочка совместимости CtorParamConfigurationExpression`1.MapFrom(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; sourceMember)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCtorParamConfigurationExpression`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimCtorParamConfigurationExpression`1.ConstructorConstructorParameterMap">
            <summary>Задает оболочка совместимости CtorParamConfigurationExpression`1.CtorParamConfigurationExpression`1(ConstructorParameterMap ctorParamMap)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimCtorParamConfigurationExpression`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimCtorParamConfigurationExpression`1.AllInstances.MapFromOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.CtorParamConfigurationExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}}})">
            <summary>Задает оболочка совместимости CtorParamConfigurationExpression`1.MapFrom(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; sourceMember)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimDefaultMember">
            <summary>Тип оболочки совместимости для AutoMapper.DefaultMember</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimDefaultMember.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimDefaultMember.#ctor(AutoMapper.DefaultMember)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimDefaultMember.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimDefaultMember.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimDefaultMember.Bind(AutoMapper.IChildMemberConfiguration)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimDefaultMember.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimDefaultMember.Constructor">
            <summary>Задает оболочка совместимости DefaultMember.DefaultMember()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimDefaultMember.MapDestinationPropertyToSourceIProfileConfigurationTypeDetailsTypeStringLinkedListOfIValueResolverIMemberConfiguration">
            <summary>Задает оболочка совместимости DefaultMember.MapDestinationPropertyToSource(IProfileConfiguration options, TypeDetails sourceType, Type destType, String nameToSearch, LinkedList`1&lt;IValueResolver&gt; resolvers, IMemberConfiguration parent)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimDefaultMember.NameMapperGet">
            <summary>Задает оболочка совместимости DefaultMember.get_NameMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimDefaultMember.NameMapperSetIParentSourceToDestinationNameMapper">
            <summary>Задает оболочка совместимости DefaultMember.set_NameMapper(IParentSourceToDestinationNameMapper value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimDefaultMember.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimDefaultMember.AllInstances.MapDestinationPropertyToSourceIProfileConfigurationTypeDetailsTypeStringLinkedListOfIValueResolverIMemberConfiguration">
            <summary>Задает оболочка совместимости DefaultMember.MapDestinationPropertyToSource(IProfileConfiguration options, TypeDetails sourceType, Type destType, String nameToSearch, LinkedList`1&lt;IValueResolver&gt; resolvers, IMemberConfiguration parent)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimDefaultMember.AllInstances.NameMapperGet">
            <summary>Задает оболочка совместимости DefaultMember.get_NameMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimDefaultMember.AllInstances.NameMapperSetIParentSourceToDestinationNameMapper">
            <summary>Задает оболочка совместимости DefaultMember.set_NameMapper(IParentSourceToDestinationNameMapper value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimDefaultName">
            <summary>Тип оболочки совместимости для AutoMapper.DefaultName</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimDefaultName.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimDefaultName.#ctor(AutoMapper.DefaultName)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimDefaultName.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimDefaultName.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimDefaultName.Bind(AutoMapper.ISourceToDestinationNameMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimDefaultName.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimDefaultName.Constructor">
            <summary>Задает оболочка совместимости DefaultName.DefaultName()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimDefaultName.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimIgnoreMapAttribute">
            <summary>Тип оболочки совместимости для AutoMapper.IgnoreMapAttribute</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimIgnoreMapAttribute.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimIgnoreMapAttribute.#ctor(AutoMapper.IgnoreMapAttribute)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimIgnoreMapAttribute.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimIgnoreMapAttribute.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimIgnoreMapAttribute.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimIgnoreMapAttribute.Constructor">
            <summary>Задает оболочка совместимости IgnoreMapAttribute.IgnoreMapAttribute()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimIgnoreMapAttribute.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention">
            <summary>Тип оболочки совместимости для AutoMapper.LowerUnderscoreNamingConvention</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.#ctor(AutoMapper.LowerUnderscoreNamingConvention)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.Bind(AutoMapper.INamingConvention)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.Constructor">
            <summary>Задает оболочка совместимости LowerUnderscoreNamingConvention.LowerUnderscoreNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.ReplaceValueMatch">
            <summary>Задает оболочка совместимости LowerUnderscoreNamingConvention.ReplaceValue(Match match)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.SeparatorCharacterGet">
            <summary>Задает оболочка совместимости LowerUnderscoreNamingConvention.get_SeparatorCharacter()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.SplittingExpressionGet">
            <summary>Задает оболочка совместимости LowerUnderscoreNamingConvention.get_SplittingExpression()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.AllInstances.ReplaceValueMatch">
            <summary>Задает оболочка совместимости LowerUnderscoreNamingConvention.ReplaceValue(Match match)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.AllInstances.SeparatorCharacterGet">
            <summary>Задает оболочка совместимости LowerUnderscoreNamingConvention.get_SeparatorCharacter()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimLowerUnderscoreNamingConvention.AllInstances.SplittingExpressionGet">
            <summary>Задает оболочка совместимости LowerUnderscoreNamingConvention.get_SplittingExpression()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMapToAttribute">
            <summary>Тип оболочки совместимости для AutoMapper.MapToAttribute</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapToAttribute.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapToAttribute.#ctor(AutoMapper.MapToAttribute)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapToAttribute.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapToAttribute.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapToAttribute.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapToAttribute.ConstructorString">
            <summary>Задает оболочка совместимости MapToAttribute.MapToAttribute(String matchingName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapToAttribute.IsMatchTypeDetailsMemberInfoTypeString">
            <summary>Задает оболочка совместимости MapToAttribute.IsMatch(TypeDetails typeInfo, MemberInfo memberInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapToAttribute.MatchingNameGet">
            <summary>Задает оболочка совместимости MapToAttribute.get_MatchingName()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMapToAttribute.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapToAttribute.AllInstances.IsMatchTypeDetailsMemberInfoTypeString">
            <summary>Задает оболочка совместимости MapToAttribute.IsMatch(TypeDetails typeInfo, MemberInfo memberInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapToAttribute.AllInstances.MatchingNameGet">
            <summary>Задает оболочка совместимости MapToAttribute.get_MatchingName()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mapper</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.#ctor(AutoMapper.Mapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AddProfileOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает оболочка совместимости Mapper.AddProfile()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AssertConfigurationIsValidOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает оболочка совместимости Mapper.AssertConfigurationIsValid()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AutoMapperIDynamicMapperDynamicMapOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IDynamicMapper.DynamicMap(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AutoMapperIDynamicMapperDynamicMapOf2M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IDynamicMapper.DynamicMap(!!0 source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AutoMapperIDynamicMapperDynamicMapOf2M0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0,``1})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IDynamicMapper.DynamicMap(!!0 source, !!1 destination)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AutoMapperIMapperMapOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AutoMapperIMapperMapOf1ObjectActionOfIMappingOperationOptions``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Action{AutoMapper.IMappingOperationOptions},``0})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(Object source, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AutoMapperIMapperMapOf2M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(!!0 source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AutoMapperIMapperMapOf2M0ActionOfIMappingOperationOptionsOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Action{AutoMapper.IMappingOperationOptions{``0,``1}},``1})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(!!0 source, Action`1&lt;IMappingOperationOptions`2&lt;!!0,!!1&gt;&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AutoMapperIMapperMapOf2M0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1,``1})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(!!0 source, !!1 destination)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AutoMapperIMapperMapOf2M0M1ActionOfIMappingOperationOptionsOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1,System.Action{AutoMapper.IMappingOperationOptions{``0,``1}},``1})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(!!0 source, !!1 destination, Action`1&lt;IMappingOperationOptions`2&lt;!!0,!!1&gt;&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.Bind(AutoMapper.IDynamicMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.Bind(AutoMapper.IMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.CreateMapOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости Mapper.CreateMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.CreateMapOf2MemberList``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MemberList,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости Mapper.CreateMap(MemberList memberList)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.DynamicMapOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>Задает оболочка совместимости Mapper.DynamicMap(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.DynamicMapOf2M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1})">
            <summary>Задает оболочка совместимости Mapper.DynamicMap(!!0 source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.DynamicMapOf2M0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0,``1})">
            <summary>Задает оболочка совместимости Mapper.DynamicMap(!!0 source, !!1 destination)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.FindTypeMapForOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.TypeMap})">
            <summary>Задает оболочка совместимости Mapper.FindTypeMapFor()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.MapOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>Задает оболочка совместимости Mapper.Map(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.MapOf1ObjectActionOfIMappingOperationOptions``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Action{AutoMapper.IMappingOperationOptions},``0})">
            <summary>Задает оболочка совместимости Mapper.Map(Object source, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.MapOf2M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1})">
            <summary>Задает оболочка совместимости Mapper.Map(!!0 source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.MapOf2M0ActionOfIMappingOperationOptionsOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Action{AutoMapper.IMappingOperationOptions{``0,``1}},``1})">
            <summary>Задает оболочка совместимости Mapper.Map(!!0 source, Action`1&lt;IMappingOperationOptions`2&lt;!!0,!!1&gt;&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.MapOf2M0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1,``1})">
            <summary>Задает оболочка совместимости Mapper.Map(!!0 source, !!1 destination)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.MapOf2M0M1ActionOfIMappingOperationOptionsOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1,System.Action{AutoMapper.IMappingOperationOptions{``0,``1}},``1})">
            <summary>Задает оболочка совместимости Mapper.Map(!!0 source, !!1 destination, Action`1&lt;IMappingOperationOptions`2&lt;!!0,!!1&gt;&gt; opts)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AddGlobalIgnoreString">
            <summary>Задает оболочка совместимости Mapper.AddGlobalIgnore(String startingwith)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AddProfileProfile">
            <summary>Задает оболочка совместимости Mapper.AddProfile(Profile profile)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AllowNullDestinationValuesGet">
            <summary>Задает оболочка совместимости Mapper.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AllowNullDestinationValuesSetBoolean">
            <summary>Задает оболочка совместимости Mapper.set_AllowNullDestinationValues(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AssertConfigurationIsValid">
            <summary>Задает оболочка совместимости Mapper.AssertConfigurationIsValid()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AssertConfigurationIsValidString">
            <summary>Задает оболочка совместимости Mapper.AssertConfigurationIsValid(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AssertConfigurationIsValidTypeMap">
            <summary>Задает оболочка совместимости Mapper.AssertConfigurationIsValid(TypeMap typeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AutoMapperIDynamicMapperDynamicMapObjectObjectTypeType">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IDynamicMapper.DynamicMap(Object source, Object destination, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AutoMapperIDynamicMapperDynamicMapObjectTypeType">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IDynamicMapper.DynamicMap(Object source, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AutoMapperIMapperMapObjectObjectTypeType">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(Object source, Object destination, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AutoMapperIMapperMapObjectObjectTypeTypeActionOfIMappingOperationOptions">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(Object source, Object destination, Type sourceType, Type destinationType, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AutoMapperIMapperMapObjectTypeType">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(Object source, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AutoMapperIMapperMapObjectTypeTypeActionOfIMappingOperationOptions">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(Object source, Type sourceType, Type destinationType, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.ConfigurationGet">
            <summary>Задает оболочка совместимости Mapper.get_Configuration()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.ConfigurationProviderAutoMapperIMapperget">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.get_ConfigurationProvider()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.ConfigurationProviderGet">
            <summary>Задает оболочка совместимости Mapper.get_ConfigurationProvider()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.ConstructorIConfigurationProvider">
            <summary>Задает оболочка совместимости Mapper.Mapper(IConfigurationProvider configurationProvider)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.ConstructorIConfigurationProviderFuncOfTypeObject">
            <summary>Задает оболочка совместимости Mapper.Mapper(IConfigurationProvider configurationProvider, Func`2&lt;Type,Object&gt; serviceCtor)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.CreateMapTypeType">
            <summary>Задает оболочка совместимости Mapper.CreateMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.CreateMapTypeTypeMemberList">
            <summary>Задает оболочка совместимости Mapper.CreateMap(Type sourceType, Type destinationType, MemberList memberList)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.CreateProfileString">
            <summary>Задает оболочка совместимости Mapper.CreateProfile(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.CreateProfileStringActionOfIProfileExpression">
            <summary>Задает оболочка совместимости Mapper.CreateProfile(String profileName, Action`1&lt;IProfileExpression&gt; profileConfiguration)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.DefaultMappingOptionsIMappingOperationOptions">
            <summary>Задает оболочка совместимости Mapper.DefaultMappingOptions(IMappingOperationOptions opts)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.DynamicInstanceGet">
            <summary>Задает оболочка совместимости Mapper.get_DynamicInstance()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.DynamicMapObjectObjectTypeType">
            <summary>Задает оболочка совместимости Mapper.DynamicMap(Object source, Object destination, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.DynamicMapObjectTypeType">
            <summary>Задает оболочка совместимости Mapper.DynamicMap(Object source, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.EngineGet">
            <summary>Задает оболочка совместимости Mapper.get_Engine()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.FindTypeMapForTypeType">
            <summary>Задает оболочка совместимости Mapper.FindTypeMapFor(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.GetAllTypeMaps">
            <summary>Задает оболочка совместимости Mapper.GetAllTypeMaps()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.InitializeActionOfIMapperConfiguration">
            <summary>Задает оболочка совместимости Mapper.Initialize(Action`1&lt;IMapperConfiguration&gt; action)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.InstanceGet">
            <summary>Задает оболочка совместимости Mapper.get_Instance()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.MapCoreObjectObjectTypeTypeMappingOperationOptions">
            <summary>Задает оболочка совместимости Mapper.MapCore(Object source, Object destination, Type sourceType, Type destinationType, MappingOperationOptions options)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.MapCoreObjectTypeTypeMappingOperationOptions">
            <summary>Задает оболочка совместимости Mapper.MapCore(Object source, Type sourceType, Type destinationType, MappingOperationOptions options)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.MapObjectObjectTypeType">
            <summary>Задает оболочка совместимости Mapper.Map(Object source, Object destination, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.MapObjectObjectTypeTypeActionOfIMappingOperationOptions">
            <summary>Задает оболочка совместимости Mapper.Map(Object source, Object destination, Type sourceType, Type destinationType, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.MapObjectTypeType">
            <summary>Задает оболочка совместимости Mapper.Map(Object source, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.MapObjectTypeTypeActionOfIMappingOperationOptions">
            <summary>Задает оболочка совместимости Mapper.Map(Object source, Type sourceType, Type destinationType, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.Reset">
            <summary>Задает оболочка совместимости Mapper.Reset()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.StaticConstructor">
            <summary>Задает оболочка совместимости Mapper.Mapper()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIDynamicMapperDynamicMapOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Mapper,System.Object,``0})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IDynamicMapper.DynamicMap(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIDynamicMapperDynamicMapOf2M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Mapper,``0,``1})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IDynamicMapper.DynamicMap(!!0 source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIDynamicMapperDynamicMapOf2M0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.Mapper,``0,``1})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IDynamicMapper.DynamicMap(!!0 source, !!1 destination)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIMapperMapOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Mapper,System.Object,``0})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIMapperMapOf1ObjectActionOfIMappingOperationOptions``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Mapper,System.Object,System.Action{AutoMapper.IMappingOperationOptions},``0})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(Object source, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIMapperMapOf2M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Mapper,``0,``1})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(!!0 source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIMapperMapOf2M0ActionOfIMappingOperationOptionsOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Mapper,``0,System.Action{AutoMapper.IMappingOperationOptions{``0,``1}},``1})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(!!0 source, Action`1&lt;IMappingOperationOptions`2&lt;!!0,!!1&gt;&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIMapperMapOf2M0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Mapper,``0,``1,``1})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(!!0 source, !!1 destination)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIMapperMapOf2M0M1ActionOfIMappingOperationOptionsOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Mapper,``0,``1,System.Action{AutoMapper.IMappingOperationOptions{``0,``1}},``1})">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(!!0 source, !!1 destination, Action`1&lt;IMappingOperationOptions`2&lt;!!0,!!1&gt;&gt; opts)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIDynamicMapperDynamicMapObjectObjectTypeType">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IDynamicMapper.DynamicMap(Object source, Object destination, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIDynamicMapperDynamicMapObjectTypeType">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IDynamicMapper.DynamicMap(Object source, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIMapperMapObjectObjectTypeType">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(Object source, Object destination, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIMapperMapObjectObjectTypeTypeActionOfIMappingOperationOptions">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(Object source, Object destination, Type sourceType, Type destinationType, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIMapperMapObjectTypeType">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(Object source, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AllInstances.AutoMapperIMapperMapObjectTypeTypeActionOfIMappingOperationOptions">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.Map(Object source, Type sourceType, Type destinationType, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AllInstances.ConfigurationProviderAutoMapperIMapperget">
            <summary>Задает оболочка совместимости Mapper.AutoMapper.IMapper.get_ConfigurationProvider()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AllInstances.DefaultMappingOptionsIMappingOperationOptions">
            <summary>Задает оболочка совместимости Mapper.DefaultMappingOptions(IMappingOperationOptions opts)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AllInstances.MapCoreObjectObjectTypeTypeMappingOperationOptions">
            <summary>Задает оболочка совместимости Mapper.MapCore(Object source, Object destination, Type sourceType, Type destinationType, MappingOperationOptions options)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapper.AllInstances.MapCoreObjectTypeTypeMappingOperationOptions">
            <summary>Задает оболочка совместимости Mapper.MapCore(Object source, Type sourceType, Type destinationType, MappingOperationOptions options)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMapperConfiguration">
            <summary>Тип оболочки совместимости для AutoMapper.MapperConfiguration</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.#ctor(AutoMapper.MapperConfiguration)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AssertConfigurationIsValidOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает оболочка совместимости MapperConfiguration.AssertConfigurationIsValid()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIConfigurationAddProfileOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.AddProfile()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIConfigurationCreateMapOf2String``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.CreateMap(String profileName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIConfigurationCreateMapOf2StringMemberList``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,AutoMapper.MemberList,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.CreateMap(String profileName, MemberList memberList)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionCreateMapOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.CreateMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionCreateMapOf2MemberList``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MemberList,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.CreateMap(MemberList memberList)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.Bind(AutoMapper.IConfiguration)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.Bind(AutoMapper.IConfigurationProvider)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.Bind(AutoMapper.IMapperConfiguration)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.Bind(AutoMapper.IProfileExpression)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.CreateMappingExpressionOf2TypeMap``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.TypeMap,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateMappingExpression(TypeMap typeMap)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.FindTypeMapForOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.TypeMap})">
            <summary>Задает оболочка совместимости MapperConfiguration.FindTypeMapFor()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.IgnoreOf2IMappingExpressionOfM0M1Type``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{``0,``1},System.Type,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости MapperConfiguration.Ignore(IMappingExpression`2&lt;!!0,!!1&gt; mappingExp, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllowNullCollectionsAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_AllowNullCollections()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllowNullCollectionsAutoMapperIProfileExpressionsetBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_AllowNullCollections(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllowNullCollectionsGet">
            <summary>Задает оболочка совместимости MapperConfiguration.get_AllowNullCollections()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllowNullCollectionsSetBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.set_AllowNullCollections(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllowNullDestinationValuesAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllowNullDestinationValuesAutoMapperIProfileExpressionsetBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_AllowNullDestinationValues(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllowNullDestinationValuesGet">
            <summary>Задает оболочка совместимости MapperConfiguration.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllowNullDestinationValuesSetBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.set_AllowNullDestinationValues(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AssertConfigurationIsValid">
            <summary>Задает оболочка совместимости MapperConfiguration.AssertConfigurationIsValid()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AssertConfigurationIsValidIEnumerableOfTypeMap">
            <summary>Задает оболочка совместимости MapperConfiguration.AssertConfigurationIsValid(IEnumerable`1&lt;TypeMap&gt; typeMaps)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AssertConfigurationIsValidString">
            <summary>Задает оболочка совместимости MapperConfiguration.AssertConfigurationIsValid(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AssertConfigurationIsValidTypeMap">
            <summary>Задает оболочка совместимости MapperConfiguration.AssertConfigurationIsValid(TypeMap typeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIConfigurationAddProfileProfile">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.AddProfile(Profile profile)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIConfigurationConstructServicesUsingFuncOfTypeObject">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.ConstructServicesUsing(Func`2&lt;Type,Object&gt; constructor)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIConfigurationCreateMapTypeTypeMemberListString">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.CreateMap(Type sourceType, Type destinationType, MemberList memberList, String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIConfigurationCreateProfileString">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.CreateProfile(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIConfigurationCreateProfileStringActionOfIProfileExpression">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.CreateProfile(String profileName, Action`1&lt;IProfileExpression&gt; profileConfiguration)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIConfigurationForAllMapsStringActionOfTypeMapIMappingExpression">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.ForAllMaps(String profileName, Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionAddConditionalObjectMapper">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.AddConditionalObjectMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionAddGlobalIgnoreString">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.AddGlobalIgnore(String startingwith)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionAddMemberConfiguration">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.AddMemberConfiguration()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionClearPrefixes">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.ClearPrefixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionCreateMapTypeType">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.CreateMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionCreateMapTypeTypeMemberList">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.CreateMap(Type sourceType, Type destinationType, MemberList memberList)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionDisableConstructorMapping">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.DisableConstructorMapping()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionForAllMapsActionOfTypeMapIMappingExpression">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.ForAllMaps(Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionIncludeSourceExtensionMethodsAssembly">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.IncludeSourceExtensionMethods(Assembly assembly)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionRecognizeAliasStringString">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.RecognizeAlias(String original, String alias)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionRecognizeDestinationPostfixesStringArray">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.RecognizeDestinationPostfixes(String[] postfixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionRecognizeDestinationPrefixesStringArray">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.RecognizeDestinationPrefixes(String[] prefixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionRecognizePostfixesStringArray">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.RecognizePostfixes(String[] postfixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionRecognizePrefixesStringArray">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.RecognizePrefixes(String[] prefixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AutoMapperIProfileExpressionReplaceMemberNameStringString">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.ReplaceMemberName(String original, String newValue)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.CheckElementMapsICollectionOfTypeMapResolutionContext">
            <summary>Задает оболочка совместимости MapperConfiguration.CheckElementMaps(ICollection`1&lt;TypeMap&gt; typeMapsChecked, ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.CheckPropertyMapsICollectionOfTypeMapResolutionContext">
            <summary>Задает оболочка совместимости MapperConfiguration.CheckPropertyMaps(ICollection`1&lt;TypeMap&gt; typeMapsChecked, ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ConstructorActionOfIMapperConfiguration">
            <summary>Задает оболочка совместимости MapperConfiguration.MapperConfiguration(Action`1&lt;IMapperConfiguration&gt; configure)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ConstructorActionOfIMapperConfigurationIEnumerableOfIObjectMapperIEnumerableOfITypeMapObjectMapper">
            <summary>Задает оболочка совместимости MapperConfiguration.MapperConfiguration(Action`1&lt;IMapperConfiguration&gt; configure, IEnumerable`1&lt;IObjectMapper&gt; mappers, IEnumerable`1&lt;ITypeMapObjectMapper&gt; typeMapObjectMappers)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.CoveredByObjectMapTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.CoveredByObjectMap(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.CreateMapper">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.CreateMapperFuncOfTypeObject">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateMapper(Func`2&lt;Type,Object&gt; serviceCtor)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.CreateMappingExpressionTypeMap">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateMappingExpression(TypeMap typeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.CreateMissingTypeMapsAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_CreateMissingTypeMaps()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.CreateMissingTypeMapsAutoMapperIProfileExpressionsetBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_CreateMissingTypeMaps(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.CreateProfileString">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateProfile(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.CreateTypeMapTypePairString">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateTypeMap(TypePair types, String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.CreateTypeMapTypePairStringMemberList">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateTypeMap(TypePair types, String profileName, MemberList memberList)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.DestinationMemberNamingConventionAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.DestinationMemberNamingConventionAutoMapperIProfileExpressionsetINamingConvention">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_DestinationMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.DryRunTypeMapICollectionOfTypeMapResolutionContext">
            <summary>Задает оболочка совместимости MapperConfiguration.DryRunTypeMap(ICollection`1&lt;TypeMap&gt; typeMapsChecked, ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ExpressionBuilderGet">
            <summary>Задает оболочка совместимости MapperConfiguration.get_ExpressionBuilder()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.FindClosedGenericTypeMapForTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.FindClosedGenericTypeMapFor(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.FindConventionTypeMapForTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.FindConventionTypeMapFor(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.FindTypeMapForTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.FindTypeMapFor(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.FindTypeMapForTypeType">
            <summary>Задает оболочка совместимости MapperConfiguration.FindTypeMapFor(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.GetAllTypeMaps">
            <summary>Задает оболочка совместимости MapperConfiguration.GetAllTypeMaps()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.GetAllTypesType">
            <summary>Задает оболочка совместимости MapperConfiguration.GetAllTypes(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.GetDerivedTypeMapsTypeMap">
            <summary>Задает оболочка совместимости MapperConfiguration.GetDerivedTypeMaps(TypeMap typeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.GetMappers">
            <summary>Задает оболочка совместимости MapperConfiguration.GetMappers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.GetProfileConfigurationString">
            <summary>Задает оболочка совместимости MapperConfiguration.GetProfileConfiguration(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.GetProfileString">
            <summary>Задает оболочка совместимости MapperConfiguration.GetProfile(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.GetRelatedTypePairsTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.GetRelatedTypePairs(TypePair root)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.GetTypeMapMappers">
            <summary>Задает оболочка совместимости MapperConfiguration.GetTypeMapMappers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.HasOpenGenericTypeMapDefinedTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.HasOpenGenericTypeMapDefined(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.IncludeBaseMappingsTypePairTypeMap">
            <summary>Задает оболочка совместимости MapperConfiguration.IncludeBaseMappings(TypePair types, TypeMap typeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ProfileNameGet">
            <summary>Задает оболочка совместимости MapperConfiguration.get_ProfileName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ResolveTypeMapObjectObjectTypeType">
            <summary>Задает оболочка совместимости MapperConfiguration.ResolveTypeMap(Object source, Object destination, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ResolveTypeMapResolutionResultType">
            <summary>Задает оболочка совместимости MapperConfiguration.ResolveTypeMap(ResolutionResult resolutionResult, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ResolveTypeMapTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.ResolveTypeMap(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ResolveTypeMapTypeType">
            <summary>Задает оболочка совместимости MapperConfiguration.ResolveTypeMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.Seal">
            <summary>Задает оболочка совместимости MapperConfiguration.Seal()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ServiceCtorGet">
            <summary>Задает оболочка совместимости MapperConfiguration.get_ServiceCtor()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ShouldMapFieldAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_ShouldMapField()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ShouldMapFieldAutoMapperIProfileExpressionsetFuncOfFieldInfoBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_ShouldMapField(Func`2&lt;FieldInfo,Boolean&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ShouldMapPropertyAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_ShouldMapProperty()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.ShouldMapPropertyAutoMapperIProfileExpressionsetFuncOfPropertyInfoBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_ShouldMapProperty(Func`2&lt;PropertyInfo,Boolean&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.SourceMemberNamingConventionAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.SourceMemberNamingConventionAutoMapperIProfileExpressionsetINamingConvention">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_SourceMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AssertConfigurationIsValidOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.MapperConfiguration})">
            <summary>Задает оболочка совместимости MapperConfiguration.AssertConfigurationIsValid()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIConfigurationAddProfileOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.MapperConfiguration})">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.AddProfile()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIConfigurationCreateMapOf2String``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MapperConfiguration,System.String,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.CreateMap(String profileName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIConfigurationCreateMapOf2StringMemberList``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MapperConfiguration,System.String,AutoMapper.MemberList,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.CreateMap(String profileName, MemberList memberList)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionCreateMapOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MapperConfiguration,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.CreateMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionCreateMapOf2MemberList``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MapperConfiguration,AutoMapper.MemberList,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.CreateMap(MemberList memberList)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.CreateMappingExpressionOf2TypeMap``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MapperConfiguration,AutoMapper.TypeMap,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateMappingExpression(TypeMap typeMap)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.FindTypeMapForOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MapperConfiguration,AutoMapper.TypeMap})">
            <summary>Задает оболочка совместимости MapperConfiguration.FindTypeMapFor()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.IgnoreOf2IMappingExpressionOfM0M1Type``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MapperConfiguration,AutoMapper.IMappingExpression{``0,``1},System.Type,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости MapperConfiguration.Ignore(IMappingExpression`2&lt;!!0,!!1&gt; mappingExp, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AllowNullCollectionsAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_AllowNullCollections()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AllowNullCollectionsAutoMapperIProfileExpressionsetBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_AllowNullCollections(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AllowNullCollectionsGet">
            <summary>Задает оболочка совместимости MapperConfiguration.get_AllowNullCollections()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AllowNullCollectionsSetBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.set_AllowNullCollections(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AllowNullDestinationValuesAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AllowNullDestinationValuesAutoMapperIProfileExpressionsetBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_AllowNullDestinationValues(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AllowNullDestinationValuesGet">
            <summary>Задает оболочка совместимости MapperConfiguration.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AllowNullDestinationValuesSetBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.set_AllowNullDestinationValues(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AssertConfigurationIsValid">
            <summary>Задает оболочка совместимости MapperConfiguration.AssertConfigurationIsValid()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AssertConfigurationIsValidIEnumerableOfTypeMap">
            <summary>Задает оболочка совместимости MapperConfiguration.AssertConfigurationIsValid(IEnumerable`1&lt;TypeMap&gt; typeMaps)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AssertConfigurationIsValidString">
            <summary>Задает оболочка совместимости MapperConfiguration.AssertConfigurationIsValid(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AssertConfigurationIsValidTypeMap">
            <summary>Задает оболочка совместимости MapperConfiguration.AssertConfigurationIsValid(TypeMap typeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIConfigurationAddProfileProfile">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.AddProfile(Profile profile)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIConfigurationConstructServicesUsingFuncOfTypeObject">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.ConstructServicesUsing(Func`2&lt;Type,Object&gt; constructor)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIConfigurationCreateMapTypeTypeMemberListString">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.CreateMap(Type sourceType, Type destinationType, MemberList memberList, String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIConfigurationCreateProfileString">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.CreateProfile(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIConfigurationCreateProfileStringActionOfIProfileExpression">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.CreateProfile(String profileName, Action`1&lt;IProfileExpression&gt; profileConfiguration)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIConfigurationForAllMapsStringActionOfTypeMapIMappingExpression">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IConfiguration.ForAllMaps(String profileName, Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionAddConditionalObjectMapper">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.AddConditionalObjectMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionAddGlobalIgnoreString">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.AddGlobalIgnore(String startingwith)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionAddMemberConfiguration">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.AddMemberConfiguration()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionClearPrefixes">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.ClearPrefixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionCreateMapTypeType">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.CreateMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionCreateMapTypeTypeMemberList">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.CreateMap(Type sourceType, Type destinationType, MemberList memberList)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionDisableConstructorMapping">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.DisableConstructorMapping()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionForAllMapsActionOfTypeMapIMappingExpression">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.ForAllMaps(Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionIncludeSourceExtensionMethodsAssembly">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.IncludeSourceExtensionMethods(Assembly assembly)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionRecognizeAliasStringString">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.RecognizeAlias(String original, String alias)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionRecognizeDestinationPostfixesStringArray">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.RecognizeDestinationPostfixes(String[] postfixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionRecognizeDestinationPrefixesStringArray">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.RecognizeDestinationPrefixes(String[] prefixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionRecognizePostfixesStringArray">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.RecognizePostfixes(String[] postfixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionRecognizePrefixesStringArray">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.RecognizePrefixes(String[] prefixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.AutoMapperIProfileExpressionReplaceMemberNameStringString">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.ReplaceMemberName(String original, String newValue)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.CheckElementMapsICollectionOfTypeMapResolutionContext">
            <summary>Задает оболочка совместимости MapperConfiguration.CheckElementMaps(ICollection`1&lt;TypeMap&gt; typeMapsChecked, ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.CheckPropertyMapsICollectionOfTypeMapResolutionContext">
            <summary>Задает оболочка совместимости MapperConfiguration.CheckPropertyMaps(ICollection`1&lt;TypeMap&gt; typeMapsChecked, ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.CoveredByObjectMapTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.CoveredByObjectMap(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.CreateMapper">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.CreateMapperFuncOfTypeObject">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateMapper(Func`2&lt;Type,Object&gt; serviceCtor)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.CreateMappingExpressionTypeMap">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateMappingExpression(TypeMap typeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.CreateMissingTypeMapsAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_CreateMissingTypeMaps()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.CreateMissingTypeMapsAutoMapperIProfileExpressionsetBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_CreateMissingTypeMaps(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.CreateProfileString">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateProfile(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.CreateTypeMapTypePairString">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateTypeMap(TypePair types, String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.CreateTypeMapTypePairStringMemberList">
            <summary>Задает оболочка совместимости MapperConfiguration.CreateTypeMap(TypePair types, String profileName, MemberList memberList)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.DestinationMemberNamingConventionAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.DestinationMemberNamingConventionAutoMapperIProfileExpressionsetINamingConvention">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_DestinationMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.DryRunTypeMapICollectionOfTypeMapResolutionContext">
            <summary>Задает оболочка совместимости MapperConfiguration.DryRunTypeMap(ICollection`1&lt;TypeMap&gt; typeMapsChecked, ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.ExpressionBuilderGet">
            <summary>Задает оболочка совместимости MapperConfiguration.get_ExpressionBuilder()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.FindClosedGenericTypeMapForTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.FindClosedGenericTypeMapFor(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.FindConventionTypeMapForTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.FindConventionTypeMapFor(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.FindTypeMapForTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.FindTypeMapFor(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.FindTypeMapForTypeType">
            <summary>Задает оболочка совместимости MapperConfiguration.FindTypeMapFor(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.GetAllTypeMaps">
            <summary>Задает оболочка совместимости MapperConfiguration.GetAllTypeMaps()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.GetAllTypesType">
            <summary>Задает оболочка совместимости MapperConfiguration.GetAllTypes(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.GetDerivedTypeMapsTypeMap">
            <summary>Задает оболочка совместимости MapperConfiguration.GetDerivedTypeMaps(TypeMap typeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.GetMappers">
            <summary>Задает оболочка совместимости MapperConfiguration.GetMappers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.GetProfileConfigurationString">
            <summary>Задает оболочка совместимости MapperConfiguration.GetProfileConfiguration(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.GetProfileString">
            <summary>Задает оболочка совместимости MapperConfiguration.GetProfile(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.GetRelatedTypePairsTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.GetRelatedTypePairs(TypePair root)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.GetTypeMapMappers">
            <summary>Задает оболочка совместимости MapperConfiguration.GetTypeMapMappers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.HasOpenGenericTypeMapDefinedTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.HasOpenGenericTypeMapDefined(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.IncludeBaseMappingsTypePairTypeMap">
            <summary>Задает оболочка совместимости MapperConfiguration.IncludeBaseMappings(TypePair types, TypeMap typeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.ProfileNameGet">
            <summary>Задает оболочка совместимости MapperConfiguration.get_ProfileName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.ResolveTypeMapObjectObjectTypeType">
            <summary>Задает оболочка совместимости MapperConfiguration.ResolveTypeMap(Object source, Object destination, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.ResolveTypeMapResolutionResultType">
            <summary>Задает оболочка совместимости MapperConfiguration.ResolveTypeMap(ResolutionResult resolutionResult, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.ResolveTypeMapTypePair">
            <summary>Задает оболочка совместимости MapperConfiguration.ResolveTypeMap(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.ResolveTypeMapTypeType">
            <summary>Задает оболочка совместимости MapperConfiguration.ResolveTypeMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.Seal">
            <summary>Задает оболочка совместимости MapperConfiguration.Seal()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.ServiceCtorGet">
            <summary>Задает оболочка совместимости MapperConfiguration.get_ServiceCtor()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.ShouldMapFieldAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_ShouldMapField()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.ShouldMapFieldAutoMapperIProfileExpressionsetFuncOfFieldInfoBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_ShouldMapField(Func`2&lt;FieldInfo,Boolean&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.ShouldMapPropertyAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_ShouldMapProperty()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.ShouldMapPropertyAutoMapperIProfileExpressionsetFuncOfPropertyInfoBoolean">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_ShouldMapProperty(Func`2&lt;PropertyInfo,Boolean&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.SourceMemberNamingConventionAutoMapperIProfileExpressionget">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMapperConfiguration.AllInstances.SourceMemberNamingConventionAutoMapperIProfileExpressionsetINamingConvention">
            <summary>Задает оболочка совместимости MapperConfiguration.AutoMapper.IProfileExpression.set_SourceMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMappingEngine">
            <summary>Тип оболочки совместимости для AutoMapper.MappingEngine</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingEngine.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingEngine.#ctor(AutoMapper.MappingEngine)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingEngine.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingEngine.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingEngine.Bind(AutoMapper.IMappingEngine)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.ConfigurationProviderGet">
            <summary>Задает оболочка совместимости MappingEngine.get_ConfigurationProvider()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.ConstructorIConfigurationProviderIMapper">
            <summary>Задает оболочка совместимости MappingEngine.MappingEngine(IConfigurationProvider configurationProvider, IMapper mapper)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.CreateObjectResolutionContext">
            <summary>Задает оболочка совместимости MappingEngine.CreateObject(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.MapResolutionContext">
            <summary>Задает оболочка совместимости MappingEngine.Map(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.MapperGet">
            <summary>Задает оболочка совместимости MappingEngine.get_Mapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.ShouldMapSourceCollectionAsNullResolutionContext">
            <summary>Задает оболочка совместимости MappingEngine.ShouldMapSourceCollectionAsNull(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.ShouldMapSourceValueAsNullResolutionContext">
            <summary>Задает оболочка совместимости MappingEngine.ShouldMapSourceValueAsNull(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMappingEngine.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.AllInstances.ConfigurationProviderGet">
            <summary>Задает оболочка совместимости MappingEngine.get_ConfigurationProvider()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.AllInstances.CreateObjectResolutionContext">
            <summary>Задает оболочка совместимости MappingEngine.CreateObject(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости MappingEngine.Map(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.AllInstances.MapperGet">
            <summary>Задает оболочка совместимости MappingEngine.get_Mapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.AllInstances.ShouldMapSourceCollectionAsNullResolutionContext">
            <summary>Задает оболочка совместимости MappingEngine.ShouldMapSourceCollectionAsNull(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingEngine.AllInstances.ShouldMapSourceValueAsNullResolutionContext">
            <summary>Задает оболочка совместимости MappingEngine.ShouldMapSourceValueAsNull(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMappingOperationOptions">
            <summary>Тип оболочки совместимости для AutoMapper.MappingOperationOptions</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingOperationOptions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingOperationOptions.#ctor(AutoMapper.MappingOperationOptions)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingOperationOptions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingOperationOptions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingOperationOptions.Bind(AutoMapper.IMappingOperationOptions)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AfterMapActionGet">
            <summary>Задает оболочка совместимости MappingOperationOptions.get_AfterMapAction()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AfterMapActionOfObjectObject">
            <summary>Задает оболочка совместимости MappingOperationOptions.AfterMap(Action`2&lt;Object,Object&gt; afterFunction)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AfterMapActionSetActionOfObjectObject">
            <summary>Задает оболочка совместимости MappingOperationOptions.set_AfterMapAction(Action`2&lt;Object,Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AutoMapperIMappingOperationOptionsConstructServicesUsingFuncOfTypeObject">
            <summary>Задает оболочка совместимости MappingOperationOptions.AutoMapper.IMappingOperationOptions.ConstructServicesUsing(Func`2&lt;Type,Object&gt; constructor)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.BeforeMapActionGet">
            <summary>Задает оболочка совместимости MappingOperationOptions.get_BeforeMapAction()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.BeforeMapActionOfObjectObject">
            <summary>Задает оболочка совместимости MappingOperationOptions.BeforeMap(Action`2&lt;Object,Object&gt; beforeFunction)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.BeforeMapActionSetActionOfObjectObject">
            <summary>Задает оболочка совместимости MappingOperationOptions.set_BeforeMapAction(Action`2&lt;Object,Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.Constructor">
            <summary>Задает оболочка совместимости MappingOperationOptions.MappingOperationOptions()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.DisableCacheGet">
            <summary>Задает оболочка совместимости MappingOperationOptions.get_DisableCache()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.DisableCacheSetBoolean">
            <summary>Задает оболочка совместимости MappingOperationOptions.set_DisableCache(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.ItemsGet">
            <summary>Задает оболочка совместимости MappingOperationOptions.get_Items()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.ServiceCtorGet">
            <summary>Задает оболочка совместимости MappingOperationOptions.get_ServiceCtor()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.ServiceCtorSetFuncOfTypeObject">
            <summary>Задает оболочка совместимости MappingOperationOptions.set_ServiceCtor(Func`2&lt;Type,Object&gt; value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances.AfterMapActionGet">
            <summary>Задает оболочка совместимости MappingOperationOptions.get_AfterMapAction()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances.AfterMapActionOfObjectObject">
            <summary>Задает оболочка совместимости MappingOperationOptions.AfterMap(Action`2&lt;Object,Object&gt; afterFunction)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances.AfterMapActionSetActionOfObjectObject">
            <summary>Задает оболочка совместимости MappingOperationOptions.set_AfterMapAction(Action`2&lt;Object,Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances.AutoMapperIMappingOperationOptionsConstructServicesUsingFuncOfTypeObject">
            <summary>Задает оболочка совместимости MappingOperationOptions.AutoMapper.IMappingOperationOptions.ConstructServicesUsing(Func`2&lt;Type,Object&gt; constructor)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances.BeforeMapActionGet">
            <summary>Задает оболочка совместимости MappingOperationOptions.get_BeforeMapAction()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances.BeforeMapActionOfObjectObject">
            <summary>Задает оболочка совместимости MappingOperationOptions.BeforeMap(Action`2&lt;Object,Object&gt; beforeFunction)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances.BeforeMapActionSetActionOfObjectObject">
            <summary>Задает оболочка совместимости MappingOperationOptions.set_BeforeMapAction(Action`2&lt;Object,Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances.DisableCacheGet">
            <summary>Задает оболочка совместимости MappingOperationOptions.get_DisableCache()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances.DisableCacheSetBoolean">
            <summary>Задает оболочка совместимости MappingOperationOptions.set_DisableCache(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances.ItemsGet">
            <summary>Задает оболочка совместимости MappingOperationOptions.get_Items()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances.ServiceCtorGet">
            <summary>Задает оболочка совместимости MappingOperationOptions.get_ServiceCtor()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions.AllInstances.ServiceCtorSetFuncOfTypeObject">
            <summary>Задает оболочка совместимости MappingOperationOptions.set_ServiceCtor(Func`2&lt;Type,Object&gt; value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMappingOperationOptions`2">
            <summary>Тип оболочки совместимости для AutoMapper.MappingOperationOptions`2</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingOperationOptions`2.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingOperationOptions`2.#ctor(AutoMapper.MappingOperationOptions{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingOperationOptions`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingOperationOptions`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingOperationOptions`2.Bind(AutoMapper.IMappingOperationOptions)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMappingOperationOptions`2.Bind(AutoMapper.IMappingOperationOptions{`0,`1})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions`2.AfterMapActionOfT0T1">
            <summary>Задает оболочка совместимости MappingOperationOptions`2.AfterMap(Action`2&lt;!0,!1&gt; afterFunction)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions`2.BeforeMapActionOfT0T1">
            <summary>Задает оболочка совместимости MappingOperationOptions`2.BeforeMap(Action`2&lt;!0,!1&gt; beforeFunction)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions`2.Constructor">
            <summary>Задает оболочка совместимости MappingOperationOptions`2.MappingOperationOptions`2()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMappingOperationOptions`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions`2.AllInstances.AfterMapActionOfT0T1">
            <summary>Задает оболочка совместимости MappingOperationOptions`2.AfterMap(Action`2&lt;!0,!1&gt; afterFunction)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMappingOperationOptions`2.AllInstances.BeforeMapActionOfT0T1">
            <summary>Задает оболочка совместимости MappingOperationOptions`2.BeforeMap(Action`2&lt;!0,!1&gt; beforeFunction)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMemberConfiguration">
            <summary>Тип оболочки совместимости для AutoMapper.MemberConfiguration</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMemberConfiguration.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMemberConfiguration.#ctor(AutoMapper.MemberConfiguration)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMemberConfiguration.AddMemberOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},AutoMapper.IMemberConfiguration})">
            <summary>Задает оболочка совместимости MemberConfiguration.AddMember(Action`1&lt;!!0&gt; setupAction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMemberConfiguration.AddNameOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},AutoMapper.IMemberConfiguration})">
            <summary>Задает оболочка совместимости MemberConfiguration.AddName(Action`1&lt;!!0&gt; setupAction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMemberConfiguration.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMemberConfiguration.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMemberConfiguration.Bind(AutoMapper.IMemberConfiguration)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMemberConfiguration.GetOrAddOf1FuncOfIMemberConfigurationIListActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{AutoMapper.IMemberConfiguration,System.Collections.IList},System.Action{``0},``0})">
            <summary>Задает оболочка совместимости MemberConfiguration.GetOrAdd(Func`2&lt;IMemberConfiguration,IList&gt; getList, Action`1&lt;!!0&gt; setupAction)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMemberConfiguration.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMemberConfiguration.Constructor">
            <summary>Задает оболочка совместимости MemberConfiguration.MemberConfiguration()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMemberConfiguration.MapDestinationPropertyToSourceIProfileConfigurationTypeDetailsTypeStringLinkedListOfIValueResolver">
            <summary>Задает оболочка совместимости MemberConfiguration.MapDestinationPropertyToSource(IProfileConfiguration options, TypeDetails sourceType, Type destType, String nameToSearch, LinkedList`1&lt;IValueResolver&gt; resolvers)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMemberConfiguration.MemberMappersGet">
            <summary>Задает оболочка совместимости MemberConfiguration.get_MemberMappers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMemberConfiguration.NameMapperGet">
            <summary>Задает оболочка совместимости MemberConfiguration.get_NameMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMemberConfiguration.NameMapperSetIParentSourceToDestinationNameMapper">
            <summary>Задает оболочка совместимости MemberConfiguration.set_NameMapper(IParentSourceToDestinationNameMapper value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimMemberConfiguration.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMemberConfiguration.AllInstances.AddMemberOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MemberConfiguration,System.Action{``0},AutoMapper.IMemberConfiguration})">
            <summary>Задает оболочка совместимости MemberConfiguration.AddMember(Action`1&lt;!!0&gt; setupAction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMemberConfiguration.AllInstances.AddNameOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MemberConfiguration,System.Action{``0},AutoMapper.IMemberConfiguration})">
            <summary>Задает оболочка совместимости MemberConfiguration.AddName(Action`1&lt;!!0&gt; setupAction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimMemberConfiguration.AllInstances.GetOrAddOf1FuncOfIMemberConfigurationIListActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MemberConfiguration,System.Func{AutoMapper.IMemberConfiguration,System.Collections.IList},System.Action{``0},``0})">
            <summary>Задает оболочка совместимости MemberConfiguration.GetOrAdd(Func`2&lt;IMemberConfiguration,IList&gt; getList, Action`1&lt;!!0&gt; setupAction)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMemberConfiguration.AllInstances.MapDestinationPropertyToSourceIProfileConfigurationTypeDetailsTypeStringLinkedListOfIValueResolver">
            <summary>Задает оболочка совместимости MemberConfiguration.MapDestinationPropertyToSource(IProfileConfiguration options, TypeDetails sourceType, Type destType, String nameToSearch, LinkedList`1&lt;IValueResolver&gt; resolvers)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMemberConfiguration.AllInstances.MemberMappersGet">
            <summary>Задает оболочка совместимости MemberConfiguration.get_MemberMappers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMemberConfiguration.AllInstances.NameMapperGet">
            <summary>Задает оболочка совместимости MemberConfiguration.get_NameMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimMemberConfiguration.AllInstances.NameMapperSetIParentSourceToDestinationNameMapper">
            <summary>Задает оболочка совместимости MemberConfiguration.set_NameMapper(IParentSourceToDestinationNameMapper value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimNameSplitMember">
            <summary>Тип оболочки совместимости для AutoMapper.NameSplitMember</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimNameSplitMember.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimNameSplitMember.#ctor(AutoMapper.NameSplitMember)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimNameSplitMember.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimNameSplitMember.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimNameSplitMember.Bind(AutoMapper.IChildMemberConfiguration)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.Constructor">
            <summary>Задает оболочка совместимости NameSplitMember.NameSplitMember()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.DestinationMemberNamingConventionGet">
            <summary>Задает оболочка совместимости NameSplitMember.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.DestinationMemberNamingConventionSetINamingConvention">
            <summary>Задает оболочка совместимости NameSplitMember.set_DestinationMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.MapDestinationPropertyToSourceIProfileConfigurationTypeDetailsTypeStringLinkedListOfIValueResolverIMemberConfiguration">
            <summary>Задает оболочка совместимости NameSplitMember.MapDestinationPropertyToSource(IProfileConfiguration options, TypeDetails sourceType, Type destType, String nameToSearch, LinkedList`1&lt;IValueResolver&gt; resolvers, IMemberConfiguration parent)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.SourceMemberNamingConventionGet">
            <summary>Задает оболочка совместимости NameSplitMember.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.SourceMemberNamingConventionSetINamingConvention">
            <summary>Задает оболочка совместимости NameSplitMember.set_SourceMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember._CreateNameSnippetb__10_0String">
            <summary>Задает оболочка совместимости NameSplitMember.&lt;CreateNameSnippet&gt;b__10_0(String s)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember._CreateNameSnippetb__10_1String">
            <summary>Задает оболочка совместимости NameSplitMember.&lt;CreateNameSnippet&gt;b__10_1(String s)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember._MapDestinationPropertyToSourceb__9_0Match">
            <summary>Задает оболочка совместимости NameSplitMember.&lt;MapDestinationPropertyToSource&gt;b__9_0(Match m)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimNameSplitMember.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.AllInstances.DestinationMemberNamingConventionGet">
            <summary>Задает оболочка совместимости NameSplitMember.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.AllInstances.DestinationMemberNamingConventionSetINamingConvention">
            <summary>Задает оболочка совместимости NameSplitMember.set_DestinationMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.AllInstances.MapDestinationPropertyToSourceIProfileConfigurationTypeDetailsTypeStringLinkedListOfIValueResolverIMemberConfiguration">
            <summary>Задает оболочка совместимости NameSplitMember.MapDestinationPropertyToSource(IProfileConfiguration options, TypeDetails sourceType, Type destType, String nameToSearch, LinkedList`1&lt;IValueResolver&gt; resolvers, IMemberConfiguration parent)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.AllInstances.SourceMemberNamingConventionGet">
            <summary>Задает оболочка совместимости NameSplitMember.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.AllInstances.SourceMemberNamingConventionSetINamingConvention">
            <summary>Задает оболочка совместимости NameSplitMember.set_SourceMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.AllInstances._CreateNameSnippetb__10_0String">
            <summary>Задает оболочка совместимости NameSplitMember.&lt;CreateNameSnippet&gt;b__10_0(String s)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.AllInstances._CreateNameSnippetb__10_1String">
            <summary>Задает оболочка совместимости NameSplitMember.&lt;CreateNameSnippet&gt;b__10_1(String s)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNameSplitMember.AllInstances._MapDestinationPropertyToSourceb__9_0Match">
            <summary>Задает оболочка совместимости NameSplitMember.&lt;MapDestinationPropertyToSource&gt;b__9_0(Match m)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver">
            <summary>Тип оболочки совместимости для AutoMapper.NullReferenceExceptionSwallowingResolver</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.#ctor(AutoMapper.NullReferenceExceptionSwallowingResolver)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.Bind(AutoMapper.IMemberResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.ConstructorIMemberResolver">
            <summary>Задает оболочка совместимости NullReferenceExceptionSwallowingResolver.NullReferenceExceptionSwallowingResolver(IMemberResolver inner)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.MemberTypeGet">
            <summary>Задает оболочка совместимости NullReferenceExceptionSwallowingResolver.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.ResolveResolutionResult">
            <summary>Задает оболочка совместимости NullReferenceExceptionSwallowingResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.AllInstances.MemberTypeGet">
            <summary>Задает оболочка совместимости NullReferenceExceptionSwallowingResolver.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimNullReferenceExceptionSwallowingResolver.AllInstances.ResolveResolutionResult">
            <summary>Задает оболочка совместимости NullReferenceExceptionSwallowingResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper">
            <summary>Тип оболочки совместимости для AutoMapper.ParentSourceToDestinationNameMapper</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.#ctor(AutoMapper.ParentSourceToDestinationNameMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.Bind(AutoMapper.IParentSourceToDestinationNameMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.Constructor">
            <summary>Задает оболочка совместимости ParentSourceToDestinationNameMapper.ParentSourceToDestinationNameMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.GetMatchingMemberInfoTypeDetailsTypeString">
            <summary>Задает оболочка совместимости ParentSourceToDestinationNameMapper.GetMatchingMemberInfo(TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.GetMembersGet">
            <summary>Задает оболочка совместимости ParentSourceToDestinationNameMapper.get_GetMembers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.NamedMappersGet">
            <summary>Задает оболочка совместимости ParentSourceToDestinationNameMapper.get_NamedMappers()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.AllInstances.GetMatchingMemberInfoTypeDetailsTypeString">
            <summary>Задает оболочка совместимости ParentSourceToDestinationNameMapper.GetMatchingMemberInfo(TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.AllInstances.GetMembersGet">
            <summary>Задает оболочка совместимости ParentSourceToDestinationNameMapper.get_GetMembers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimParentSourceToDestinationNameMapper.AllInstances.NamedMappersGet">
            <summary>Задает оболочка совместимости ParentSourceToDestinationNameMapper.get_NamedMappers()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimPascalCaseNamingConvention">
            <summary>Тип оболочки совместимости для AutoMapper.PascalCaseNamingConvention</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPascalCaseNamingConvention.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPascalCaseNamingConvention.#ctor(AutoMapper.PascalCaseNamingConvention)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPascalCaseNamingConvention.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPascalCaseNamingConvention.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPascalCaseNamingConvention.Bind(AutoMapper.INamingConvention)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPascalCaseNamingConvention.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPascalCaseNamingConvention.Constructor">
            <summary>Задает оболочка совместимости PascalCaseNamingConvention.PascalCaseNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPascalCaseNamingConvention.ReplaceValueMatch">
            <summary>Задает оболочка совместимости PascalCaseNamingConvention.ReplaceValue(Match match)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPascalCaseNamingConvention.SeparatorCharacterGet">
            <summary>Задает оболочка совместимости PascalCaseNamingConvention.get_SeparatorCharacter()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPascalCaseNamingConvention.SplittingExpressionGet">
            <summary>Задает оболочка совместимости PascalCaseNamingConvention.get_SplittingExpression()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimPascalCaseNamingConvention.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPascalCaseNamingConvention.AllInstances.ReplaceValueMatch">
            <summary>Задает оболочка совместимости PascalCaseNamingConvention.ReplaceValue(Match match)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPascalCaseNamingConvention.AllInstances.SeparatorCharacterGet">
            <summary>Задает оболочка совместимости PascalCaseNamingConvention.get_SeparatorCharacter()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPascalCaseNamingConvention.AllInstances.SplittingExpressionGet">
            <summary>Задает оболочка совместимости PascalCaseNamingConvention.get_SplittingExpression()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimPrePostfixName">
            <summary>Тип оболочки совместимости для AutoMapper.PrePostfixName</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPrePostfixName.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPrePostfixName.#ctor(AutoMapper.PrePostfixName)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPrePostfixName.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPrePostfixName.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPrePostfixName.Bind(AutoMapper.ISourceToDestinationNameMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.AddStringsFuncOfPrePostfixNameICollectionOfStringStringArray">
            <summary>Задает оболочка совместимости PrePostfixName.AddStrings(Func`2&lt;PrePostfixName,ICollection`1&lt;String&gt;&gt; getStringsFunc, String[] names)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.Constructor">
            <summary>Задает оболочка совместимости PrePostfixName.PrePostfixName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.DestinationPostfixesGet">
            <summary>Задает оболочка совместимости PrePostfixName.get_DestinationPostfixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.DestinationPrefixesGet">
            <summary>Задает оболочка совместимости PrePostfixName.get_DestinationPrefixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.GetMatchingMemberInfoIGetTypeInfoMembersTypeDetailsTypeString">
            <summary>Задает оболочка совместимости PrePostfixName.GetMatchingMemberInfo(IGetTypeInfoMembers getTypeInfoMembers, TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.PossibleNamesStringIEnumerableOfStringIEnumerableOfString">
            <summary>Задает оболочка совместимости PrePostfixName.PossibleNames(String memberName, IEnumerable`1&lt;String&gt; prefixes, IEnumerable`1&lt;String&gt; postfixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.PostFixesIEnumerableOfStringString">
            <summary>Задает оболочка совместимости PrePostfixName.PostFixes(IEnumerable`1&lt;String&gt; postfixes, String name)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.PostfixesGet">
            <summary>Задает оболочка совместимости PrePostfixName.get_Postfixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.PrefixesGet">
            <summary>Задает оболочка совместимости PrePostfixName.get_Prefixes()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimPrePostfixName.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.AllInstances.AddStringsFuncOfPrePostfixNameICollectionOfStringStringArray">
            <summary>Задает оболочка совместимости PrePostfixName.AddStrings(Func`2&lt;PrePostfixName,ICollection`1&lt;String&gt;&gt; getStringsFunc, String[] names)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.AllInstances.DestinationPostfixesGet">
            <summary>Задает оболочка совместимости PrePostfixName.get_DestinationPostfixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.AllInstances.DestinationPrefixesGet">
            <summary>Задает оболочка совместимости PrePostfixName.get_DestinationPrefixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.AllInstances.GetMatchingMemberInfoIGetTypeInfoMembersTypeDetailsTypeString">
            <summary>Задает оболочка совместимости PrePostfixName.GetMatchingMemberInfo(IGetTypeInfoMembers getTypeInfoMembers, TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.AllInstances.PossibleNamesStringIEnumerableOfStringIEnumerableOfString">
            <summary>Задает оболочка совместимости PrePostfixName.PossibleNames(String memberName, IEnumerable`1&lt;String&gt; prefixes, IEnumerable`1&lt;String&gt; postfixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.AllInstances.PostFixesIEnumerableOfStringString">
            <summary>Задает оболочка совместимости PrePostfixName.PostFixes(IEnumerable`1&lt;String&gt; postfixes, String name)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.AllInstances.PostfixesGet">
            <summary>Задает оболочка совместимости PrePostfixName.get_Postfixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPrePostfixName.AllInstances.PrefixesGet">
            <summary>Задает оболочка совместимости PrePostfixName.get_Prefixes()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimProfile">
            <summary>Тип оболочки совместимости для AutoMapper.Profile</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimProfile.#ctor(AutoMapper.Profile)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimProfile.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimProfile.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimProfile.Bind(AutoMapper.IProfileConfiguration)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimProfile.Bind(AutoMapper.IProfileExpression)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimProfile.CreateMapOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости Profile.CreateMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimProfile.CreateMapOf2MemberList``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MemberList,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости Profile.CreateMap(MemberList memberList)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AddConditionalObjectMapper">
            <summary>Задает оболочка совместимости Profile.AddConditionalObjectMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AddGlobalIgnoreString">
            <summary>Задает оболочка совместимости Profile.AddGlobalIgnore(String propertyNameStartingWith)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AddMemberConfiguration">
            <summary>Задает оболочка совместимости Profile.AddMemberConfiguration()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllowNullCollectionsGet">
            <summary>Задает оболочка совместимости Profile.get_AllowNullCollections()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllowNullCollectionsSetBoolean">
            <summary>Задает оболочка совместимости Profile.set_AllowNullCollections(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllowNullDestinationValuesGet">
            <summary>Задает оболочка совместимости Profile.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllowNullDestinationValuesSetBoolean">
            <summary>Задает оболочка совместимости Profile.set_AllowNullDestinationValues(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.ClearPrefixes">
            <summary>Задает оболочка совместимости Profile.ClearPrefixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.Constructor">
            <summary>Задает оболочка совместимости Profile.Profile()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.ConstructorMappingEnabledGet">
            <summary>Задает оболочка совместимости Profile.get_ConstructorMappingEnabled()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.ConstructorMappingEnabledSetBoolean">
            <summary>Задает оболочка совместимости Profile.set_ConstructorMappingEnabled(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.ConstructorString">
            <summary>Задает оболочка совместимости Profile.Profile(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.CreateMapTypeType">
            <summary>Задает оболочка совместимости Profile.CreateMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.CreateMapTypeTypeMemberList">
            <summary>Задает оболочка совместимости Profile.CreateMap(Type sourceType, Type destinationType, MemberList memberList)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.CreateMissingTypeMapsGet">
            <summary>Задает оболочка совместимости Profile.get_CreateMissingTypeMaps()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.CreateMissingTypeMapsSetBoolean">
            <summary>Задает оболочка совместимости Profile.set_CreateMissingTypeMaps(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.DefaultMemberConfigGet">
            <summary>Задает оболочка совместимости Profile.get_DefaultMemberConfig()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.DestinationMemberNamingConventionGet">
            <summary>Задает оболочка совместимости Profile.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.DestinationMemberNamingConventionSetINamingConvention">
            <summary>Задает оболочка совместимости Profile.set_DestinationMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.DisableConstructorMapping">
            <summary>Задает оболочка совместимости Profile.DisableConstructorMapping()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.ForAllMapsActionOfTypeMapIMappingExpression">
            <summary>Задает оболочка совместимости Profile.ForAllMaps(Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.GlobalIgnoresGet">
            <summary>Задает оболочка совместимости Profile.get_GlobalIgnores()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.IncludeSourceExtensionMethodsAssembly">
            <summary>Задает оболочка совместимости Profile.IncludeSourceExtensionMethods(Assembly assembly)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.InitializeIConfiguration">
            <summary>Задает оболочка совместимости Profile.Initialize(IConfiguration configurator)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.MemberConfigurationsGet">
            <summary>Задает оболочка совместимости Profile.get_MemberConfigurations()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.ProfileNameGet">
            <summary>Задает оболочка совместимости Profile.get_ProfileName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.RecognizeAliasStringString">
            <summary>Задает оболочка совместимости Profile.RecognizeAlias(String original, String alias)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.RecognizeDestinationPostfixesStringArray">
            <summary>Задает оболочка совместимости Profile.RecognizeDestinationPostfixes(String[] postfixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.RecognizeDestinationPrefixesStringArray">
            <summary>Задает оболочка совместимости Profile.RecognizeDestinationPrefixes(String[] prefixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.RecognizePostfixesStringArray">
            <summary>Задает оболочка совместимости Profile.RecognizePostfixes(String[] postfixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.RecognizePrefixesStringArray">
            <summary>Задает оболочка совместимости Profile.RecognizePrefixes(String[] prefixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.ReplaceMemberNameStringString">
            <summary>Задает оболочка совместимости Profile.ReplaceMemberName(String original, String newValue)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.ShouldMapFieldGet">
            <summary>Задает оболочка совместимости Profile.get_ShouldMapField()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.ShouldMapFieldSetFuncOfFieldInfoBoolean">
            <summary>Задает оболочка совместимости Profile.set_ShouldMapField(Func`2&lt;FieldInfo,Boolean&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.ShouldMapPropertyGet">
            <summary>Задает оболочка совместимости Profile.get_ShouldMapProperty()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.ShouldMapPropertySetFuncOfPropertyInfoBoolean">
            <summary>Задает оболочка совместимости Profile.set_ShouldMapProperty(Func`2&lt;PropertyInfo,Boolean&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.SourceExtensionMethodsGet">
            <summary>Задает оболочка совместимости Profile.get_SourceExtensionMethods()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.SourceMemberNamingConventionGet">
            <summary>Задает оболочка совместимости Profile.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.SourceMemberNamingConventionSetINamingConvention">
            <summary>Задает оболочка совместимости Profile.set_SourceMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.TypeConfigurationsGet">
            <summary>Задает оболочка совместимости Profile.get_TypeConfigurations()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimProfile.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimProfile.AllInstances.CreateMapOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Profile,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости Profile.CreateMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimProfile.AllInstances.CreateMapOf2MemberList``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Profile,AutoMapper.MemberList,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает оболочка совместимости Profile.CreateMap(MemberList memberList)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.AddConditionalObjectMapper">
            <summary>Задает оболочка совместимости Profile.AddConditionalObjectMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.AddGlobalIgnoreString">
            <summary>Задает оболочка совместимости Profile.AddGlobalIgnore(String propertyNameStartingWith)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.AddMemberConfiguration">
            <summary>Задает оболочка совместимости Profile.AddMemberConfiguration()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.AllowNullCollectionsGet">
            <summary>Задает оболочка совместимости Profile.get_AllowNullCollections()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.AllowNullCollectionsSetBoolean">
            <summary>Задает оболочка совместимости Profile.set_AllowNullCollections(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.AllowNullDestinationValuesGet">
            <summary>Задает оболочка совместимости Profile.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.AllowNullDestinationValuesSetBoolean">
            <summary>Задает оболочка совместимости Profile.set_AllowNullDestinationValues(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.ClearPrefixes">
            <summary>Задает оболочка совместимости Profile.ClearPrefixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.ConstructorMappingEnabledGet">
            <summary>Задает оболочка совместимости Profile.get_ConstructorMappingEnabled()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.ConstructorMappingEnabledSetBoolean">
            <summary>Задает оболочка совместимости Profile.set_ConstructorMappingEnabled(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.CreateMapTypeType">
            <summary>Задает оболочка совместимости Profile.CreateMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.CreateMapTypeTypeMemberList">
            <summary>Задает оболочка совместимости Profile.CreateMap(Type sourceType, Type destinationType, MemberList memberList)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.CreateMissingTypeMapsGet">
            <summary>Задает оболочка совместимости Profile.get_CreateMissingTypeMaps()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.CreateMissingTypeMapsSetBoolean">
            <summary>Задает оболочка совместимости Profile.set_CreateMissingTypeMaps(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.DefaultMemberConfigGet">
            <summary>Задает оболочка совместимости Profile.get_DefaultMemberConfig()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.DestinationMemberNamingConventionGet">
            <summary>Задает оболочка совместимости Profile.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.DestinationMemberNamingConventionSetINamingConvention">
            <summary>Задает оболочка совместимости Profile.set_DestinationMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.DisableConstructorMapping">
            <summary>Задает оболочка совместимости Profile.DisableConstructorMapping()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.ForAllMapsActionOfTypeMapIMappingExpression">
            <summary>Задает оболочка совместимости Profile.ForAllMaps(Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.GlobalIgnoresGet">
            <summary>Задает оболочка совместимости Profile.get_GlobalIgnores()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.IncludeSourceExtensionMethodsAssembly">
            <summary>Задает оболочка совместимости Profile.IncludeSourceExtensionMethods(Assembly assembly)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.InitializeIConfiguration">
            <summary>Задает оболочка совместимости Profile.Initialize(IConfiguration configurator)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.MemberConfigurationsGet">
            <summary>Задает оболочка совместимости Profile.get_MemberConfigurations()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.ProfileNameGet">
            <summary>Задает оболочка совместимости Profile.get_ProfileName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.RecognizeAliasStringString">
            <summary>Задает оболочка совместимости Profile.RecognizeAlias(String original, String alias)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.RecognizeDestinationPostfixesStringArray">
            <summary>Задает оболочка совместимости Profile.RecognizeDestinationPostfixes(String[] postfixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.RecognizeDestinationPrefixesStringArray">
            <summary>Задает оболочка совместимости Profile.RecognizeDestinationPrefixes(String[] prefixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.RecognizePostfixesStringArray">
            <summary>Задает оболочка совместимости Profile.RecognizePostfixes(String[] postfixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.RecognizePrefixesStringArray">
            <summary>Задает оболочка совместимости Profile.RecognizePrefixes(String[] prefixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.ReplaceMemberNameStringString">
            <summary>Задает оболочка совместимости Profile.ReplaceMemberName(String original, String newValue)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.ShouldMapFieldGet">
            <summary>Задает оболочка совместимости Profile.get_ShouldMapField()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.ShouldMapFieldSetFuncOfFieldInfoBoolean">
            <summary>Задает оболочка совместимости Profile.set_ShouldMapField(Func`2&lt;FieldInfo,Boolean&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.ShouldMapPropertyGet">
            <summary>Задает оболочка совместимости Profile.get_ShouldMapProperty()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.ShouldMapPropertySetFuncOfPropertyInfoBoolean">
            <summary>Задает оболочка совместимости Profile.set_ShouldMapProperty(Func`2&lt;PropertyInfo,Boolean&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.SourceExtensionMethodsGet">
            <summary>Задает оболочка совместимости Profile.get_SourceExtensionMethods()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.SourceMemberNamingConventionGet">
            <summary>Задает оболочка совместимости Profile.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.SourceMemberNamingConventionSetINamingConvention">
            <summary>Задает оболочка совместимости Profile.set_SourceMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimProfile.AllInstances.TypeConfigurationsGet">
            <summary>Задает оболочка совместимости Profile.get_TypeConfigurations()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimPropertyMap">
            <summary>Тип оболочки совместимости для AutoMapper.PropertyMap</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPropertyMap.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPropertyMap.#ctor(AutoMapper.PropertyMap)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPropertyMap.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPropertyMap.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPropertyMap.SetCustomValueResolverExpressionOf2ExpressionOfFuncOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Linq.Expressions.Expression{System.Func{``0,``1}}})">
            <summary>Задает оболочка совместимости PropertyMap.SetCustomValueResolverExpression(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; sourceMember)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ApplyConditionFuncOfResolutionContextBoolean">
            <summary>Задает оболочка совместимости PropertyMap.ApplyCondition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ApplyPreConditionFuncOfResolutionContextBoolean">
            <summary>Задает оболочка совместимости PropertyMap.ApplyPreCondition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AssignCustomExpressionLambdaExpression">
            <summary>Задает оболочка совместимости PropertyMap.AssignCustomExpression(LambdaExpression customExpression)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AssignCustomValueResolverIValueResolver">
            <summary>Задает оболочка совместимости PropertyMap.AssignCustomValueResolver(IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.CanBeSetGet">
            <summary>Задает оболочка совместимости PropertyMap.get_CanBeSet()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.CanResolveValue">
            <summary>Задает оболочка совместимости PropertyMap.CanResolveValue()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ChainConstructorForResolverIValueResolver">
            <summary>Задает оболочка совместимости PropertyMap.ChainConstructorForResolver(IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ChainResolverIValueResolver">
            <summary>Задает оболочка совместимости PropertyMap.ChainResolver(IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ChainTypeMemberForResolverIValueResolver">
            <summary>Задает оболочка совместимости PropertyMap.ChainTypeMemberForResolver(IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ConstructorIMemberAccessor">
            <summary>Задает оболочка совместимости PropertyMap.PropertyMap(IMemberAccessor destinationProperty)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ConstructorPropertyMap">
            <summary>Задает оболочка совместимости PropertyMap.PropertyMap(PropertyMap inheritedMappedProperty)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.CustomExpressionGet">
            <summary>Задает оболочка совместимости PropertyMap.get_CustomExpression()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.CustomExpressionSetLambdaExpression">
            <summary>Задает оболочка совместимости PropertyMap.set_CustomExpression(LambdaExpression value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.DestinationPropertyGet">
            <summary>Задает оболочка совместимости PropertyMap.get_DestinationProperty()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.DestinationPropertyTypeGet">
            <summary>Задает оболочка совместимости PropertyMap.get_DestinationPropertyType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.EqualsObject">
            <summary>Задает оболочка совместимости PropertyMap.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.EqualsPropertyMap">
            <summary>Задает оболочка совместимости PropertyMap.Equals(PropertyMap other)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ExplicitExpansionGet">
            <summary>Задает оболочка совместимости PropertyMap.get_ExplicitExpansion()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ExplicitExpansionSetBoolean">
            <summary>Задает оболочка совместимости PropertyMap.set_ExplicitExpansion(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.GetDestinationValueObject">
            <summary>Задает оболочка совместимости PropertyMap.GetDestinationValue(Object mappedObject)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.GetHashCode">
            <summary>Задает оболочка совместимости PropertyMap.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.GetMappingOrder">
            <summary>Задает оболочка совместимости PropertyMap.GetMappingOrder()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.GetSourceValueResolvers">
            <summary>Задает оболочка совместимости PropertyMap.GetSourceValueResolvers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.HasCustomValueResolverGet">
            <summary>Задает оболочка совместимости PropertyMap.get_HasCustomValueResolver()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.HasCustomValueResolverSetBoolean">
            <summary>Задает оболочка совместимости PropertyMap.set_HasCustomValueResolver(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.Ignore">
            <summary>Задает оболочка совместимости PropertyMap.Ignore()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.IsIgnored">
            <summary>Задает оболочка совместимости PropertyMap.IsIgnored()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.IsMapped">
            <summary>Задает оболочка совместимости PropertyMap.IsMapped()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.NullSubstituteGet">
            <summary>Задает оболочка совместимости PropertyMap.get_NullSubstitute()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.NullSubstituteSetObject">
            <summary>Задает оболочка совместимости PropertyMap.set_NullSubstitute(Object value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.RemoveLastResolver">
            <summary>Задает оболочка совместимости PropertyMap.RemoveLastResolver()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ResetSourceMemberChain">
            <summary>Задает оболочка совместимости PropertyMap.ResetSourceMemberChain()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ResolveValueResolutionContext">
            <summary>Задает оболочка совместимости PropertyMap.ResolveValue(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.Seal">
            <summary>Задает оболочка совместимости PropertyMap.Seal()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.SetMappingOrderInt32">
            <summary>Задает оболочка совместимости PropertyMap.SetMappingOrder(Int32 mappingOrder)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.SetNullSubstituteObject">
            <summary>Задает оболочка совместимости PropertyMap.SetNullSubstitute(Object nullSubstitute)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ShouldAssignValuePreResolvingResolutionContext">
            <summary>Задает оболочка совместимости PropertyMap.ShouldAssignValuePreResolving(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.ShouldAssignValueResolutionContext">
            <summary>Задает оболочка совместимости PropertyMap.ShouldAssignValue(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.SourceMemberGet">
            <summary>Задает оболочка совместимости PropertyMap.get_SourceMember()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.SourceMemberSetMemberInfo">
            <summary>Задает оболочка совместимости PropertyMap.set_SourceMember(MemberInfo value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.UseDestinationValueGet">
            <summary>Задает оболочка совместимости PropertyMap.get_UseDestinationValue()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.UseDestinationValueSetBoolean">
            <summary>Задает оболочка совместимости PropertyMap.set_UseDestinationValue(Boolean value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimPropertyMap.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimPropertyMap.AllInstances.SetCustomValueResolverExpressionOf2ExpressionOfFuncOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.PropertyMap,System.Linq.Expressions.Expression{System.Func{``0,``1}}})">
            <summary>Задает оболочка совместимости PropertyMap.SetCustomValueResolverExpression(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; sourceMember)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.ApplyConditionFuncOfResolutionContextBoolean">
            <summary>Задает оболочка совместимости PropertyMap.ApplyCondition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.ApplyPreConditionFuncOfResolutionContextBoolean">
            <summary>Задает оболочка совместимости PropertyMap.ApplyPreCondition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.AssignCustomExpressionLambdaExpression">
            <summary>Задает оболочка совместимости PropertyMap.AssignCustomExpression(LambdaExpression customExpression)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.AssignCustomValueResolverIValueResolver">
            <summary>Задает оболочка совместимости PropertyMap.AssignCustomValueResolver(IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.CanBeSetGet">
            <summary>Задает оболочка совместимости PropertyMap.get_CanBeSet()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.CanResolveValue">
            <summary>Задает оболочка совместимости PropertyMap.CanResolveValue()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.ChainConstructorForResolverIValueResolver">
            <summary>Задает оболочка совместимости PropertyMap.ChainConstructorForResolver(IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.ChainResolverIValueResolver">
            <summary>Задает оболочка совместимости PropertyMap.ChainResolver(IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.ChainTypeMemberForResolverIValueResolver">
            <summary>Задает оболочка совместимости PropertyMap.ChainTypeMemberForResolver(IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.CustomExpressionGet">
            <summary>Задает оболочка совместимости PropertyMap.get_CustomExpression()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.CustomExpressionSetLambdaExpression">
            <summary>Задает оболочка совместимости PropertyMap.set_CustomExpression(LambdaExpression value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.DestinationPropertyGet">
            <summary>Задает оболочка совместимости PropertyMap.get_DestinationProperty()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.DestinationPropertyTypeGet">
            <summary>Задает оболочка совместимости PropertyMap.get_DestinationPropertyType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости PropertyMap.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.EqualsPropertyMap">
            <summary>Задает оболочка совместимости PropertyMap.Equals(PropertyMap other)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.ExplicitExpansionGet">
            <summary>Задает оболочка совместимости PropertyMap.get_ExplicitExpansion()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.ExplicitExpansionSetBoolean">
            <summary>Задает оболочка совместимости PropertyMap.set_ExplicitExpansion(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.GetDestinationValueObject">
            <summary>Задает оболочка совместимости PropertyMap.GetDestinationValue(Object mappedObject)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости PropertyMap.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.GetMappingOrder">
            <summary>Задает оболочка совместимости PropertyMap.GetMappingOrder()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.GetSourceValueResolvers">
            <summary>Задает оболочка совместимости PropertyMap.GetSourceValueResolvers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.HasCustomValueResolverGet">
            <summary>Задает оболочка совместимости PropertyMap.get_HasCustomValueResolver()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.HasCustomValueResolverSetBoolean">
            <summary>Задает оболочка совместимости PropertyMap.set_HasCustomValueResolver(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.Ignore">
            <summary>Задает оболочка совместимости PropertyMap.Ignore()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.IsIgnored">
            <summary>Задает оболочка совместимости PropertyMap.IsIgnored()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.IsMapped">
            <summary>Задает оболочка совместимости PropertyMap.IsMapped()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.NullSubstituteGet">
            <summary>Задает оболочка совместимости PropertyMap.get_NullSubstitute()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.NullSubstituteSetObject">
            <summary>Задает оболочка совместимости PropertyMap.set_NullSubstitute(Object value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.RemoveLastResolver">
            <summary>Задает оболочка совместимости PropertyMap.RemoveLastResolver()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.ResetSourceMemberChain">
            <summary>Задает оболочка совместимости PropertyMap.ResetSourceMemberChain()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.ResolveValueResolutionContext">
            <summary>Задает оболочка совместимости PropertyMap.ResolveValue(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.Seal">
            <summary>Задает оболочка совместимости PropertyMap.Seal()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.SetMappingOrderInt32">
            <summary>Задает оболочка совместимости PropertyMap.SetMappingOrder(Int32 mappingOrder)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.SetNullSubstituteObject">
            <summary>Задает оболочка совместимости PropertyMap.SetNullSubstitute(Object nullSubstitute)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.ShouldAssignValuePreResolvingResolutionContext">
            <summary>Задает оболочка совместимости PropertyMap.ShouldAssignValuePreResolving(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.ShouldAssignValueResolutionContext">
            <summary>Задает оболочка совместимости PropertyMap.ShouldAssignValue(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.SourceMemberGet">
            <summary>Задает оболочка совместимости PropertyMap.get_SourceMember()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.SourceMemberSetMemberInfo">
            <summary>Задает оболочка совместимости PropertyMap.set_SourceMember(MemberInfo value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.UseDestinationValueGet">
            <summary>Задает оболочка совместимости PropertyMap.get_UseDestinationValue()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimPropertyMap.AllInstances.UseDestinationValueSetBoolean">
            <summary>Задает оболочка совместимости PropertyMap.set_UseDestinationValue(Boolean value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimReplaceName">
            <summary>Тип оболочки совместимости для AutoMapper.ReplaceName</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimReplaceName.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimReplaceName.#ctor(AutoMapper.ReplaceName)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimReplaceName.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimReplaceName.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimReplaceName.Bind(AutoMapper.ISourceToDestinationNameMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimReplaceName.AddReplaceStringString">
            <summary>Задает оболочка совместимости ReplaceName.AddReplace(String original, String newValue)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimReplaceName.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimReplaceName.Constructor">
            <summary>Задает оболочка совместимости ReplaceName.ReplaceName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimReplaceName.GetMatchingMemberInfoIGetTypeInfoMembersTypeDetailsTypeString">
            <summary>Задает оболочка совместимости ReplaceName.GetMatchingMemberInfo(IGetTypeInfoMembers getTypeInfoMembers, TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimReplaceName.MemberNameReplacersGet">
            <summary>Задает оболочка совместимости ReplaceName.get_MemberNameReplacers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimReplaceName.PossibleNamesString">
            <summary>Задает оболочка совместимости ReplaceName.PossibleNames(String nameToSearch)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimReplaceName.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimReplaceName.AllInstances.AddReplaceStringString">
            <summary>Задает оболочка совместимости ReplaceName.AddReplace(String original, String newValue)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimReplaceName.AllInstances.GetMatchingMemberInfoIGetTypeInfoMembersTypeDetailsTypeString">
            <summary>Задает оболочка совместимости ReplaceName.GetMatchingMemberInfo(IGetTypeInfoMembers getTypeInfoMembers, TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimReplaceName.AllInstances.MemberNameReplacersGet">
            <summary>Задает оболочка совместимости ReplaceName.get_MemberNameReplacers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimReplaceName.AllInstances.PossibleNamesString">
            <summary>Задает оболочка совместимости ReplaceName.PossibleNames(String nameToSearch)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimResolutionContext">
            <summary>Тип оболочки совместимости для AutoMapper.ResolutionContext</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimResolutionContext.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimResolutionContext.#ctor(AutoMapper.ResolutionContext)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimResolutionContext.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimResolutionContext.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimResolutionContext.Bind(System.IEquatable{AutoMapper.ResolutionContext})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimResolutionContext.NewOf1M0IMappingEngine``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,AutoMapper.IMappingEngine,AutoMapper.ResolutionContext})">
            <summary>Задает оболочка совместимости ResolutionContext.New(!!0 sourceValue, IMappingEngine mappingEngine)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AfterMapObject">
            <summary>Задает оболочка совместимости ResolutionContext.AfterMap(Object destination)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.ArrayIndexGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_ArrayIndex()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.BeforeMapObject">
            <summary>Задает оболочка совместимости ResolutionContext.BeforeMap(Object destination)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.ConfigurationProviderGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_ConfigurationProvider()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.Constructor">
            <summary>Задает оболочка совместимости ResolutionContext.ResolutionContext()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.ConstructorResolutionContextObjectObjectTypeMapPropertyMap">
            <summary>Задает оболочка совместимости ResolutionContext.ResolutionContext(ResolutionContext context, Object sourceValue, Object destinationValue, TypeMap memberTypeMap, PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.ConstructorResolutionContextObjectObjectTypePropertyMap">
            <summary>Задает оболочка совместимости ResolutionContext.ResolutionContext(ResolutionContext context, Object sourceValue, Object destinationValue, Type sourceType, PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.ConstructorResolutionContextObjectObjectTypeTypeTypeMap">
            <summary>Задает оболочка совместимости ResolutionContext.ResolutionContext(ResolutionContext context, Object sourceValue, Object destinationValue, Type sourceType, Type destinationType, TypeMap typeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.ConstructorResolutionContextObjectType">
            <summary>Задает оболочка совместимости ResolutionContext.ResolutionContext(ResolutionContext context, Object sourceValue, Type sourceType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.ConstructorResolutionContextObjectTypeMapTypeTypeInt32">
            <summary>Задает оболочка совместимости ResolutionContext.ResolutionContext(ResolutionContext context, Object sourceValue, TypeMap typeMap, Type sourceType, Type destinationType, Int32 arrayIndex)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.ConstructorResolutionContextTypeMapObjectObjectTypeType">
            <summary>Задает оболочка совместимости ResolutionContext.ResolutionContext(ResolutionContext context, TypeMap memberTypeMap, Object sourceValue, Object destinationValue, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.ConstructorTypeMapObjectObjectTypeTypeMappingOperationOptionsIMappingEngine">
            <summary>Задает оболочка совместимости ResolutionContext.ResolutionContext(TypeMap typeMap, Object source, Object destination, Type sourceType, Type destinationType, MappingOperationOptions options, IMappingEngine engine)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.ConstructorTypeMapObjectTypeTypeMappingOperationOptionsIMappingEngine">
            <summary>Задает оболочка совместимости ResolutionContext.ResolutionContext(TypeMap typeMap, Object source, Type sourceType, Type destinationType, MappingOperationOptions options, IMappingEngine engine)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.CreateElementContextTypeMapObjectTypeTypeInt32">
            <summary>Задает оболочка совместимости ResolutionContext.CreateElementContext(TypeMap elementTypeMap, Object item, Type sourceElementType, Type destinationElementType, Int32 arrayIndex)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.CreateMemberContextTypeMapObjectObjectTypePropertyMap">
            <summary>Задает оболочка совместимости ResolutionContext.CreateMemberContext(TypeMap memberTypeMap, Object memberValue, Object destinationValue, Type sourceMemberType, PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.CreatePropertyMapContextPropertyMap">
            <summary>Задает оболочка совместимости ResolutionContext.CreatePropertyMapContext(PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.CreateTypeContextTypeMapObjectObjectTypeType">
            <summary>Задает оболочка совместимости ResolutionContext.CreateTypeContext(TypeMap memberTypeMap, Object sourceValue, Object destinationValue, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.CreateValueContextObjectType">
            <summary>Задает оболочка совместимости ResolutionContext.CreateValueContext(Object sourceValue, Type sourceType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.DestinationTypeGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_DestinationType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.DestinationValueGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_DestinationValue()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.EngineGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_Engine()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.EqualsObject">
            <summary>Задает оболочка совместимости ResolutionContext.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.EqualsResolutionContext">
            <summary>Задает оболочка совместимости ResolutionContext.Equals(ResolutionContext other)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.GetContextPropertyMap">
            <summary>Задает оболочка совместимости ResolutionContext.GetContextPropertyMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.GetContextTypeMap">
            <summary>Задает оболочка совместимости ResolutionContext.GetContextTypeMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.GetContexts">
            <summary>Задает оболочка совместимости ResolutionContext.GetContexts()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.GetContextsCore">
            <summary>Задает оболочка совместимости ResolutionContext.GetContextsCore()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.GetHashCode">
            <summary>Задает оболочка совместимости ResolutionContext.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.InitialDestinationTypeGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_InitialDestinationType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.InitialSourceTypeGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_InitialSourceType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.InstanceCacheGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_InstanceCache()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.IsSourceValueNullGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_IsSourceValueNull()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.MemberNameGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_MemberName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.OptionsGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_Options()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.ParentGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_Parent()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.PropertyMapGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_PropertyMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.SourceTypeGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_SourceType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.SourceValueGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_SourceValue()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.StaticConstructor">
            <summary>Задает оболочка совместимости ResolutionContext.ResolutionContext()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.ToString">
            <summary>Задает оболочка совместимости ResolutionContext.ToString()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.TypeMapGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_TypeMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.TypesGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_Types()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimResolutionContext.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.AfterMapObject">
            <summary>Задает оболочка совместимости ResolutionContext.AfterMap(Object destination)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.ArrayIndexGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_ArrayIndex()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.BeforeMapObject">
            <summary>Задает оболочка совместимости ResolutionContext.BeforeMap(Object destination)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.ConfigurationProviderGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_ConfigurationProvider()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.CreateElementContextTypeMapObjectTypeTypeInt32">
            <summary>Задает оболочка совместимости ResolutionContext.CreateElementContext(TypeMap elementTypeMap, Object item, Type sourceElementType, Type destinationElementType, Int32 arrayIndex)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.CreateMemberContextTypeMapObjectObjectTypePropertyMap">
            <summary>Задает оболочка совместимости ResolutionContext.CreateMemberContext(TypeMap memberTypeMap, Object memberValue, Object destinationValue, Type sourceMemberType, PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.CreatePropertyMapContextPropertyMap">
            <summary>Задает оболочка совместимости ResolutionContext.CreatePropertyMapContext(PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.CreateTypeContextTypeMapObjectObjectTypeType">
            <summary>Задает оболочка совместимости ResolutionContext.CreateTypeContext(TypeMap memberTypeMap, Object sourceValue, Object destinationValue, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.CreateValueContextObjectType">
            <summary>Задает оболочка совместимости ResolutionContext.CreateValueContext(Object sourceValue, Type sourceType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.DestinationTypeGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_DestinationType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.DestinationValueGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_DestinationValue()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.EngineGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_Engine()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости ResolutionContext.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.EqualsResolutionContext">
            <summary>Задает оболочка совместимости ResolutionContext.Equals(ResolutionContext other)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.GetContextPropertyMap">
            <summary>Задает оболочка совместимости ResolutionContext.GetContextPropertyMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.GetContextTypeMap">
            <summary>Задает оболочка совместимости ResolutionContext.GetContextTypeMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.GetContexts">
            <summary>Задает оболочка совместимости ResolutionContext.GetContexts()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.GetContextsCore">
            <summary>Задает оболочка совместимости ResolutionContext.GetContextsCore()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости ResolutionContext.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.InitialDestinationTypeGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_InitialDestinationType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.InitialSourceTypeGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_InitialSourceType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.InstanceCacheGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_InstanceCache()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.IsSourceValueNullGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_IsSourceValueNull()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.MemberNameGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_MemberName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.OptionsGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_Options()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.ParentGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_Parent()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.PropertyMapGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_PropertyMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.SourceTypeGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_SourceType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.SourceValueGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_SourceValue()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.ToString01">
            <summary>Задает оболочка совместимости ResolutionContext.ToString()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.TypeMapGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_TypeMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionContext.AllInstances.TypesGet">
            <summary>Задает оболочка совместимости ResolutionContext.get_Types()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimResolutionResult">
            <summary>Тип оболочки совместимости для AutoMapper.ResolutionResult</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimResolutionResult.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimResolutionResult.#ctor(AutoMapper.ResolutionResult)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimResolutionResult.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimResolutionResult.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.ConstructorObjectResolutionContext">
            <summary>Задает оболочка совместимости ResolutionResult.ResolutionResult(Object value, ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.ConstructorObjectResolutionContextType">
            <summary>Задает оболочка совместимости ResolutionResult.ResolutionResult(Object value, ResolutionContext context, Type memberType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.ConstructorResolutionContext">
            <summary>Задает оболочка совместимости ResolutionResult.ResolutionResult(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.ContextGet">
            <summary>Задает оболочка совместимости ResolutionResult.get_Context()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.Ignore">
            <summary>Задает оболочка совместимости ResolutionResult.Ignore()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.MemberTypeGet">
            <summary>Задает оболочка совместимости ResolutionResult.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.NewObject">
            <summary>Задает оболочка совместимости ResolutionResult.New(Object value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.NewObjectType">
            <summary>Задает оболочка совместимости ResolutionResult.New(Object value, Type memberType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.ResolveTypeObjectType">
            <summary>Задает оболочка совместимости ResolutionResult.ResolveType(Object value, Type memberType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.ShouldIgnoreGet">
            <summary>Задает оболочка совместимости ResolutionResult.get_ShouldIgnore()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.ShouldIgnoreSetBoolean">
            <summary>Задает оболочка совместимости ResolutionResult.set_ShouldIgnore(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.TypeGet">
            <summary>Задает оболочка совместимости ResolutionResult.get_Type()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.ValueGet">
            <summary>Задает оболочка совместимости ResolutionResult.get_Value()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimResolutionResult.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.AllInstances.ContextGet">
            <summary>Задает оболочка совместимости ResolutionResult.get_Context()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.AllInstances.Ignore">
            <summary>Задает оболочка совместимости ResolutionResult.Ignore()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.AllInstances.MemberTypeGet">
            <summary>Задает оболочка совместимости ResolutionResult.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.AllInstances.NewObject">
            <summary>Задает оболочка совместимости ResolutionResult.New(Object value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.AllInstances.NewObjectType">
            <summary>Задает оболочка совместимости ResolutionResult.New(Object value, Type memberType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.AllInstances.ShouldIgnoreGet">
            <summary>Задает оболочка совместимости ResolutionResult.get_ShouldIgnore()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.AllInstances.ShouldIgnoreSetBoolean">
            <summary>Задает оболочка совместимости ResolutionResult.set_ShouldIgnore(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.AllInstances.TypeGet">
            <summary>Задает оболочка совместимости ResolutionResult.get_Type()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimResolutionResult.AllInstances.ValueGet">
            <summary>Задает оболочка совместимости ResolutionResult.get_Value()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimSourceMemberConfig">
            <summary>Тип оболочки совместимости для AutoMapper.SourceMemberConfig</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimSourceMemberConfig.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimSourceMemberConfig.#ctor(AutoMapper.SourceMemberConfig)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimSourceMemberConfig.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimSourceMemberConfig.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceMemberConfig.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceMemberConfig.ConstructorMemberInfo">
            <summary>Задает оболочка совместимости SourceMemberConfig.SourceMemberConfig(MemberInfo sourceMember)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceMemberConfig.Ignore">
            <summary>Задает оболочка совместимости SourceMemberConfig.Ignore()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceMemberConfig.IsIgnored">
            <summary>Задает оболочка совместимости SourceMemberConfig.IsIgnored()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceMemberConfig.SourceMemberGet">
            <summary>Задает оболочка совместимости SourceMemberConfig.get_SourceMember()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceMemberConfig.SourceMemberSetMemberInfo">
            <summary>Задает оболочка совместимости SourceMemberConfig.set_SourceMember(MemberInfo value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimSourceMemberConfig.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceMemberConfig.AllInstances.Ignore">
            <summary>Задает оболочка совместимости SourceMemberConfig.Ignore()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceMemberConfig.AllInstances.IsIgnored">
            <summary>Задает оболочка совместимости SourceMemberConfig.IsIgnored()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceMemberConfig.AllInstances.SourceMemberGet">
            <summary>Задает оболочка совместимости SourceMemberConfig.get_SourceMember()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceMemberConfig.AllInstances.SourceMemberSetMemberInfo">
            <summary>Задает оболочка совместимости SourceMemberConfig.set_SourceMember(MemberInfo value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimSourceToDestinationMapperAttribute">
            <summary>Тип оболочки совместимости для AutoMapper.SourceToDestinationMapperAttribute</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimSourceToDestinationMapperAttribute.#ctor(AutoMapper.SourceToDestinationMapperAttribute)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimSourceToDestinationMapperAttribute.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimSourceToDestinationMapperAttribute.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceToDestinationMapperAttribute.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceToDestinationMapperAttribute.Constructor">
            <summary>Задает оболочка совместимости SourceToDestinationMapperAttribute.SourceToDestinationMapperAttribute()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimSourceToDestinationMapperAttribute.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimSourceToDestinationNameMapperAttributesMember">
            <summary>Тип оболочки совместимости для AutoMapper.SourceToDestinationNameMapperAttributesMember</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimSourceToDestinationNameMapperAttributesMember.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimSourceToDestinationNameMapperAttributesMember.#ctor(AutoMapper.SourceToDestinationNameMapperAttributesMember)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimSourceToDestinationNameMapperAttributesMember.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimSourceToDestinationNameMapperAttributesMember.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimSourceToDestinationNameMapperAttributesMember.Bind(AutoMapper.ISourceToDestinationNameMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceToDestinationNameMapperAttributesMember.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceToDestinationNameMapperAttributesMember.Constructor">
            <summary>Задает оболочка совместимости SourceToDestinationNameMapperAttributesMember.SourceToDestinationNameMapperAttributesMember()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceToDestinationNameMapperAttributesMember.GetMatchingMemberInfoIGetTypeInfoMembersTypeDetailsTypeString">
            <summary>Задает оболочка совместимости SourceToDestinationNameMapperAttributesMember.GetMatchingMemberInfo(IGetTypeInfoMembers getTypeInfoMembers, TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceToDestinationNameMapperAttributesMember.StaticConstructor">
            <summary>Задает оболочка совместимости SourceToDestinationNameMapperAttributesMember.SourceToDestinationNameMapperAttributesMember()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimSourceToDestinationNameMapperAttributesMember.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimSourceToDestinationNameMapperAttributesMember.AllInstances.GetMatchingMemberInfoIGetTypeInfoMembersTypeDetailsTypeString">
            <summary>Задает оболочка совместимости SourceToDestinationNameMapperAttributesMember.GetMatchingMemberInfo(IGetTypeInfoMembers getTypeInfoMembers, TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimThreadSafeList`1">
            <summary>Тип оболочки совместимости для AutoMapper.ThreadSafeList`1</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimThreadSafeList`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimThreadSafeList`1.#ctor(AutoMapper.ThreadSafeList{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimThreadSafeList`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimThreadSafeList`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimThreadSafeList`1.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimThreadSafeList`1.Bind(System.Collections.IEnumerable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimThreadSafeList`1.Bind(System.Collections.Generic.IEnumerable{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.AddT0">
            <summary>Задает оболочка совместимости ThreadSafeList`1.Add(!0 propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.Clear">
            <summary>Задает оболочка совместимости ThreadSafeList`1.Clear()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.Constructor">
            <summary>Задает оболочка совместимости ThreadSafeList`1.ThreadSafeList`1()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.Dispose">
            <summary>Задает оболочка совместимости ThreadSafeList`1.Dispose()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.DisposeBoolean">
            <summary>Задает оболочка совместимости ThreadSafeList`1.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.GetEnumeratorImpl">
            <summary>Задает оболочка совместимости ThreadSafeList`1.GetEnumeratorImpl()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.GetOrCreatePredicateOfT0FuncOfT0">
            <summary>Задает оболочка совместимости ThreadSafeList`1.GetOrCreate(Predicate`1&lt;!0&gt; predicate, Func`1&lt;!0&gt; creatorFunc)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.SystemCollectionsGenericIEnumerableTGetEnumerator">
            <summary>Задает оболочка совместимости ThreadSafeList`1.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Задает оболочка совместимости ThreadSafeList`1.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimThreadSafeList`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.AllInstances.AddT0">
            <summary>Задает оболочка совместимости ThreadSafeList`1.Add(!0 propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.AllInstances.Clear">
            <summary>Задает оболочка совместимости ThreadSafeList`1.Clear()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.AllInstances.Dispose">
            <summary>Задает оболочка совместимости ThreadSafeList`1.Dispose()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.AllInstances.DisposeBoolean">
            <summary>Задает оболочка совместимости ThreadSafeList`1.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.AllInstances.GetEnumeratorImpl">
            <summary>Задает оболочка совместимости ThreadSafeList`1.GetEnumeratorImpl()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.AllInstances.GetOrCreatePredicateOfT0FuncOfT0">
            <summary>Задает оболочка совместимости ThreadSafeList`1.GetOrCreate(Predicate`1&lt;!0&gt; predicate, Func`1&lt;!0&gt; creatorFunc)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.AllInstances.SystemCollectionsGenericIEnumerableTGetEnumerator">
            <summary>Задает оболочка совместимости ThreadSafeList`1.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimThreadSafeList`1.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Задает оболочка совместимости ThreadSafeList`1.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimTypeConverter`2">
            <summary>Тип оболочки совместимости для AutoMapper.TypeConverter`2</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeConverter`2.#ctor(AutoMapper.TypeConverter{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeConverter`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeConverter`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeConverter`2.Bind(AutoMapper.ITypeConverter{`0,`1})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeConverter`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeConverter`2.Constructor">
            <summary>Задает оболочка совместимости TypeConverter`2.TypeConverter`2()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeConverter`2.ConvertResolutionContext">
            <summary>Задает оболочка совместимости TypeConverter`2.Convert(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimTypeConverter`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeConverter`2.AllInstances.ConvertResolutionContext">
            <summary>Задает оболочка совместимости TypeConverter`2.Convert(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimTypeDetails">
            <summary>Тип оболочки совместимости для AutoMapper.TypeDetails</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeDetails.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeDetails.#ctor(AutoMapper.TypeDetails)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeDetails.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeDetails.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.BuildPublicAccessorsIEnumerableOfMemberInfo">
            <summary>Задает оболочка совместимости TypeDetails.BuildPublicAccessors(IEnumerable`1&lt;MemberInfo&gt; allMembers)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.BuildPublicNoArgExtensionMethodsIEnumerableOfMethodInfo">
            <summary>Задает оболочка совместимости TypeDetails.BuildPublicNoArgExtensionMethods(IEnumerable`1&lt;MethodInfo&gt; sourceExtensionMethodSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.BuildPublicNoArgMethods">
            <summary>Задает оболочка совместимости TypeDetails.BuildPublicNoArgMethods()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.BuildPublicReadAccessorsIEnumerableOfMemberInfo">
            <summary>Задает оболочка совместимости TypeDetails.BuildPublicReadAccessors(IEnumerable`1&lt;MemberInfo&gt; allMembers)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.ConstructorType">
            <summary>Задает оболочка совместимости TypeDetails.TypeDetails(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.ConstructorTypeFuncOfPropertyInfoBooleanFuncOfFieldInfoBoolean">
            <summary>Задает оболочка совместимости TypeDetails.TypeDetails(Type type, Func`2&lt;PropertyInfo,Boolean&gt; shouldMapProperty, Func`2&lt;FieldInfo,Boolean&gt; shouldMapField)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.ConstructorTypeFuncOfPropertyInfoBooleanFuncOfFieldInfoBooleanIEnumerableOfMethodInfo">
            <summary>Задает оболочка совместимости TypeDetails.TypeDetails(Type type, Func`2&lt;PropertyInfo,Boolean&gt; shouldMapProperty, Func`2&lt;FieldInfo,Boolean&gt; shouldMapField, IEnumerable`1&lt;MethodInfo&gt; sourceExtensionMethodSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.ConstructorsGet">
            <summary>Задает оболочка совместимости TypeDetails.get_Constructors()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.FieldReadableFieldInfo">
            <summary>Задает оболочка совместимости TypeDetails.FieldReadable(FieldInfo fieldInfo)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.FieldWritableFieldInfo">
            <summary>Задает оболочка совместимости TypeDetails.FieldWritable(FieldInfo fieldInfo)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.GetAllPublicMembersFuncOfPropertyInfoBooleanFuncOfFieldInfoBooleanFuncOfMemberInfoBoolean">
            <summary>Задает оболочка совместимости TypeDetails.GetAllPublicMembers(Func`2&lt;PropertyInfo,Boolean&gt; propertyAvailableFor, Func`2&lt;FieldInfo,Boolean&gt; fieldAvailableFor, Func`2&lt;MemberInfo,Boolean&gt; memberAvailableFor)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.GetAllPublicReadableMembersFuncOfMemberInfoBoolean">
            <summary>Задает оболочка совместимости TypeDetails.GetAllPublicReadableMembers(Func`2&lt;MemberInfo,Boolean&gt; membersToMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.GetAllPublicWritableMembersFuncOfMemberInfoBoolean">
            <summary>Задает оболочка совместимости TypeDetails.GetAllPublicWritableMembers(Func`2&lt;MemberInfo,Boolean&gt; membersToMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.MembersToMapFuncOfPropertyInfoBooleanFuncOfFieldInfoBoolean">
            <summary>Задает оболочка совместимости TypeDetails.MembersToMap(Func`2&lt;PropertyInfo,Boolean&gt; shouldMapProperty, Func`2&lt;FieldInfo,Boolean&gt; shouldMapField)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.PropertyReadablePropertyInfo">
            <summary>Задает оболочка совместимости TypeDetails.PropertyReadable(PropertyInfo propertyInfo)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.PropertyWritablePropertyInfo">
            <summary>Задает оболочка совместимости TypeDetails.PropertyWritable(PropertyInfo propertyInfo)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.PublicNoArgExtensionMethodsGet">
            <summary>Задает оболочка совместимости TypeDetails.get_PublicNoArgExtensionMethods()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.PublicNoArgMethodsGet">
            <summary>Задает оболочка совместимости TypeDetails.get_PublicNoArgMethods()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.PublicReadAccessorsGet">
            <summary>Задает оболочка совместимости TypeDetails.get_PublicReadAccessors()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.PublicWriteAccessorsGet">
            <summary>Задает оболочка совместимости TypeDetails.get_PublicWriteAccessors()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.TypeGet">
            <summary>Задает оболочка совместимости TypeDetails.get_Type()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails._BuildPublicNoArgExtensionMethodsb__22_0MethodInfo">
            <summary>Задает оболочка совместимости TypeDetails.&lt;BuildPublicNoArgExtensionMethods&gt;b__22_0(MethodInfo method)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimTypeDetails.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.BuildPublicNoArgExtensionMethodsIEnumerableOfMethodInfo">
            <summary>Задает оболочка совместимости TypeDetails.BuildPublicNoArgExtensionMethods(IEnumerable`1&lt;MethodInfo&gt; sourceExtensionMethodSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.BuildPublicNoArgMethods">
            <summary>Задает оболочка совместимости TypeDetails.BuildPublicNoArgMethods()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.ConstructorsGet">
            <summary>Задает оболочка совместимости TypeDetails.get_Constructors()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.FieldReadableFieldInfo">
            <summary>Задает оболочка совместимости TypeDetails.FieldReadable(FieldInfo fieldInfo)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.FieldWritableFieldInfo">
            <summary>Задает оболочка совместимости TypeDetails.FieldWritable(FieldInfo fieldInfo)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.GetAllPublicMembersFuncOfPropertyInfoBooleanFuncOfFieldInfoBooleanFuncOfMemberInfoBoolean">
            <summary>Задает оболочка совместимости TypeDetails.GetAllPublicMembers(Func`2&lt;PropertyInfo,Boolean&gt; propertyAvailableFor, Func`2&lt;FieldInfo,Boolean&gt; fieldAvailableFor, Func`2&lt;MemberInfo,Boolean&gt; memberAvailableFor)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.GetAllPublicReadableMembersFuncOfMemberInfoBoolean">
            <summary>Задает оболочка совместимости TypeDetails.GetAllPublicReadableMembers(Func`2&lt;MemberInfo,Boolean&gt; membersToMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.GetAllPublicWritableMembersFuncOfMemberInfoBoolean">
            <summary>Задает оболочка совместимости TypeDetails.GetAllPublicWritableMembers(Func`2&lt;MemberInfo,Boolean&gt; membersToMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.MembersToMapFuncOfPropertyInfoBooleanFuncOfFieldInfoBoolean">
            <summary>Задает оболочка совместимости TypeDetails.MembersToMap(Func`2&lt;PropertyInfo,Boolean&gt; shouldMapProperty, Func`2&lt;FieldInfo,Boolean&gt; shouldMapField)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.PublicNoArgExtensionMethodsGet">
            <summary>Задает оболочка совместимости TypeDetails.get_PublicNoArgExtensionMethods()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.PublicNoArgMethodsGet">
            <summary>Задает оболочка совместимости TypeDetails.get_PublicNoArgMethods()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.PublicReadAccessorsGet">
            <summary>Задает оболочка совместимости TypeDetails.get_PublicReadAccessors()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.PublicWriteAccessorsGet">
            <summary>Задает оболочка совместимости TypeDetails.get_PublicWriteAccessors()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances.TypeGet">
            <summary>Задает оболочка совместимости TypeDetails.get_Type()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeDetails.AllInstances._BuildPublicNoArgExtensionMethodsb__22_0MethodInfo">
            <summary>Задает оболочка совместимости TypeDetails.&lt;BuildPublicNoArgExtensionMethods&gt;b__22_0(MethodInfo method)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimTypeMap">
            <summary>Тип оболочки совместимости для AutoMapper.TypeMap</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeMap.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeMap.#ctor(AutoMapper.TypeMap)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeMap.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeMap.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AddAfterMapActionActionOfObjectObject">
            <summary>Задает оболочка совместимости TypeMap.AddAfterMapAction(Action`2&lt;Object,Object&gt; afterMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AddBeforeMapActionActionOfObjectObject">
            <summary>Задает оболочка совместимости TypeMap.AddBeforeMapAction(Action`2&lt;Object,Object&gt; beforeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AddConstructorMapConstructorInfoIEnumerableOfConstructorParameterMap">
            <summary>Задает оболочка совместимости TypeMap.AddConstructorMap(ConstructorInfo constructorInfo, IEnumerable`1&lt;ConstructorParameterMap&gt; parameters)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AddInheritedMapPropertyMap">
            <summary>Задает оболочка совместимости TypeMap.AddInheritedMap(PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AddInheritedPropertyMapPropertyMap">
            <summary>Задает оболочка совместимости TypeMap.AddInheritedPropertyMap(PropertyMap mappedProperty)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AddPropertyMapIMemberAccessorIEnumerableOfIValueResolver">
            <summary>Задает оболочка совместимости TypeMap.AddPropertyMap(IMemberAccessor destProperty, IEnumerable`1&lt;IValueResolver&gt; resolvers)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AddPropertyMapPropertyMap">
            <summary>Задает оболочка совместимости TypeMap.AddPropertyMap(PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AfterMapGet">
            <summary>Задает оболочка совместимости TypeMap.get_AfterMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ApplyInheritedMapTypeMap">
            <summary>Задает оболочка совместимости TypeMap.ApplyInheritedMap(TypeMap inheritedTypeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ApplyInheritedTypeMapTypeMap">
            <summary>Задает оболочка совместимости TypeMap.ApplyInheritedTypeMap(TypeMap inheritedTypeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.BeforeMapGet">
            <summary>Задает оболочка совместимости TypeMap.get_BeforeMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ConfiguredMemberListGet">
            <summary>Задает оболочка совместимости TypeMap.get_ConfiguredMemberList()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ConstructDestinationUsingServiceLocatorGet">
            <summary>Задает оболочка совместимости TypeMap.get_ConstructDestinationUsingServiceLocator()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ConstructDestinationUsingServiceLocatorSetBoolean">
            <summary>Задает оболочка совместимости TypeMap.set_ConstructDestinationUsingServiceLocator(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ConstructExpressionGet">
            <summary>Задает оболочка совместимости TypeMap.get_ConstructExpression()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ConstructExpressionSetLambdaExpression">
            <summary>Задает оболочка совместимости TypeMap.set_ConstructExpression(LambdaExpression value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ConstructorMapGet">
            <summary>Задает оболочка совместимости TypeMap.get_ConstructorMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ConstructorMapSetConstructorMap">
            <summary>Задает оболочка совместимости TypeMap.set_ConstructorMap(ConstructorMap value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ConstructorTypeDetailsTypeDetailsMemberListString">
            <summary>Задает оболочка совместимости TypeMap.TypeMap(TypeDetails sourceType, TypeDetails destinationType, MemberList memberList, String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.CustomMapperGet">
            <summary>Задает оболочка совместимости TypeMap.get_CustomMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.CustomMapperSetFuncOfResolutionContextObject">
            <summary>Задает оболочка совместимости TypeMap.set_CustomMapper(Func`2&lt;ResolutionContext,Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.CustomProjectionGet">
            <summary>Задает оболочка совместимости TypeMap.get_CustomProjection()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.CustomProjectionSetLambdaExpression">
            <summary>Задает оболочка совместимости TypeMap.set_CustomProjection(LambdaExpression value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.DestinationConstructorExpressionExpression">
            <summary>Задает оболочка совместимости TypeMap.DestinationConstructorExpression(Expression instanceParameter)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.DestinationCtorGet">
            <summary>Задает оболочка совместимости TypeMap.get_DestinationCtor()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.DestinationCtorSetFuncOfResolutionContextObject">
            <summary>Задает оболочка совместимости TypeMap.set_DestinationCtor(Func`2&lt;ResolutionContext,Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.DestinationTypeGet">
            <summary>Задает оболочка совместимости TypeMap.get_DestinationType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.DestinationTypeOverrideGet">
            <summary>Задает оболочка совместимости TypeMap.get_DestinationTypeOverride()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.DestinationTypeOverrideSetType">
            <summary>Задает оболочка совместимости TypeMap.set_DestinationTypeOverride(Type value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.EqualsObject">
            <summary>Задает оболочка совместимости TypeMap.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.EqualsTypeMap">
            <summary>Задает оболочка совместимости TypeMap.Equals(TypeMap other)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.FindOrCreatePropertyMapForIMemberAccessor">
            <summary>Задает оболочка совместимости TypeMap.FindOrCreatePropertyMapFor(IMemberAccessor destinationProperty)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.FindOrCreateSourceMemberConfigForMemberInfo">
            <summary>Задает оболочка совместимости TypeMap.FindOrCreateSourceMemberConfigFor(MemberInfo sourceMember)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.GetDerivedTypeForType">
            <summary>Задает оболочка совместимости TypeMap.GetDerivedTypeFor(Type derivedSourceType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.GetExistingPropertyMapForIMemberAccessor">
            <summary>Задает оболочка совместимости TypeMap.GetExistingPropertyMapFor(IMemberAccessor destinationProperty)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.GetHashCode">
            <summary>Задает оболочка совместимости TypeMap.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.GetPropertyMaps">
            <summary>Задает оболочка совместимости TypeMap.GetPropertyMaps()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.GetUnmappedPropertyNames">
            <summary>Задает оболочка совместимости TypeMap.GetUnmappedPropertyNames()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.HasDerivedTypesToInclude">
            <summary>Задает оболочка совместимости TypeMap.HasDerivedTypesToInclude()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.IgnorePropertiesStartingWithGet">
            <summary>Задает оболочка совместимости TypeMap.get_IgnorePropertiesStartingWith()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.IgnorePropertiesStartingWithSetIEnumerableOfString">
            <summary>Задает оболочка совместимости TypeMap.set_IgnorePropertiesStartingWith(IEnumerable`1&lt;String&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.IncludeDerivedTypesTypeType">
            <summary>Задает оболочка совместимости TypeMap.IncludeDerivedTypes(Type derivedSourceType, Type derivedDestinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.IncludedDerivedTypesGet">
            <summary>Задает оболочка совместимости TypeMap.get_IncludedDerivedTypes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.InheritTypesTypeMap">
            <summary>Задает оболочка совместимости TypeMap.InheritTypes(TypeMap inheritedTypeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.MaxDepthGet">
            <summary>Задает оболочка совместимости TypeMap.get_MaxDepth()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.MaxDepthSetInt32">
            <summary>Задает оболочка совместимости TypeMap.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.PassesDepthCheckResolutionContextInt32">
            <summary>Задает оболочка совместимости TypeMap.PassesDepthCheck(ResolutionContext context, Int32 maxDepth)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ProfileGet">
            <summary>Задает оболочка совместимости TypeMap.get_Profile()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ProfileSetString">
            <summary>Задает оболочка совместимости TypeMap.set_Profile(String value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.Seal">
            <summary>Задает оболочка совместимости TypeMap.Seal()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.SetConditionFuncOfResolutionContextBoolean">
            <summary>Задает оболочка совместимости TypeMap.SetCondition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ShouldAssignValueResolutionContext">
            <summary>Задает оболочка совместимости TypeMap.ShouldAssignValue(ResolutionContext resolutionContext)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.ShouldCheckForValid">
            <summary>Задает оболочка совместимости TypeMap.ShouldCheckForValid()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.SourceTypeGet">
            <summary>Задает оболочка совместимости TypeMap.get_SourceType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.SubstitutionGet">
            <summary>Задает оболочка совместимости TypeMap.get_Substitution()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.SubstitutionSetFuncOfObjectObject">
            <summary>Задает оболочка совместимости TypeMap.set_Substitution(Func`2&lt;Object,Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.TypeHasBeenIncludedTypePair">
            <summary>Задает оболочка совместимости TypeMap.TypeHasBeenIncluded(TypePair derivedTypes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.TypesGet">
            <summary>Задает оболочка совместимости TypeMap.get_Types()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.UseCustomMapperFuncOfResolutionContextObject">
            <summary>Задает оболочка совместимости TypeMap.UseCustomMapper(Func`2&lt;ResolutionContext,Object&gt; customMapper)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.UseCustomProjectionLambdaExpression">
            <summary>Задает оболочка совместимости TypeMap.UseCustomProjection(LambdaExpression projectionExpression)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap._GetUnmappedPropertyNamesb__77_0PropertyMap">
            <summary>Задает оболочка совместимости TypeMap.&lt;GetUnmappedPropertyNames&gt;b__77_0(PropertyMap pm)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap._GetUnmappedPropertyNamesb__77_9String">
            <summary>Задает оболочка совместимости TypeMap.&lt;GetUnmappedPropertyNames&gt;b__77_9(String memberName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap._InheritTypesb__92_0TypePair">
            <summary>Задает оболочка совместимости TypeMap.&lt;InheritTypes&gt;b__92_0(TypePair includedDerivedType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap._get_AfterMapb__40_0ObjectObject">
            <summary>Задает оболочка совместимости TypeMap.&lt;get_AfterMap&gt;b__40_0(Object src, Object dest)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap._get_BeforeMapb__38_0ObjectObject">
            <summary>Задает оболочка совместимости TypeMap.&lt;get_BeforeMap&gt;b__38_0(Object src, Object dest)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimTypeMap.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.AddAfterMapActionActionOfObjectObject">
            <summary>Задает оболочка совместимости TypeMap.AddAfterMapAction(Action`2&lt;Object,Object&gt; afterMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.AddBeforeMapActionActionOfObjectObject">
            <summary>Задает оболочка совместимости TypeMap.AddBeforeMapAction(Action`2&lt;Object,Object&gt; beforeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.AddConstructorMapConstructorInfoIEnumerableOfConstructorParameterMap">
            <summary>Задает оболочка совместимости TypeMap.AddConstructorMap(ConstructorInfo constructorInfo, IEnumerable`1&lt;ConstructorParameterMap&gt; parameters)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.AddInheritedMapPropertyMap">
            <summary>Задает оболочка совместимости TypeMap.AddInheritedMap(PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.AddInheritedPropertyMapPropertyMap">
            <summary>Задает оболочка совместимости TypeMap.AddInheritedPropertyMap(PropertyMap mappedProperty)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.AddPropertyMapIMemberAccessorIEnumerableOfIValueResolver">
            <summary>Задает оболочка совместимости TypeMap.AddPropertyMap(IMemberAccessor destProperty, IEnumerable`1&lt;IValueResolver&gt; resolvers)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.AddPropertyMapPropertyMap">
            <summary>Задает оболочка совместимости TypeMap.AddPropertyMap(PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.AfterMapGet">
            <summary>Задает оболочка совместимости TypeMap.get_AfterMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ApplyInheritedMapTypeMap">
            <summary>Задает оболочка совместимости TypeMap.ApplyInheritedMap(TypeMap inheritedTypeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ApplyInheritedTypeMapTypeMap">
            <summary>Задает оболочка совместимости TypeMap.ApplyInheritedTypeMap(TypeMap inheritedTypeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.BeforeMapGet">
            <summary>Задает оболочка совместимости TypeMap.get_BeforeMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ConfiguredMemberListGet">
            <summary>Задает оболочка совместимости TypeMap.get_ConfiguredMemberList()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ConstructDestinationUsingServiceLocatorGet">
            <summary>Задает оболочка совместимости TypeMap.get_ConstructDestinationUsingServiceLocator()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ConstructDestinationUsingServiceLocatorSetBoolean">
            <summary>Задает оболочка совместимости TypeMap.set_ConstructDestinationUsingServiceLocator(Boolean value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ConstructExpressionGet">
            <summary>Задает оболочка совместимости TypeMap.get_ConstructExpression()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ConstructExpressionSetLambdaExpression">
            <summary>Задает оболочка совместимости TypeMap.set_ConstructExpression(LambdaExpression value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ConstructorMapGet">
            <summary>Задает оболочка совместимости TypeMap.get_ConstructorMap()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ConstructorMapSetConstructorMap">
            <summary>Задает оболочка совместимости TypeMap.set_ConstructorMap(ConstructorMap value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.CustomMapperGet">
            <summary>Задает оболочка совместимости TypeMap.get_CustomMapper()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.CustomMapperSetFuncOfResolutionContextObject">
            <summary>Задает оболочка совместимости TypeMap.set_CustomMapper(Func`2&lt;ResolutionContext,Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.CustomProjectionGet">
            <summary>Задает оболочка совместимости TypeMap.get_CustomProjection()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.CustomProjectionSetLambdaExpression">
            <summary>Задает оболочка совместимости TypeMap.set_CustomProjection(LambdaExpression value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.DestinationConstructorExpressionExpression">
            <summary>Задает оболочка совместимости TypeMap.DestinationConstructorExpression(Expression instanceParameter)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.DestinationCtorGet">
            <summary>Задает оболочка совместимости TypeMap.get_DestinationCtor()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.DestinationCtorSetFuncOfResolutionContextObject">
            <summary>Задает оболочка совместимости TypeMap.set_DestinationCtor(Func`2&lt;ResolutionContext,Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.DestinationTypeGet">
            <summary>Задает оболочка совместимости TypeMap.get_DestinationType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.DestinationTypeOverrideGet">
            <summary>Задает оболочка совместимости TypeMap.get_DestinationTypeOverride()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.DestinationTypeOverrideSetType">
            <summary>Задает оболочка совместимости TypeMap.set_DestinationTypeOverride(Type value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости TypeMap.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.EqualsTypeMap">
            <summary>Задает оболочка совместимости TypeMap.Equals(TypeMap other)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.FindOrCreatePropertyMapForIMemberAccessor">
            <summary>Задает оболочка совместимости TypeMap.FindOrCreatePropertyMapFor(IMemberAccessor destinationProperty)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.FindOrCreateSourceMemberConfigForMemberInfo">
            <summary>Задает оболочка совместимости TypeMap.FindOrCreateSourceMemberConfigFor(MemberInfo sourceMember)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.GetDerivedTypeForType">
            <summary>Задает оболочка совместимости TypeMap.GetDerivedTypeFor(Type derivedSourceType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.GetExistingPropertyMapForIMemberAccessor">
            <summary>Задает оболочка совместимости TypeMap.GetExistingPropertyMapFor(IMemberAccessor destinationProperty)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости TypeMap.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.GetPropertyMaps">
            <summary>Задает оболочка совместимости TypeMap.GetPropertyMaps()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.GetUnmappedPropertyNames">
            <summary>Задает оболочка совместимости TypeMap.GetUnmappedPropertyNames()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.HasDerivedTypesToInclude">
            <summary>Задает оболочка совместимости TypeMap.HasDerivedTypesToInclude()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.IgnorePropertiesStartingWithGet">
            <summary>Задает оболочка совместимости TypeMap.get_IgnorePropertiesStartingWith()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.IgnorePropertiesStartingWithSetIEnumerableOfString">
            <summary>Задает оболочка совместимости TypeMap.set_IgnorePropertiesStartingWith(IEnumerable`1&lt;String&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.IncludeDerivedTypesTypeType">
            <summary>Задает оболочка совместимости TypeMap.IncludeDerivedTypes(Type derivedSourceType, Type derivedDestinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.IncludedDerivedTypesGet">
            <summary>Задает оболочка совместимости TypeMap.get_IncludedDerivedTypes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.InheritTypesTypeMap">
            <summary>Задает оболочка совместимости TypeMap.InheritTypes(TypeMap inheritedTypeMap)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.MaxDepthGet">
            <summary>Задает оболочка совместимости TypeMap.get_MaxDepth()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.MaxDepthSetInt32">
            <summary>Задает оболочка совместимости TypeMap.set_MaxDepth(Int32 value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ProfileGet">
            <summary>Задает оболочка совместимости TypeMap.get_Profile()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ProfileSetString">
            <summary>Задает оболочка совместимости TypeMap.set_Profile(String value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.Seal">
            <summary>Задает оболочка совместимости TypeMap.Seal()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.SetConditionFuncOfResolutionContextBoolean">
            <summary>Задает оболочка совместимости TypeMap.SetCondition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ShouldAssignValueResolutionContext">
            <summary>Задает оболочка совместимости TypeMap.ShouldAssignValue(ResolutionContext resolutionContext)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.ShouldCheckForValid">
            <summary>Задает оболочка совместимости TypeMap.ShouldCheckForValid()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.SourceTypeGet">
            <summary>Задает оболочка совместимости TypeMap.get_SourceType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.SubstitutionGet">
            <summary>Задает оболочка совместимости TypeMap.get_Substitution()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.SubstitutionSetFuncOfObjectObject">
            <summary>Задает оболочка совместимости TypeMap.set_Substitution(Func`2&lt;Object,Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.TypeHasBeenIncludedTypePair">
            <summary>Задает оболочка совместимости TypeMap.TypeHasBeenIncluded(TypePair derivedTypes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.TypesGet">
            <summary>Задает оболочка совместимости TypeMap.get_Types()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.UseCustomMapperFuncOfResolutionContextObject">
            <summary>Задает оболочка совместимости TypeMap.UseCustomMapper(Func`2&lt;ResolutionContext,Object&gt; customMapper)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances.UseCustomProjectionLambdaExpression">
            <summary>Задает оболочка совместимости TypeMap.UseCustomProjection(LambdaExpression projectionExpression)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances._GetUnmappedPropertyNamesb__77_0PropertyMap">
            <summary>Задает оболочка совместимости TypeMap.&lt;GetUnmappedPropertyNames&gt;b__77_0(PropertyMap pm)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances._GetUnmappedPropertyNamesb__77_9String">
            <summary>Задает оболочка совместимости TypeMap.&lt;GetUnmappedPropertyNames&gt;b__77_9(String memberName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances._InheritTypesb__92_0TypePair">
            <summary>Задает оболочка совместимости TypeMap.&lt;InheritTypes&gt;b__92_0(TypePair includedDerivedType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances._get_AfterMapb__40_0ObjectObject">
            <summary>Задает оболочка совместимости TypeMap.&lt;get_AfterMap&gt;b__40_0(Object src, Object dest)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMap.AllInstances._get_BeforeMapb__38_0ObjectObject">
            <summary>Задает оболочка совместимости TypeMap.&lt;get_BeforeMap&gt;b__38_0(Object src, Object dest)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimTypeMapFactory">
            <summary>Тип оболочки совместимости для AutoMapper.TypeMapFactory</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeMapFactory.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeMapFactory.#ctor(AutoMapper.TypeMapFactory)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeMapFactory.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeMapFactory.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypeMapFactory.Bind(AutoMapper.ITypeMapFactory)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.Constructor">
            <summary>Задает оболочка совместимости TypeMapFactory.TypeMapFactory()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.CreateTypeMapTypeTypeIProfileConfigurationMemberList">
            <summary>Задает оболочка совместимости TypeMapFactory.CreateTypeMap(Type sourceType, Type destinationType, IProfileConfiguration options, MemberList memberList)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.FindTypeMemberIEnumerableOfMemberInfoIEnumerableOfMethodInfoIEnumerableOfMethodInfoStringIMappingOptions">
            <summary>Задает оболочка совместимости TypeMapFactory.FindTypeMember(IEnumerable`1&lt;MemberInfo&gt; modelProperties, IEnumerable`1&lt;MethodInfo&gt; getMethods, IEnumerable`1&lt;MethodInfo&gt; getExtensionMethods, String nameToSearch, IMappingOptions mappingOptions)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.GetTypeInfoTypeFuncOfPropertyInfoBooleanFuncOfFieldInfoBooleanIEnumerableOfMethodInfo">
            <summary>Задает оболочка совместимости TypeMapFactory.GetTypeInfo(Type type, Func`2&lt;PropertyInfo,Boolean&gt; shouldMapProperty, Func`2&lt;FieldInfo,Boolean&gt; shouldMapField, IEnumerable`1&lt;MethodInfo&gt; extensionMethodsToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.GetTypeInfoTypeIMappingOptions">
            <summary>Задает оболочка совместимости TypeMapFactory.GetTypeInfo(Type type, IMappingOptions mappingOptions)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.GetTypeInfoTypeIProfileConfiguration">
            <summary>Задает оболочка совместимости TypeMapFactory.GetTypeInfo(Type type, IProfileConfiguration profileConfiguration)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.MapDestinationCtorToSourceTypeMapConstructorInfoTypeDetailsIProfileConfiguration">
            <summary>Задает оболочка совместимости TypeMapFactory.MapDestinationCtorToSource(TypeMap typeMap, ConstructorInfo destCtor, TypeDetails sourceTypeInfo, IProfileConfiguration options)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.MapDestinationPropertyToSourceIProfileConfigurationTypeDetailsTypeStringLinkedListOfIValueResolver">
            <summary>Задает оболочка совместимости TypeMapFactory.MapDestinationPropertyToSource(IProfileConfiguration options, TypeDetails sourceTypeInfo, Type destType, String destMemberInfo, LinkedList`1&lt;IValueResolver&gt; members)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.NameMatchesStringStringIMappingOptions">
            <summary>Задает оболочка совместимости TypeMapFactory.NameMatches(String memberName, String nameToMatch, IMappingOptions mappingOptions)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.PossibleNamesStringIEnumerableOfAliasedMemberIEnumerableOfMemberNameReplacerIEnumerableOfStringIEnumerableOfString">
            <summary>Задает оболочка совместимости TypeMapFactory.PossibleNames(String memberName, IEnumerable`1&lt;AliasedMember&gt; aliases, IEnumerable`1&lt;MemberNameReplacer&gt; memberNameReplacers, IEnumerable`1&lt;String&gt; prefixes, IEnumerable`1&lt;String&gt; postfixes)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.StaticConstructor">
            <summary>Задает оболочка совместимости TypeMapFactory.TypeMapFactory()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimTypeMapFactory.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.AllInstances.CreateTypeMapTypeTypeIProfileConfigurationMemberList">
            <summary>Задает оболочка совместимости TypeMapFactory.CreateTypeMap(Type sourceType, Type destinationType, IProfileConfiguration options, MemberList memberList)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.AllInstances.GetTypeInfoTypeFuncOfPropertyInfoBooleanFuncOfFieldInfoBooleanIEnumerableOfMethodInfo">
            <summary>Задает оболочка совместимости TypeMapFactory.GetTypeInfo(Type type, Func`2&lt;PropertyInfo,Boolean&gt; shouldMapProperty, Func`2&lt;FieldInfo,Boolean&gt; shouldMapField, IEnumerable`1&lt;MethodInfo&gt; extensionMethodsToSearch)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.AllInstances.GetTypeInfoTypeIMappingOptions">
            <summary>Задает оболочка совместимости TypeMapFactory.GetTypeInfo(Type type, IMappingOptions mappingOptions)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.AllInstances.MapDestinationCtorToSourceTypeMapConstructorInfoTypeDetailsIProfileConfiguration">
            <summary>Задает оболочка совместимости TypeMapFactory.MapDestinationCtorToSource(TypeMap typeMap, ConstructorInfo destCtor, TypeDetails sourceTypeInfo, IProfileConfiguration options)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypeMapFactory.AllInstances.MapDestinationPropertyToSourceIProfileConfigurationTypeDetailsTypeStringLinkedListOfIValueResolver">
            <summary>Задает оболочка совместимости TypeMapFactory.MapDestinationPropertyToSource(IProfileConfiguration options, TypeDetails sourceTypeInfo, Type destType, String destMemberInfo, LinkedList`1&lt;IValueResolver&gt; members)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimTypePair">
            <summary>Тип оболочки совместимости для AutoMapper.TypePair</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypePair.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypePair.#ctor(AutoMapper.TypePair)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypePair.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypePair.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimTypePair.Bind(System.IEquatable{AutoMapper.TypePair})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypePair.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypePair.ConstructorTypeType">
            <summary>Задает оболочка совместимости TypePair.TypePair(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypePair.DestinationTypeGet">
            <summary>Задает оболочка совместимости TypePair.get_DestinationType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypePair.EqualsObject">
            <summary>Задает оболочка совместимости TypePair.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypePair.EqualsTypePair">
            <summary>Задает оболочка совместимости TypePair.Equals(TypePair other)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypePair.GetHashCode">
            <summary>Задает оболочка совместимости TypePair.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypePair.SourceTypeGet">
            <summary>Задает оболочка совместимости TypePair.get_SourceType()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimTypePair.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypePair.AllInstances.DestinationTypeGet">
            <summary>Задает оболочка совместимости TypePair.get_DestinationType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypePair.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости TypePair.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypePair.AllInstances.EqualsTypePair">
            <summary>Задает оболочка совместимости TypePair.Equals(TypePair other)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypePair.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости TypePair.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimTypePair.AllInstances.SourceTypeGet">
            <summary>Задает оболочка совместимости TypePair.get_SourceType()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimValueResolver`2">
            <summary>Тип оболочки совместимости для AutoMapper.ValueResolver`2</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimValueResolver`2.#ctor(AutoMapper.ValueResolver{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimValueResolver`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimValueResolver`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Fakes.ShimValueResolver`2.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimValueResolver`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimValueResolver`2.Constructor">
            <summary>Задает оболочка совместимости ValueResolver`2.ValueResolver`2()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimValueResolver`2.ResolveResolutionResult">
            <summary>Задает оболочка совместимости ValueResolver`2.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.ShimValueResolver`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Fakes.ShimValueResolver`2.AllInstances.ResolveResolutionResult">
            <summary>Задает оболочка совместимости ValueResolver`2.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubAliasedMember">
            <summary>Тип заглушки AutoMapper.AliasedMember</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAliasedMember.#ctor(System.String,System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAliasedMember.Equals(System.Object)">
            <summary>Задает заглушка AliasedMember.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAliasedMember.EqualsObject">
            <summary>Задает stub AliasedMember.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAliasedMember.GetHashCode">
            <summary>Задает заглушка AliasedMember.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAliasedMember.GetHashCode01">
            <summary>Задает stub AliasedMember.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAliasedMember.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubAliasedMember</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAliasedMember.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAliasedMember.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAliasedMember.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubAllMemberInfo">
            <summary>Тип заглушки AutoMapper.AllMemberInfo</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAllMemberInfo.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAllMemberInfo.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubAllMemberInfo</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAllMemberInfo.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAllMemberInfo.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAllMemberInfo.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubAutoMapperConfigurationException">
            <summary>Тип заглушки AutoMapper.AutoMapperConfigurationException</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperConfigurationException.#ctor(AutoMapper.ResolutionContext)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperConfigurationException.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperConfigurationException.#ctor(AutoMapper.AutoMapperConfigurationException.TypeMapConfigErrors[])">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperConfigurationException.#ctor(System.String,System.Exception)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperConfigurationException.AttachBackingFieldToHelpLink">
            <summary>Присоединение делегатов для эмуляции StubAutoMapperConfigurationException.HelpLink как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperConfigurationException.AttachBackingFieldToSource">
            <summary>Присоединение делегатов для эмуляции StubAutoMapperConfigurationException.Source как свойства с резервным полем.</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperConfigurationException.DataGet">
            <summary>Задает stub Exception.get_Data()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperConfigurationException.GetBaseException">
            <summary>Задает заглушка Exception.GetBaseException()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperConfigurationException.GetBaseException01">
            <summary>Задает stub Exception.GetBaseException()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Задает заглушка Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperConfigurationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Задает stub Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperConfigurationException.HelpLinkGet">
            <summary>Задает stub Exception.get_HelpLink()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperConfigurationException.HelpLinkSetString">
            <summary>Задает stub Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperConfigurationException.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubAutoMapperConfigurationException</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperConfigurationException.MessageGet">
            <summary>Задает stub AutoMapperConfigurationException.get_Message()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperConfigurationException.SourceGet">
            <summary>Задает stub Exception.get_Source()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperConfigurationException.SourceSetString">
            <summary>Задает stub Exception.set_Source(String value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperConfigurationException.StackTraceGet">
            <summary>Задает stub AutoMapperConfigurationException.get_StackTrace()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperConfigurationException.ToString">
            <summary>Задает заглушка Exception.ToString()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperConfigurationException.ToString01">
            <summary>Задает stub Exception.ToString()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperConfigurationException.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperConfigurationException.Data">
            <summary>Задает stub Exception.get_Data()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperConfigurationException.HelpLink">
            <summary>Задает stub Exception.get_HelpLink()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperConfigurationException.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperConfigurationException.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperConfigurationException.Message">
            <summary>Задает stub AutoMapperConfigurationException.get_Message()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperConfigurationException.Source">
            <summary>Задает stub Exception.get_Source()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperConfigurationException.StackTrace">
            <summary>Задает stub AutoMapperConfigurationException.get_StackTrace()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubAutoMapperMappingException">
            <summary>Тип заглушки AutoMapper.AutoMapperMappingException</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.#ctor(AutoMapper.ResolutionContext)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.#ctor(AutoMapper.TypePair)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.#ctor(AutoMapper.ResolutionContext,System.Exception)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.#ctor(AutoMapper.ResolutionContext,System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.#ctor(AutoMapper.TypePair,System.Exception)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.#ctor(AutoMapper.TypePair,System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.#ctor(System.String,System.Exception)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.AttachBackingFieldToHelpLink">
            <summary>Присоединение делегатов для эмуляции StubAutoMapperMappingException.HelpLink как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.AttachBackingFieldToSource">
            <summary>Присоединение делегатов для эмуляции StubAutoMapperMappingException.Source как свойства с резервным полем.</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperMappingException.DataGet">
            <summary>Задает stub Exception.get_Data()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.GetBaseException">
            <summary>Задает заглушка Exception.GetBaseException()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperMappingException.GetBaseException01">
            <summary>Задает stub Exception.GetBaseException()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Задает заглушка Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperMappingException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Задает stub Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperMappingException.HelpLinkGet">
            <summary>Задает stub Exception.get_HelpLink()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperMappingException.HelpLinkSetString">
            <summary>Задает stub Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubAutoMapperMappingException</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperMappingException.MessageGet">
            <summary>Задает stub AutoMapperMappingException.get_Message()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperMappingException.SourceGet">
            <summary>Задает stub Exception.get_Source()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperMappingException.SourceSetString">
            <summary>Задает stub Exception.set_Source(String value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperMappingException.StackTraceGet">
            <summary>Задает stub AutoMapperMappingException.get_StackTrace()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubAutoMapperMappingException.ToString">
            <summary>Задает заглушка Exception.ToString()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubAutoMapperMappingException.ToString01">
            <summary>Задает stub Exception.ToString()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperMappingException.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperMappingException.Data">
            <summary>Задает stub Exception.get_Data()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperMappingException.HelpLink">
            <summary>Задает stub Exception.get_HelpLink()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperMappingException.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperMappingException.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperMappingException.Message">
            <summary>Задает stub AutoMapperMappingException.get_Message()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperMappingException.Source">
            <summary>Задает stub Exception.get_Source()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubAutoMapperMappingException.StackTrace">
            <summary>Задает stub AutoMapperMappingException.get_StackTrace()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubCaseInsensitiveName">
            <summary>Тип заглушки AutoMapper.CaseInsensitiveName</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubCaseInsensitiveName.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubCaseInsensitiveName.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubCaseInsensitiveName</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubCaseInsensitiveName.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubCaseInsensitiveName.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubCaseInsensitiveName.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubCaseSensitiveName">
            <summary>Тип заглушки AutoMapper.CaseSensitiveName</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubCaseSensitiveName.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubCaseSensitiveName.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubCaseSensitiveName</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubCaseSensitiveName.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubCaseSensitiveName.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubCaseSensitiveName.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubConstructorMap">
            <summary>Тип заглушки AutoMapper.ConstructorMap</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubConstructorMap.#ctor(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{AutoMapper.ConstructorParameterMap})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubConstructorMap.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubConstructorMap</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubConstructorMap.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubConstructorMap.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubConstructorMap.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubConstructorParameterMap">
            <summary>Тип заглушки AutoMapper.ConstructorParameterMap</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubConstructorParameterMap.#ctor(System.Reflection.ParameterInfo,AutoMapper.IValueResolver[],System.Boolean)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubConstructorParameterMap.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubConstructorParameterMap</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubConstructorParameterMap.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubConstructorParameterMap.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubConstructorParameterMap.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubCtorParamConfigurationExpression`1">
            <summary>Тип заглушки AutoMapper.CtorParamConfigurationExpression`1</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubCtorParamConfigurationExpression`1.#ctor(AutoMapper.ConstructorParameterMap)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubCtorParamConfigurationExpression`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubCtorParamConfigurationExpression</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubCtorParamConfigurationExpression`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubCtorParamConfigurationExpression`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubCtorParamConfigurationExpression`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubDefaultMember">
            <summary>Тип заглушки AutoMapper.DefaultMember</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubDefaultMember.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubDefaultMember.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDefaultMember</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubDefaultMember.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubDefaultMember.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubDefaultMember.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubDefaultName">
            <summary>Тип заглушки AutoMapper.DefaultName</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubDefaultName.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubDefaultName.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDefaultName</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubDefaultName.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubDefaultName.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubDefaultName.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIChildMemberConfiguration">
            <summary>Тип заглушки AutoMapper.IChildMemberConfiguration</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIChildMemberConfiguration.#ctor">
            <summary>Инициализирует новый экземпляр type StubIChildMemberConfiguration</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIChildMemberConfiguration.am::AutoMapper#IChildMemberConfiguration#MapDestinationPropertyToSource(AutoMapper.IProfileConfiguration,AutoMapper.TypeDetails,System.Type,System.String,System.Collections.Generic.LinkedList{AutoMapper.IValueResolver},AutoMapper.IMemberConfiguration)">
            <summary>Задает заглушка IChildMemberConfiguration.MapDestinationPropertyToSource(IProfileConfiguration options, TypeDetails sourceType, Type destType, String nameToSearch, LinkedList`1&lt;IValueResolver&gt; resolvers, IMemberConfiguration parent)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIChildMemberConfiguration.MapDestinationPropertyToSourceIProfileConfigurationTypeDetailsTypeStringLinkedListOfIValueResolverIMemberConfiguration">
            <summary>Задает stub IChildMemberConfiguration.MapDestinationPropertyToSource(IProfileConfiguration options, TypeDetails sourceType, Type destType, String nameToSearch, LinkedList`1&lt;IValueResolver&gt; resolvers, IMemberConfiguration parent)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIConfiguration">
            <summary>Тип заглушки AutoMapper.IConfiguration</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.#ctor">
            <summary>Инициализирует новый экземпляр type StubIConfiguration</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.AddProfileOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает заглушки AddProfile()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfiguration.AddProfileProfile">
            <summary>Задает stub IConfiguration.AddProfile(Profile profile)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.am::AutoMapper#IConfiguration#AddProfile``1">
            <summary>Задает заглушка IConfiguration.AddProfile()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.am::AutoMapper#IConfiguration#AddProfile(AutoMapper.Profile)">
            <summary>Задает заглушка IConfiguration.AddProfile(Profile profile)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.am::AutoMapper#IConfiguration#ConstructServicesUsing(System.Func{System.Type,System.Object})">
            <summary>Задает заглушка IConfiguration.ConstructServicesUsing(Func`2&lt;Type,Object&gt; constructor)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.am::AutoMapper#IConfiguration#CreateMap(System.Type,System.Type,AutoMapper.MemberList,System.String)">
            <summary>Задает заглушка IConfiguration.CreateMap(Type sourceType, Type destinationType, MemberList memberList, String profileName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.am::AutoMapper#IConfiguration#CreateMap``2(System.String)">
            <summary>Задает заглушка IConfiguration.CreateMap(String profileName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.am::AutoMapper#IConfiguration#CreateMap``2(System.String,AutoMapper.MemberList)">
            <summary>Задает заглушка IConfiguration.CreateMap(String profileName, MemberList memberList)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.am::AutoMapper#IConfiguration#CreateProfile(System.String,System.Action{AutoMapper.IProfileExpression})">
            <summary>Задает заглушка IConfiguration.CreateProfile(String profileName, Action`1&lt;IProfileExpression&gt; profileConfiguration)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.am::AutoMapper#IConfiguration#CreateProfile(System.String)">
            <summary>Задает заглушка IConfiguration.CreateProfile(String profileName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.am::AutoMapper#IConfiguration#ForAllMaps(System.String,System.Action{AutoMapper.TypeMap,AutoMapper.IMappingExpression})">
            <summary>Задает заглушка IConfiguration.ForAllMaps(String profileName, Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfiguration.ConstructServicesUsingFuncOfTypeObject">
            <summary>Задает stub IConfiguration.ConstructServicesUsing(Func`2&lt;Type,Object&gt; constructor)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.CreateMapOf2String``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает заглушки CreateMap(String profileName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfiguration.CreateMapOf2StringMemberList``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,AutoMapper.MemberList,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает заглушки CreateMap(String profileName, MemberList memberList)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfiguration.CreateMapTypeTypeMemberListString">
            <summary>Задает stub IConfiguration.CreateMap(Type sourceType, Type destinationType, MemberList memberList, String profileName)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfiguration.CreateProfileString">
            <summary>Задает stub IConfiguration.CreateProfile(String profileName)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfiguration.CreateProfileStringActionOfIProfileExpression">
            <summary>Задает stub IConfiguration.CreateProfile(String profileName, Action`1&lt;IProfileExpression&gt; profileConfiguration)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfiguration.ForAllMapsStringActionOfTypeMapIMappingExpression">
            <summary>Задает stub IConfiguration.ForAllMaps(String profileName, Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIConfigurationProvider">
            <summary>Тип заглушки AutoMapper.IConfigurationProvider</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.#ctor">
            <summary>Инициализирует новый экземпляр type StubIConfigurationProvider</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.AllowNullCollectionsGet">
            <summary>Задает stub IConfigurationProvider.get_AllowNullCollections()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.AllowNullDestinationValuesGet">
            <summary>Задает stub IConfigurationProvider.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.AssertConfigurationIsValid">
            <summary>Задает stub IConfigurationProvider.AssertConfigurationIsValid()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.AssertConfigurationIsValidOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает заглушки AssertConfigurationIsValid()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.AssertConfigurationIsValidString">
            <summary>Задает stub IConfigurationProvider.AssertConfigurationIsValid(String profileName)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.AssertConfigurationIsValidTypeMap">
            <summary>Задает stub IConfigurationProvider.AssertConfigurationIsValid(TypeMap typeMap)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#AssertConfigurationIsValid">
            <summary>Задает заглушка IConfigurationProvider.AssertConfigurationIsValid()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#AssertConfigurationIsValid``1">
            <summary>Задает заглушка IConfigurationProvider.AssertConfigurationIsValid()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#AssertConfigurationIsValid(AutoMapper.TypeMap)">
            <summary>Задает заглушка IConfigurationProvider.AssertConfigurationIsValid(TypeMap typeMap)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#AssertConfigurationIsValid(System.String)">
            <summary>Задает заглушка IConfigurationProvider.AssertConfigurationIsValid(String profileName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#FindTypeMapFor``2">
            <summary>Задает заглушка IConfigurationProvider.FindTypeMapFor()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#FindTypeMapFor(AutoMapper.TypePair)">
            <summary>Задает заглушка IConfigurationProvider.FindTypeMapFor(TypePair typePair)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#FindTypeMapFor(System.Type,System.Type)">
            <summary>Задает заглушка IConfigurationProvider.FindTypeMapFor(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#GetAllTypeMaps">
            <summary>Задает заглушка IConfigurationProvider.GetAllTypeMaps()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#GetMappers">
            <summary>Задает заглушка IConfigurationProvider.GetMappers()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#GetProfileConfiguration(System.String)">
            <summary>Задает заглушка IConfigurationProvider.GetProfileConfiguration(String profileName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#GetTypeMapMappers">
            <summary>Задает заглушка IConfigurationProvider.GetTypeMapMappers()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#ResolveTypeMap(AutoMapper.TypePair)">
            <summary>Задает заглушка IConfigurationProvider.ResolveTypeMap(TypePair typePair)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#ResolveTypeMap(AutoMapper.ResolutionResult,System.Type)">
            <summary>Задает заглушка IConfigurationProvider.ResolveTypeMap(ResolutionResult resolutionResult, Type destinationType)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#ResolveTypeMap(System.Type,System.Type)">
            <summary>Задает заглушка IConfigurationProvider.ResolveTypeMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#ResolveTypeMap(System.Object,System.Object,System.Type,System.Type)">
            <summary>Задает заглушка IConfigurationProvider.ResolveTypeMap(Object source, Object destination, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.ExpressionBuilderGet">
            <summary>Задает stub IConfigurationProvider.get_ExpressionBuilder()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIConfigurationProvider.FindTypeMapForOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.TypeMap})">
            <summary>Задает заглушки FindTypeMapFor()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.FindTypeMapForTypePair">
            <summary>Задает stub IConfigurationProvider.FindTypeMapFor(TypePair typePair)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.FindTypeMapForTypeType">
            <summary>Задает stub IConfigurationProvider.FindTypeMapFor(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.GetAllTypeMaps">
            <summary>Задает stub IConfigurationProvider.GetAllTypeMaps()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.GetMappers">
            <summary>Задает stub IConfigurationProvider.GetMappers()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.GetProfileConfigurationString">
            <summary>Задает stub IConfigurationProvider.GetProfileConfiguration(String profileName)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.GetTypeMapMappers">
            <summary>Задает stub IConfigurationProvider.GetTypeMapMappers()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.ResolveTypeMapObjectObjectTypeType">
            <summary>Задает stub IConfigurationProvider.ResolveTypeMap(Object source, Object destination, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.ResolveTypeMapResolutionResultType">
            <summary>Задает stub IConfigurationProvider.ResolveTypeMap(ResolutionResult resolutionResult, Type destinationType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.ResolveTypeMapTypePair">
            <summary>Задает stub IConfigurationProvider.ResolveTypeMap(TypePair typePair)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.ResolveTypeMapTypeType">
            <summary>Задает stub IConfigurationProvider.ResolveTypeMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIConfigurationProvider.ServiceCtorGet">
            <summary>Задает stub IConfigurationProvider.get_ServiceCtor()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#AllowNullCollections">
            <summary>Задает stub IConfigurationProvider.get_AllowNullCollections()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#AllowNullDestinationValues">
            <summary>Задает stub IConfigurationProvider.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#ExpressionBuilder">
            <summary>Задает stub IConfigurationProvider.get_ExpressionBuilder()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIConfigurationProvider.am::AutoMapper#IConfigurationProvider#ServiceCtor">
            <summary>Задает stub IConfigurationProvider.get_ServiceCtor()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubICtorParamConfigurationExpression`1">
            <summary>Тип заглушки AutoMapper.ICtorParamConfigurationExpression`1</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubICtorParamConfigurationExpression`1.#ctor">
            <summary>Инициализирует новый экземпляр type StubICtorParamConfigurationExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubICtorParamConfigurationExpression`1.am::AutoMapper#ICtorParamConfigurationExpression{TSource}#MapFrom``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Задает заглушка ICtorParamConfigurationExpression`1.MapFrom(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; sourceMember)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubICtorParamConfigurationExpression`1.MapFromOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Linq.Expressions.Expression{System.Func{`0,``0}}})">
            <summary>Задает заглушки MapFrom(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; sourceMember)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIGetTypeInfoMembers">
            <summary>Тип заглушки AutoMapper.IGetTypeInfoMembers</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIGetTypeInfoMembers.#ctor">
            <summary>Инициализирует новый экземпляр type StubIGetTypeInfoMembers</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIGetTypeInfoMembers.AddConditionFuncOfMemberInfoBoolean">
            <summary>Задает stub IGetTypeInfoMembers.AddCondition(Func`2&lt;MemberInfo,Boolean&gt; predicate)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIGetTypeInfoMembers.am::AutoMapper#IGetTypeInfoMembers#AddCondition(System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>Задает заглушка IGetTypeInfoMembers.AddCondition(Func`2&lt;MemberInfo,Boolean&gt; predicate)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIGetTypeInfoMembers.am::AutoMapper#IGetTypeInfoMembers#GetMemberInfos(AutoMapper.TypeDetails)">
            <summary>Задает заглушка IGetTypeInfoMembers.GetMemberInfos(TypeDetails typeInfo)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIGetTypeInfoMembers.GetMemberInfosTypeDetails">
            <summary>Задает stub IGetTypeInfoMembers.GetMemberInfos(TypeDetails typeInfo)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMapper">
            <summary>Тип заглушки AutoMapper.IMapper</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMapper</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.am::AutoMapper#IMapper#Map(System.Object,System.Type,System.Type)">
            <summary>Задает заглушка IMapper.Map(Object source, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.am::AutoMapper#IMapper#Map(System.Object,System.Object,System.Type,System.Type)">
            <summary>Задает заглушка IMapper.Map(Object source, Object destination, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.am::AutoMapper#IMapper#Map(System.Object,System.Object,System.Type,System.Type,System.Action{AutoMapper.IMappingOperationOptions})">
            <summary>Задает заглушка IMapper.Map(Object source, Object destination, Type sourceType, Type destinationType, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.am::AutoMapper#IMapper#Map``1(System.Object)">
            <summary>Задает заглушка IMapper.Map(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.am::AutoMapper#IMapper#Map(System.Object,System.Type,System.Type,System.Action{AutoMapper.IMappingOperationOptions})">
            <summary>Задает заглушка IMapper.Map(Object source, Type sourceType, Type destinationType, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.am::AutoMapper#IMapper#Map``1(System.Object,System.Action{AutoMapper.IMappingOperationOptions})">
            <summary>Задает заглушка IMapper.Map(Object source, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.am::AutoMapper#IMapper#Map``2(``0)">
            <summary>Задает заглушка IMapper.Map(!!0 source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.am::AutoMapper#IMapper#Map``2(``0,``1)">
            <summary>Задает заглушка IMapper.Map(!!0 source, !!1 destination)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.am::AutoMapper#IMapper#Map``2(``0,System.Action{AutoMapper.IMappingOperationOptions{``0,``1}})">
            <summary>Задает заглушка IMapper.Map(!!0 source, Action`1&lt;IMappingOperationOptions`2&lt;!!0,!!1&gt;&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.am::AutoMapper#IMapper#Map``2(``0,``1,System.Action{AutoMapper.IMappingOperationOptions{``0,``1}})">
            <summary>Задает заглушка IMapper.Map(!!0 source, !!1 destination, Action`1&lt;IMappingOperationOptions`2&lt;!!0,!!1&gt;&gt; opts)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapper.ConfigurationProviderGet">
            <summary>Задает stub IMapper.get_ConfigurationProvider()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapper.MapObjectObjectTypeType">
            <summary>Задает stub IMapper.Map(Object source, Object destination, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapper.MapObjectObjectTypeTypeActionOfIMappingOperationOptions">
            <summary>Задает stub IMapper.Map(Object source, Object destination, Type sourceType, Type destinationType, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapper.MapObjectTypeType">
            <summary>Задает stub IMapper.Map(Object source, Type sourceType, Type destinationType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapper.MapObjectTypeTypeActionOfIMappingOperationOptions">
            <summary>Задает stub IMapper.Map(Object source, Type sourceType, Type destinationType, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.MapOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>Задает заглушки Map(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.MapOf1ObjectActionOfIMappingOperationOptions``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Action{AutoMapper.IMappingOperationOptions},``0})">
            <summary>Задает заглушки Map(Object source, Action`1&lt;IMappingOperationOptions&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.MapOf2M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1})">
            <summary>Задает заглушки Map(!!0 source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.MapOf2M0ActionOfIMappingOperationOptionsOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Action{AutoMapper.IMappingOperationOptions{``0,``1}},``1})">
            <summary>Задает заглушки Map(!!0 source, Action`1&lt;IMappingOperationOptions`2&lt;!!0,!!1&gt;&gt; opts)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.MapOf2M0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1,``1})">
            <summary>Задает заглушки Map(!!0 source, !!1 destination)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapper.MapOf2M0M1ActionOfIMappingOperationOptionsOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1,System.Action{AutoMapper.IMappingOperationOptions{``0,``1}},``1})">
            <summary>Задает заглушки Map(!!0 source, !!1 destination, Action`1&lt;IMappingOperationOptions`2&lt;!!0,!!1&gt;&gt; opts)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMapper.am::AutoMapper#IMapper#ConfigurationProvider">
            <summary>Задает stub IMapper.get_ConfigurationProvider()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMapperConfiguration">
            <summary>Тип заглушки AutoMapper.IMapperConfiguration</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMapperConfiguration</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.AddConditionalObjectMapper">
            <summary>Задает stub IProfileExpression.AddConditionalObjectMapper()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.AddGlobalIgnoreString">
            <summary>Задает stub IProfileExpression.AddGlobalIgnore(String propertyNameStartingWith)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.AddMemberConfiguration">
            <summary>Задает stub IProfileExpression.AddMemberConfiguration()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.AddProfileOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает заглушки AddProfile()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.AddProfileProfile">
            <summary>Задает stub IConfiguration.AddProfile(Profile profile)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.AllowNullCollectionsGet">
            <summary>Задает stub IProfileExpression.get_AllowNullCollections()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.AllowNullCollectionsSetBoolean">
            <summary>Задает stub IProfileExpression.set_AllowNullCollections(Boolean value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.AllowNullDestinationValuesGet">
            <summary>Задает stub IProfileExpression.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.AllowNullDestinationValuesSetBoolean">
            <summary>Задает stub IProfileExpression.set_AllowNullDestinationValues(Boolean value)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.AttachBackingFieldToAllowNullCollections">
            <summary>Присоединение делегатов для эмуляции StubIMapperConfiguration.AllowNullCollections как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.AttachBackingFieldToAllowNullDestinationValues">
            <summary>Присоединение делегатов для эмуляции StubIMapperConfiguration.AllowNullDestinationValues как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.AttachBackingFieldToCreateMissingTypeMaps">
            <summary>Присоединение делегатов для эмуляции StubIMapperConfiguration.CreateMissingTypeMaps как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.AttachBackingFieldToDestinationMemberNamingConvention">
            <summary>Присоединение делегатов для эмуляции StubIMapperConfiguration.DestinationMemberNamingConvention как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.AttachBackingFieldToShouldMapField">
            <summary>Присоединение делегатов для эмуляции StubIMapperConfiguration.ShouldMapField как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.AttachBackingFieldToShouldMapProperty">
            <summary>Присоединение делегатов для эмуляции StubIMapperConfiguration.ShouldMapProperty как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.AttachBackingFieldToSourceMemberNamingConvention">
            <summary>Присоединение делегатов для эмуляции StubIMapperConfiguration.SourceMemberNamingConvention как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IConfiguration#AddProfile``1">
            <summary>Задает заглушка IConfiguration.AddProfile()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IConfiguration#AddProfile(AutoMapper.Profile)">
            <summary>Задает заглушка IConfiguration.AddProfile(Profile profile)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IConfiguration#ConstructServicesUsing(System.Func{System.Type,System.Object})">
            <summary>Задает заглушка IConfiguration.ConstructServicesUsing(Func`2&lt;Type,Object&gt; constructor)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IConfiguration#CreateMap(System.Type,System.Type,AutoMapper.MemberList,System.String)">
            <summary>Задает заглушка IConfiguration.CreateMap(Type sourceType, Type destinationType, MemberList memberList, String profileName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IConfiguration#CreateMap``2(System.String)">
            <summary>Задает заглушка IConfiguration.CreateMap(String profileName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IConfiguration#CreateMap``2(System.String,AutoMapper.MemberList)">
            <summary>Задает заглушка IConfiguration.CreateMap(String profileName, MemberList memberList)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IConfiguration#CreateProfile(System.String,System.Action{AutoMapper.IProfileExpression})">
            <summary>Задает заглушка IConfiguration.CreateProfile(String profileName, Action`1&lt;IProfileExpression&gt; profileConfiguration)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IConfiguration#CreateProfile(System.String)">
            <summary>Задает заглушка IConfiguration.CreateProfile(String profileName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IConfiguration#ForAllMaps(System.String,System.Action{AutoMapper.TypeMap,AutoMapper.IMappingExpression})">
            <summary>Задает заглушка IConfiguration.ForAllMaps(String profileName, Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#AddConditionalObjectMapper">
            <summary>Задает заглушка IProfileExpression.AddConditionalObjectMapper()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#AddGlobalIgnore(System.String)">
            <summary>Задает заглушка IProfileExpression.AddGlobalIgnore(String propertyNameStartingWith)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#AddMemberConfiguration">
            <summary>Задает заглушка IProfileExpression.AddMemberConfiguration()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#ClearPrefixes">
            <summary>Задает заглушка IProfileExpression.ClearPrefixes()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#CreateMap(System.Type,System.Type)">
            <summary>Задает заглушка IProfileExpression.CreateMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#CreateMap(System.Type,System.Type,AutoMapper.MemberList)">
            <summary>Задает заглушка IProfileExpression.CreateMap(Type sourceType, Type destinationType, MemberList memberList)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#CreateMap``2">
            <summary>Задает заглушка IProfileExpression.CreateMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#CreateMap``2(AutoMapper.MemberList)">
            <summary>Задает заглушка IProfileExpression.CreateMap(MemberList memberList)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#DisableConstructorMapping">
            <summary>Задает заглушка IProfileExpression.DisableConstructorMapping()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#ForAllMaps(System.Action{AutoMapper.TypeMap,AutoMapper.IMappingExpression})">
            <summary>Задает заглушка IProfileExpression.ForAllMaps(Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#IncludeSourceExtensionMethods(System.Reflection.Assembly)">
            <summary>Задает заглушка IProfileExpression.IncludeSourceExtensionMethods(Assembly assembly)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#RecognizeAlias(System.String,System.String)">
            <summary>Задает заглушка IProfileExpression.RecognizeAlias(String original, String alias)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#RecognizeDestinationPostfixes(System.String[])">
            <summary>Задает заглушка IProfileExpression.RecognizeDestinationPostfixes(String[] postfixes)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#RecognizeDestinationPrefixes(System.String[])">
            <summary>Задает заглушка IProfileExpression.RecognizeDestinationPrefixes(String[] prefixes)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#RecognizePostfixes(System.String[])">
            <summary>Задает заглушка IProfileExpression.RecognizePostfixes(String[] postfixes)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#RecognizePrefixes(System.String[])">
            <summary>Задает заглушка IProfileExpression.RecognizePrefixes(String[] prefixes)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#ReplaceMemberName(System.String,System.String)">
            <summary>Задает заглушка IProfileExpression.ReplaceMemberName(String original, String newValue)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.ClearPrefixes">
            <summary>Задает stub IProfileExpression.ClearPrefixes()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.ConstructServicesUsingFuncOfTypeObject">
            <summary>Задает stub IConfiguration.ConstructServicesUsing(Func`2&lt;Type,Object&gt; constructor)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.CreateMapOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает заглушки CreateMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.CreateMapOf2MemberList``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MemberList,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает заглушки CreateMap(MemberList memberList)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.CreateMapOf2String``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает заглушки CreateMap(String profileName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMapperConfiguration.CreateMapOf2StringMemberList``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,AutoMapper.MemberList,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает заглушки CreateMap(String profileName, MemberList memberList)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.CreateMapTypeType">
            <summary>Задает stub IProfileExpression.CreateMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.CreateMapTypeTypeMemberList">
            <summary>Задает stub IProfileExpression.CreateMap(Type sourceType, Type destinationType, MemberList memberList)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.CreateMapTypeTypeMemberListString">
            <summary>Задает stub IConfiguration.CreateMap(Type sourceType, Type destinationType, MemberList memberList, String profileName)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.CreateMissingTypeMapsGet">
            <summary>Задает stub IProfileExpression.get_CreateMissingTypeMaps()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.CreateMissingTypeMapsSetBoolean">
            <summary>Задает stub IProfileExpression.set_CreateMissingTypeMaps(Boolean value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.CreateProfileString">
            <summary>Задает stub IConfiguration.CreateProfile(String profileName)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.CreateProfileStringActionOfIProfileExpression">
            <summary>Задает stub IConfiguration.CreateProfile(String profileName, Action`1&lt;IProfileExpression&gt; profileConfiguration)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.DestinationMemberNamingConventionGet">
            <summary>Задает stub IProfileExpression.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.DestinationMemberNamingConventionSetINamingConvention">
            <summary>Задает stub IProfileExpression.set_DestinationMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.DisableConstructorMapping">
            <summary>Задает stub IProfileExpression.DisableConstructorMapping()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.ForAllMapsActionOfTypeMapIMappingExpression">
            <summary>Задает stub IProfileExpression.ForAllMaps(Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.ForAllMapsStringActionOfTypeMapIMappingExpression">
            <summary>Задает stub IConfiguration.ForAllMaps(String profileName, Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.IncludeSourceExtensionMethodsAssembly">
            <summary>Задает stub IProfileExpression.IncludeSourceExtensionMethods(Assembly assembly)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.ProfileNameGet">
            <summary>Задает stub IProfileExpression.get_ProfileName()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.RecognizeAliasStringString">
            <summary>Задает stub IProfileExpression.RecognizeAlias(String original, String alias)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.RecognizeDestinationPostfixesStringArray">
            <summary>Задает stub IProfileExpression.RecognizeDestinationPostfixes(String[] postfixes)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.RecognizeDestinationPrefixesStringArray">
            <summary>Задает stub IProfileExpression.RecognizeDestinationPrefixes(String[] prefixes)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.RecognizePostfixesStringArray">
            <summary>Задает stub IProfileExpression.RecognizePostfixes(String[] postfixes)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.RecognizePrefixesStringArray">
            <summary>Задает stub IProfileExpression.RecognizePrefixes(String[] prefixes)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.ReplaceMemberNameStringString">
            <summary>Задает stub IProfileExpression.ReplaceMemberName(String original, String newValue)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.ShouldMapFieldGet">
            <summary>Задает stub IProfileExpression.get_ShouldMapField()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.ShouldMapFieldSetFuncOfFieldInfoBoolean">
            <summary>Задает stub IProfileExpression.set_ShouldMapField(Func`2&lt;FieldInfo,Boolean&gt; value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.ShouldMapPropertyGet">
            <summary>Задает stub IProfileExpression.get_ShouldMapProperty()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.ShouldMapPropertySetFuncOfPropertyInfoBoolean">
            <summary>Задает stub IProfileExpression.set_ShouldMapProperty(Func`2&lt;PropertyInfo,Boolean&gt; value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.SourceMemberNamingConventionGet">
            <summary>Задает stub IProfileExpression.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMapperConfiguration.SourceMemberNamingConventionSetINamingConvention">
            <summary>Задает stub IProfileExpression.set_SourceMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#AllowNullCollections">
            <summary>Задает stub IProfileExpression.get_AllowNullCollections()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#AllowNullDestinationValues">
            <summary>Задает stub IProfileExpression.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#CreateMissingTypeMaps">
            <summary>Задает stub IProfileExpression.get_CreateMissingTypeMaps()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#DestinationMemberNamingConvention">
            <summary>Задает stub IProfileExpression.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#ProfileName">
            <summary>Задает stub IProfileExpression.get_ProfileName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#ShouldMapField">
            <summary>Задает stub IProfileExpression.get_ShouldMapField()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#ShouldMapProperty">
            <summary>Задает stub IProfileExpression.get_ShouldMapProperty()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMapperConfiguration.am::AutoMapper#IProfileExpression#SourceMemberNamingConvention">
            <summary>Задает stub IProfileExpression.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMappingAction`2">
            <summary>Тип заглушки AutoMapper.IMappingAction`2</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingAction`2.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMappingAction</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingAction`2.am::AutoMapper#IMappingAction{TSource@TDestination}#Process(`0,`1)">
            <summary>Задает заглушка IMappingAction`2.Process(!0 source, !1 destination)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingAction`2.ProcessT0T1">
            <summary>Задает stub IMappingAction`2.Process(!0 source, !1 destination)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMappingEngine">
            <summary>Тип заглушки AutoMapper.IMappingEngine</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingEngine.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMappingEngine</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingEngine.am::AutoMapper#IMappingEngine#CreateObject(AutoMapper.ResolutionContext)">
            <summary>Задает заглушка IMappingEngine.CreateObject(ResolutionContext context)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingEngine.am::AutoMapper#IMappingEngine#Map(AutoMapper.ResolutionContext)">
            <summary>Задает заглушка IMappingEngine.Map(ResolutionContext context)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingEngine.am::AutoMapper#IMappingEngine#ShouldMapSourceCollectionAsNull(AutoMapper.ResolutionContext)">
            <summary>Задает заглушка IMappingEngine.ShouldMapSourceCollectionAsNull(ResolutionContext context)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingEngine.am::AutoMapper#IMappingEngine#ShouldMapSourceValueAsNull(AutoMapper.ResolutionContext)">
            <summary>Задает заглушка IMappingEngine.ShouldMapSourceValueAsNull(ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingEngine.ConfigurationProviderGet">
            <summary>Задает stub IMappingEngine.get_ConfigurationProvider()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingEngine.CreateObjectResolutionContext">
            <summary>Задает stub IMappingEngine.CreateObject(ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingEngine.MapResolutionContext">
            <summary>Задает stub IMappingEngine.Map(ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingEngine.MapperGet">
            <summary>Задает stub IMappingEngine.get_Mapper()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingEngine.ShouldMapSourceCollectionAsNullResolutionContext">
            <summary>Задает stub IMappingEngine.ShouldMapSourceCollectionAsNull(ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingEngine.ShouldMapSourceValueAsNullResolutionContext">
            <summary>Задает stub IMappingEngine.ShouldMapSourceValueAsNull(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingEngine.am::AutoMapper#IMappingEngine#ConfigurationProvider">
            <summary>Задает stub IMappingEngine.get_ConfigurationProvider()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingEngine.am::AutoMapper#IMappingEngine#Mapper">
            <summary>Задает stub IMappingEngine.get_Mapper()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMappingExpression">
            <summary>Тип заглушки AutoMapper.IMappingExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMappingExpression</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.AfterMapActionOfObjectObject">
            <summary>Задает stub IMappingExpression.AfterMap(Action`2&lt;Object,Object&gt; afterFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.AfterMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression})">
            <summary>Задает заглушки AfterMap()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.AsType">
            <summary>Задает stub IMappingExpression.As(Type typeOverride)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#AfterMap``1">
            <summary>Задает заглушка IMappingExpression.AfterMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#AfterMap(System.Action{System.Object,System.Object})">
            <summary>Задает заглушка IMappingExpression.AfterMap(Action`2&lt;Object,Object&gt; afterFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#As(System.Type)">
            <summary>Задает заглушка IMappingExpression.As(Type typeOverride)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#BeforeMap``1">
            <summary>Задает заглушка IMappingExpression.BeforeMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#BeforeMap(System.Action{System.Object,System.Object})">
            <summary>Задает заглушка IMappingExpression.BeforeMap(Action`2&lt;Object,Object&gt; beforeFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#ConstructProjectionUsing(System.Linq.Expressions.LambdaExpression)">
            <summary>Задает заглушка IMappingExpression.ConstructProjectionUsing(LambdaExpression ctor)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#ConstructUsing(System.Func{AutoMapper.ResolutionContext,System.Object})">
            <summary>Задает заглушка IMappingExpression.ConstructUsing(Func`2&lt;ResolutionContext,Object&gt; ctor)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#ConstructUsing(System.Func{System.Object,System.Object})">
            <summary>Задает заглушка IMappingExpression.ConstructUsing(Func`2&lt;Object,Object&gt; ctor)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#ConstructUsingServiceLocator">
            <summary>Задает заглушка IMappingExpression.ConstructUsingServiceLocator()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#ConvertUsing``1">
            <summary>Задает заглушка IMappingExpression.ConvertUsing()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#ConvertUsing(System.Type)">
            <summary>Задает заглушка IMappingExpression.ConvertUsing(Type typeConverterType)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#ForAllMembers(System.Action{AutoMapper.IMemberConfigurationExpression})">
            <summary>Задает заглушка IMappingExpression.ForAllMembers(Action`1&lt;IMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#ForCtorParam(System.String,System.Action{AutoMapper.ICtorParamConfigurationExpression{System.Object}})">
            <summary>Задает заглушка IMappingExpression.ForCtorParam(String ctorParamName, Action`1&lt;ICtorParamConfigurationExpression`1&lt;Object&gt;&gt; paramOptions)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#ForMember(System.String,System.Action{AutoMapper.IMemberConfigurationExpression})">
            <summary>Задает заглушка IMappingExpression.ForMember(String name, Action`1&lt;IMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#ForSourceMember(System.String,System.Action{AutoMapper.ISourceMemberConfigurationExpression})">
            <summary>Задает заглушка IMappingExpression.ForSourceMember(String sourceMemberName, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#IgnoreAllPropertiesWithAnInaccessibleSetter">
            <summary>Задает заглушка IMappingExpression.IgnoreAllPropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#IgnoreAllSourcePropertiesWithAnInaccessibleSetter">
            <summary>Задает заглушка IMappingExpression.IgnoreAllSourcePropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#Include(System.Type,System.Type)">
            <summary>Задает заглушка IMappingExpression.Include(Type derivedSourceType, Type derivedDestinationType)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#IncludeBase(System.Type,System.Type)">
            <summary>Задает заглушка IMappingExpression.IncludeBase(Type sourceBase, Type destinationBase)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#MaxDepth(System.Int32)">
            <summary>Задает заглушка IMappingExpression.MaxDepth(Int32 depth)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#ProjectUsing(System.Linq.Expressions.Expression{System.Func{System.Object,System.Object}})">
            <summary>Задает заглушка IMappingExpression.ProjectUsing(Expression`1&lt;Func`2&lt;Object,Object&gt;&gt; projectionExpression)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#ReverseMap">
            <summary>Задает заглушка IMappingExpression.ReverseMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#Substitute(System.Func{System.Object,System.Object})">
            <summary>Задает заглушка IMappingExpression.Substitute(Func`2&lt;Object,Object&gt; substituteFunc)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#WithProfile(System.String)">
            <summary>Задает заглушка IMappingExpression.WithProfile(String profileName)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.BeforeMapActionOfObjectObject">
            <summary>Задает stub IMappingExpression.BeforeMap(Action`2&lt;Object,Object&gt; beforeFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.BeforeMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression})">
            <summary>Задает заглушки BeforeMap()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.ConstructProjectionUsingLambdaExpression">
            <summary>Задает stub IMappingExpression.ConstructProjectionUsing(LambdaExpression ctor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.ConstructUsingFuncOfObjectObject">
            <summary>Задает stub IMappingExpression.ConstructUsing(Func`2&lt;Object,Object&gt; ctor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.ConstructUsingFuncOfResolutionContextObject">
            <summary>Задает stub IMappingExpression.ConstructUsing(Func`2&lt;ResolutionContext,Object&gt; ctor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.ConstructUsingServiceLocator">
            <summary>Задает stub IMappingExpression.ConstructUsingServiceLocator()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression.ConvertUsingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает заглушки ConvertUsing()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.ConvertUsingType">
            <summary>Задает stub IMappingExpression.ConvertUsing(Type typeConverterType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.ForAllMembersActionOfIMemberConfigurationExpression">
            <summary>Задает stub IMappingExpression.ForAllMembers(Action`1&lt;IMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.ForCtorParamStringActionOfICtorParamConfigurationExpressionOfObject">
            <summary>Задает stub IMappingExpression.ForCtorParam(String ctorParamName, Action`1&lt;ICtorParamConfigurationExpression`1&lt;Object&gt;&gt; paramOptions)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.ForMemberStringActionOfIMemberConfigurationExpression">
            <summary>Задает stub IMappingExpression.ForMember(String name, Action`1&lt;IMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.ForSourceMemberStringActionOfISourceMemberConfigurationExpression">
            <summary>Задает stub IMappingExpression.ForSourceMember(String sourceMemberName, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.IgnoreAllPropertiesWithAnInaccessibleSetter">
            <summary>Задает stub IMappingExpression.IgnoreAllPropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.IgnoreAllSourcePropertiesWithAnInaccessibleSetter">
            <summary>Задает stub IMappingExpression.IgnoreAllSourcePropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.IncludeBaseTypeType">
            <summary>Задает stub IMappingExpression.IncludeBase(Type sourceBase, Type destinationBase)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.IncludeTypeType">
            <summary>Задает stub IMappingExpression.Include(Type derivedSourceType, Type derivedDestinationType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.MaxDepthInt32">
            <summary>Задает stub IMappingExpression.MaxDepth(Int32 depth)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.ProjectUsingExpressionOfFuncOfObjectObject">
            <summary>Задает stub IMappingExpression.ProjectUsing(Expression`1&lt;Func`2&lt;Object,Object&gt;&gt; projectionExpression)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.ReverseMap">
            <summary>Задает stub IMappingExpression.ReverseMap()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.SubstituteFuncOfObjectObject">
            <summary>Задает stub IMappingExpression.Substitute(Func`2&lt;Object,Object&gt; substituteFunc)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.TypeMapGet">
            <summary>Задает stub IMappingExpression.get_TypeMap()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression.WithProfileString">
            <summary>Задает stub IMappingExpression.WithProfile(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingExpression.am::AutoMapper#IMappingExpression#TypeMap">
            <summary>Задает stub IMappingExpression.get_TypeMap()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMappingExpression`2">
            <summary>Тип заглушки AutoMapper.IMappingExpression`2</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMappingExpression</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.AfterMapActionOfT0T1">
            <summary>Задает stub IMappingExpression`2.AfterMap(Action`2&lt;!0,!1&gt; afterFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.AfterMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{`0,`1}})">
            <summary>Задает заглушки AfterMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.AsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает заглушки As()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#AfterMap``1">
            <summary>Задает заглушка IMappingExpression`2.AfterMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#AfterMap(System.Action{`0,`1})">
            <summary>Задает заглушка IMappingExpression`2.AfterMap(Action`2&lt;!0,!1&gt; afterFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#As``1">
            <summary>Задает заглушка IMappingExpression`2.As()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#BeforeMap``1">
            <summary>Задает заглушка IMappingExpression`2.BeforeMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#BeforeMap(System.Action{`0,`1})">
            <summary>Задает заглушка IMappingExpression`2.BeforeMap(Action`2&lt;!0,!1&gt; beforeFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ConstructProjectionUsing(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>Задает заглушка IMappingExpression`2.ConstructProjectionUsing(Expression`1&lt;Func`2&lt;!0,!1&gt;&gt; ctor)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ConstructUsing(System.Func{AutoMapper.ResolutionContext,`1})">
            <summary>Задает заглушка IMappingExpression`2.ConstructUsing(Func`2&lt;ResolutionContext,!1&gt; ctor)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ConstructUsing(System.Func{`0,`1})">
            <summary>Задает заглушка IMappingExpression`2.ConstructUsing(Func`2&lt;!0,!1&gt; ctor)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ConstructUsingServiceLocator">
            <summary>Задает заглушка IMappingExpression`2.ConstructUsingServiceLocator()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ConvertUsing``1">
            <summary>Задает заглушка IMappingExpression`2.ConvertUsing()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ConvertUsing(AutoMapper.ITypeConverter{`0,`1})">
            <summary>Задает заглушка IMappingExpression`2.ConvertUsing(ITypeConverter`2&lt;!0,!1&gt; converter)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ConvertUsing(System.Func{AutoMapper.ResolutionContext,`1})">
            <summary>Задает заглушка IMappingExpression`2.ConvertUsing(Func`2&lt;ResolutionContext,!1&gt; mappingFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ConvertUsing(System.Func{`0,`1})">
            <summary>Задает заглушка IMappingExpression`2.ConvertUsing(Func`2&lt;!0,!1&gt; mappingFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ConvertUsing(System.Func{AutoMapper.ResolutionContext,`0,`1})">
            <summary>Задает заглушка IMappingExpression`2.ConvertUsing(Func`3&lt;ResolutionContext,!0,!1&gt; mappingFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ForAllMembers(System.Action{AutoMapper.IMemberConfigurationExpression{`0}})">
            <summary>Задает заглушка IMappingExpression`2.ForAllMembers(Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ForCtorParam(System.String,System.Action{AutoMapper.ICtorParamConfigurationExpression{`0}})">
            <summary>Задает заглушка IMappingExpression`2.ForCtorParam(String ctorParamName, Action`1&lt;ICtorParamConfigurationExpression`1&lt;!0&gt;&gt; paramOptions)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ForMember(System.Linq.Expressions.Expression{System.Func{`1,System.Object}},System.Action{AutoMapper.IMemberConfigurationExpression{`0}})">
            <summary>Задает заглушка IMappingExpression`2.ForMember(Expression`1&lt;Func`2&lt;!1,Object&gt;&gt; destinationMember, Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ForMember(System.String,System.Action{AutoMapper.IMemberConfigurationExpression{`0}})">
            <summary>Задает заглушка IMappingExpression`2.ForMember(String name, Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ForSourceMember(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{AutoMapper.ISourceMemberConfigurationExpression})">
            <summary>Задает заглушка IMappingExpression`2.ForSourceMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ForSourceMember(System.String,System.Action{AutoMapper.ISourceMemberConfigurationExpression})">
            <summary>Задает заглушка IMappingExpression`2.ForSourceMember(String sourceMemberName, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#IgnoreAllPropertiesWithAnInaccessibleSetter">
            <summary>Задает заглушка IMappingExpression`2.IgnoreAllPropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#IgnoreAllSourcePropertiesWithAnInaccessibleSetter">
            <summary>Задает заглушка IMappingExpression`2.IgnoreAllSourcePropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#Include``2">
            <summary>Задает заглушка IMappingExpression`2.Include()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#Include(System.Type,System.Type)">
            <summary>Задает заглушка IMappingExpression`2.Include(Type derivedSourceType, Type derivedDestinationType)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#IncludeBase``2">
            <summary>Задает заглушка IMappingExpression`2.IncludeBase()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#MaxDepth(System.Int32)">
            <summary>Задает заглушка IMappingExpression`2.MaxDepth(Int32 depth)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ProjectUsing(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>Задает заглушка IMappingExpression`2.ProjectUsing(Expression`1&lt;Func`2&lt;!0,!1&gt;&gt; projectionExpression)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#ReverseMap">
            <summary>Задает заглушка IMappingExpression`2.ReverseMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#Substitute(System.Func{`0,System.Object})">
            <summary>Задает заглушка IMappingExpression`2.Substitute(Func`2&lt;!0,Object&gt; substituteFunc)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#WithProfile(System.String)">
            <summary>Задает заглушка IMappingExpression`2.WithProfile(String profileName)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.BeforeMapActionOfT0T1">
            <summary>Задает stub IMappingExpression`2.BeforeMap(Action`2&lt;!0,!1&gt; beforeFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.BeforeMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{`0,`1}})">
            <summary>Задает заглушки BeforeMap()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ConstructProjectionUsingExpressionOfFuncOfT0T1">
            <summary>Задает stub IMappingExpression`2.ConstructProjectionUsing(Expression`1&lt;Func`2&lt;!0,!1&gt;&gt; ctor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ConstructUsingFuncOfResolutionContextT1">
            <summary>Задает stub IMappingExpression`2.ConstructUsing(Func`2&lt;ResolutionContext,!1&gt; ctor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ConstructUsingFuncOfT0T1">
            <summary>Задает stub IMappingExpression`2.ConstructUsing(Func`2&lt;!0,!1&gt; ctor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ConstructUsingServiceLocator">
            <summary>Задает stub IMappingExpression`2.ConstructUsingServiceLocator()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ConvertUsingFuncOfResolutionContextT0T1">
            <summary>Задает stub IMappingExpression`2.ConvertUsing(Func`3&lt;ResolutionContext,!0,!1&gt; mappingFunction)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ConvertUsingFuncOfResolutionContextT1">
            <summary>Задает stub IMappingExpression`2.ConvertUsing(Func`2&lt;ResolutionContext,!1&gt; mappingFunction)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ConvertUsingFuncOfT0T1">
            <summary>Задает stub IMappingExpression`2.ConvertUsing(Func`2&lt;!0,!1&gt; mappingFunction)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ConvertUsingITypeConverterOfT0T1">
            <summary>Задает stub IMappingExpression`2.ConvertUsing(ITypeConverter`2&lt;!0,!1&gt; converter)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.ConvertUsingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает заглушки ConvertUsing()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ForAllMembersActionOfIMemberConfigurationExpressionOfT0">
            <summary>Задает stub IMappingExpression`2.ForAllMembers(Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ForCtorParamStringActionOfICtorParamConfigurationExpressionOfT0">
            <summary>Задает stub IMappingExpression`2.ForCtorParam(String ctorParamName, Action`1&lt;ICtorParamConfigurationExpression`1&lt;!0&gt;&gt; paramOptions)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ForMemberExpressionOfFuncOfT1ObjectActionOfIMemberConfigurationExpressionOfT0">
            <summary>Задает stub IMappingExpression`2.ForMember(Expression`1&lt;Func`2&lt;!1,Object&gt;&gt; destinationMember, Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ForMemberStringActionOfIMemberConfigurationExpressionOfT0">
            <summary>Задает stub IMappingExpression`2.ForMember(String name, Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ForSourceMemberExpressionOfFuncOfT0ObjectActionOfISourceMemberConfigurationExpression">
            <summary>Задает stub IMappingExpression`2.ForSourceMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ForSourceMemberStringActionOfISourceMemberConfigurationExpression">
            <summary>Задает stub IMappingExpression`2.ForSourceMember(String sourceMemberName, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.IgnoreAllPropertiesWithAnInaccessibleSetter">
            <summary>Задает stub IMappingExpression`2.IgnoreAllPropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.IgnoreAllSourcePropertiesWithAnInaccessibleSetter">
            <summary>Задает stub IMappingExpression`2.IgnoreAllSourcePropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.IncludeBaseOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{`0,`1}})">
            <summary>Задает заглушки IncludeBase()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingExpression`2.IncludeOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{`0,`1}})">
            <summary>Задает заглушки Include()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.IncludeTypeType">
            <summary>Задает stub IMappingExpression`2.Include(Type derivedSourceType, Type derivedDestinationType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.MaxDepthInt32">
            <summary>Задает stub IMappingExpression`2.MaxDepth(Int32 depth)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ProjectUsingExpressionOfFuncOfT0T1">
            <summary>Задает stub IMappingExpression`2.ProjectUsing(Expression`1&lt;Func`2&lt;!0,!1&gt;&gt; projectionExpression)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.ReverseMap">
            <summary>Задает stub IMappingExpression`2.ReverseMap()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.SubstituteFuncOfT0Object">
            <summary>Задает stub IMappingExpression`2.Substitute(Func`2&lt;!0,Object&gt; substituteFunc)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.TypeMapGet">
            <summary>Задает stub IMappingExpression`2.get_TypeMap()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingExpression`2.WithProfileString">
            <summary>Задает stub IMappingExpression`2.WithProfile(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingExpression`2.am::AutoMapper#IMappingExpression{TSource@TDestination}#TypeMap">
            <summary>Задает stub IMappingExpression`2.get_TypeMap()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMappingOperationOptions">
            <summary>Тип заглушки AutoMapper.IMappingOperationOptions</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOperationOptions.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMappingOperationOptions</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions.AfterMapActionOfObjectObject">
            <summary>Задает stub IMappingOperationOptions.AfterMap(Action`2&lt;Object,Object&gt; afterFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOperationOptions.AttachBackingFieldToDisableCache">
            <summary>Присоединение делегатов для эмуляции StubIMappingOperationOptions.DisableCache как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOperationOptions.am::AutoMapper#IMappingOperationOptions#AfterMap(System.Action{System.Object,System.Object})">
            <summary>Задает заглушка IMappingOperationOptions.AfterMap(Action`2&lt;Object,Object&gt; afterFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOperationOptions.am::AutoMapper#IMappingOperationOptions#BeforeMap(System.Action{System.Object,System.Object})">
            <summary>Задает заглушка IMappingOperationOptions.BeforeMap(Action`2&lt;Object,Object&gt; beforeFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOperationOptions.am::AutoMapper#IMappingOperationOptions#ConstructServicesUsing(System.Func{System.Type,System.Object})">
            <summary>Задает заглушка IMappingOperationOptions.ConstructServicesUsing(Func`2&lt;Type,Object&gt; constructor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions.BeforeMapActionOfObjectObject">
            <summary>Задает stub IMappingOperationOptions.BeforeMap(Action`2&lt;Object,Object&gt; beforeFunction)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions.ConstructServicesUsingFuncOfTypeObject">
            <summary>Задает stub IMappingOperationOptions.ConstructServicesUsing(Func`2&lt;Type,Object&gt; constructor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions.DisableCacheGet">
            <summary>Задает stub IMappingOperationOptions.get_DisableCache()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions.DisableCacheSetBoolean">
            <summary>Задает stub IMappingOperationOptions.set_DisableCache(Boolean value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions.ItemsGet">
            <summary>Задает stub IMappingOperationOptions.get_Items()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOperationOptions.am::AutoMapper#IMappingOperationOptions#DisableCache">
            <summary>Задает stub IMappingOperationOptions.get_DisableCache()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOperationOptions.am::AutoMapper#IMappingOperationOptions#Items">
            <summary>Задает stub IMappingOperationOptions.get_Items()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMappingOperationOptions`2">
            <summary>Тип заглушки AutoMapper.IMappingOperationOptions`2</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOperationOptions`2.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMappingOperationOptions</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions`2.AfterMapActionOfObjectObject">
            <summary>Задает stub IMappingOperationOptions.AfterMap(Action`2&lt;Object,Object&gt; afterFunction)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions`2.AfterMapActionOfT0T1">
            <summary>Задает stub IMappingOperationOptions`2.AfterMap(Action`2&lt;!0,!1&gt; afterFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOperationOptions`2.AttachBackingFieldToDisableCache">
            <summary>Присоединение делегатов для эмуляции StubIMappingOperationOptions.DisableCache как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOperationOptions`2.am::AutoMapper#IMappingOperationOptions#AfterMap(System.Action{System.Object,System.Object})">
            <summary>Задает заглушка IMappingOperationOptions.AfterMap(Action`2&lt;Object,Object&gt; afterFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOperationOptions`2.am::AutoMapper#IMappingOperationOptions#BeforeMap(System.Action{System.Object,System.Object})">
            <summary>Задает заглушка IMappingOperationOptions.BeforeMap(Action`2&lt;Object,Object&gt; beforeFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOperationOptions`2.am::AutoMapper#IMappingOperationOptions#ConstructServicesUsing(System.Func{System.Type,System.Object})">
            <summary>Задает заглушка IMappingOperationOptions.ConstructServicesUsing(Func`2&lt;Type,Object&gt; constructor)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOperationOptions`2.am::AutoMapper#IMappingOperationOptions{TSource@TDestination}#AfterMap(System.Action{`0,`1})">
            <summary>Задает заглушка IMappingOperationOptions`2.AfterMap(Action`2&lt;!0,!1&gt; afterFunction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOperationOptions`2.am::AutoMapper#IMappingOperationOptions{TSource@TDestination}#BeforeMap(System.Action{`0,`1})">
            <summary>Задает заглушка IMappingOperationOptions`2.BeforeMap(Action`2&lt;!0,!1&gt; beforeFunction)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions`2.BeforeMapActionOfObjectObject">
            <summary>Задает stub IMappingOperationOptions.BeforeMap(Action`2&lt;Object,Object&gt; beforeFunction)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions`2.BeforeMapActionOfT0T1">
            <summary>Задает stub IMappingOperationOptions`2.BeforeMap(Action`2&lt;!0,!1&gt; beforeFunction)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions`2.ConstructServicesUsingFuncOfTypeObject">
            <summary>Задает stub IMappingOperationOptions.ConstructServicesUsing(Func`2&lt;Type,Object&gt; constructor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions`2.DisableCacheGet">
            <summary>Задает stub IMappingOperationOptions.get_DisableCache()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions`2.DisableCacheSetBoolean">
            <summary>Задает stub IMappingOperationOptions.set_DisableCache(Boolean value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOperationOptions`2.ItemsGet">
            <summary>Задает stub IMappingOperationOptions.get_Items()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOperationOptions`2.am::AutoMapper#IMappingOperationOptions#DisableCache">
            <summary>Задает stub IMappingOperationOptions.get_DisableCache()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOperationOptions`2.am::AutoMapper#IMappingOperationOptions#Items">
            <summary>Задает stub IMappingOperationOptions.get_Items()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMappingOptions">
            <summary>Тип заглушки AutoMapper.IMappingOptions</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMappingOptions.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMappingOptions</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOptions.AliasesGet">
            <summary>Задает stub IMappingOptions.get_Aliases()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOptions.ConstructorMappingEnabledGet">
            <summary>Задает stub IMappingOptions.get_ConstructorMappingEnabled()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOptions.DestinationMemberNamingConventionGet">
            <summary>Задает stub IMappingOptions.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOptions.DestinationPostfixesGet">
            <summary>Задает stub IMappingOptions.get_DestinationPostfixes()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOptions.DestinationPrefixesGet">
            <summary>Задает stub IMappingOptions.get_DestinationPrefixes()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOptions.MemberNameReplacersGet">
            <summary>Задает stub IMappingOptions.get_MemberNameReplacers()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOptions.PostfixesGet">
            <summary>Задает stub IMappingOptions.get_Postfixes()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOptions.PrefixesGet">
            <summary>Задает stub IMappingOptions.get_Prefixes()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOptions.ShouldMapFieldGet">
            <summary>Задает stub IMappingOptions.get_ShouldMapField()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOptions.ShouldMapPropertyGet">
            <summary>Задает stub IMappingOptions.get_ShouldMapProperty()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOptions.SourceExtensionMethodsGet">
            <summary>Задает stub IMappingOptions.get_SourceExtensionMethods()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMappingOptions.SourceMemberNamingConventionGet">
            <summary>Задает stub IMappingOptions.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOptions.am::AutoMapper#IMappingOptions#Aliases">
            <summary>Задает stub IMappingOptions.get_Aliases()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOptions.am::AutoMapper#IMappingOptions#ConstructorMappingEnabled">
            <summary>Задает stub IMappingOptions.get_ConstructorMappingEnabled()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOptions.am::AutoMapper#IMappingOptions#DestinationMemberNamingConvention">
            <summary>Задает stub IMappingOptions.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOptions.am::AutoMapper#IMappingOptions#DestinationPostfixes">
            <summary>Задает stub IMappingOptions.get_DestinationPostfixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOptions.am::AutoMapper#IMappingOptions#DestinationPrefixes">
            <summary>Задает stub IMappingOptions.get_DestinationPrefixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOptions.am::AutoMapper#IMappingOptions#MemberNameReplacers">
            <summary>Задает stub IMappingOptions.get_MemberNameReplacers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOptions.am::AutoMapper#IMappingOptions#Postfixes">
            <summary>Задает stub IMappingOptions.get_Postfixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOptions.am::AutoMapper#IMappingOptions#Prefixes">
            <summary>Задает stub IMappingOptions.get_Prefixes()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOptions.am::AutoMapper#IMappingOptions#ShouldMapField">
            <summary>Задает stub IMappingOptions.get_ShouldMapField()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOptions.am::AutoMapper#IMappingOptions#ShouldMapProperty">
            <summary>Задает stub IMappingOptions.get_ShouldMapProperty()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOptions.am::AutoMapper#IMappingOptions#SourceExtensionMethods">
            <summary>Задает stub IMappingOptions.get_SourceExtensionMethods()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMappingOptions.am::AutoMapper#IMappingOptions#SourceMemberNamingConvention">
            <summary>Задает stub IMappingOptions.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMemberAccessor">
            <summary>Тип заглушки AutoMapper.IMemberAccessor</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberAccessor.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMemberAccessor</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberAccessor.am::AutoMapper#IMemberAccessor#SetValue(System.Object,System.Object)">
            <summary>Задает заглушка IMemberAccessor.SetValue(Object destination, Object value)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberAccessor.am::AutoMapper#IMemberGetter#GetValue(System.Object)">
            <summary>Задает заглушка IMemberGetter.GetValue(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberAccessor.am::AutoMapper#IValueResolver#Resolve(AutoMapper.ResolutionResult)">
            <summary>Задает заглушка IValueResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberAccessor.GetValueObject">
            <summary>Задает stub IMemberGetter.GetValue(Object source)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberAccessor.MemberInfoGet">
            <summary>Задает stub IMemberGetter.get_MemberInfo()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberAccessor.MemberTypeGet">
            <summary>Задает stub IMemberResolver.get_MemberType()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberAccessor.NameGet">
            <summary>Задает stub IMemberGetter.get_Name()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberAccessor.ResolveResolutionResult">
            <summary>Задает stub IValueResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberAccessor.SetValueObjectObject">
            <summary>Задает stub IMemberAccessor.SetValue(Object destination, Object value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMemberAccessor.am::AutoMapper#IMemberGetter#MemberInfo">
            <summary>Задает stub IMemberGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMemberAccessor.am::AutoMapper#IMemberResolver#MemberType">
            <summary>Задает stub IMemberResolver.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMemberAccessor.am::AutoMapper#IMemberGetter#Name">
            <summary>Задает stub IMemberGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMemberConfiguration">
            <summary>Тип заглушки AutoMapper.IMemberConfiguration</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfiguration.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMemberConfiguration</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfiguration.AddMemberOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},AutoMapper.IMemberConfiguration})">
            <summary>Задает заглушки AddMember(Action`1&lt;!!0&gt; setupAction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfiguration.AddNameOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},AutoMapper.IMemberConfiguration})">
            <summary>Задает заглушки AddName(Action`1&lt;!!0&gt; setupAction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfiguration.AttachBackingFieldToNameMapper">
            <summary>Присоединение делегатов для эмуляции StubIMemberConfiguration.NameMapper как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfiguration.am::AutoMapper#IMemberConfiguration#AddMember``1(System.Action{``0})">
            <summary>Задает заглушка IMemberConfiguration.AddMember(Action`1&lt;!!0&gt; setupAction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfiguration.am::AutoMapper#IMemberConfiguration#AddName``1(System.Action{``0})">
            <summary>Задает заглушка IMemberConfiguration.AddName(Action`1&lt;!!0&gt; setupAction)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfiguration.am::AutoMapper#IMemberConfiguration#MapDestinationPropertyToSource(AutoMapper.IProfileConfiguration,AutoMapper.TypeDetails,System.Type,System.String,System.Collections.Generic.LinkedList{AutoMapper.IValueResolver})">
            <summary>Задает заглушка IMemberConfiguration.MapDestinationPropertyToSource(IProfileConfiguration options, TypeDetails sourceType, Type destType, String nameToSearch, LinkedList`1&lt;IValueResolver&gt; resolvers)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfiguration.MapDestinationPropertyToSourceIProfileConfigurationTypeDetailsTypeStringLinkedListOfIValueResolver">
            <summary>Задает stub IMemberConfiguration.MapDestinationPropertyToSource(IProfileConfiguration options, TypeDetails sourceType, Type destType, String nameToSearch, LinkedList`1&lt;IValueResolver&gt; resolvers)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfiguration.MemberMappersGet">
            <summary>Задает stub IMemberConfiguration.get_MemberMappers()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfiguration.NameMapperGet">
            <summary>Задает stub IMemberConfiguration.get_NameMapper()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfiguration.NameMapperSetIParentSourceToDestinationNameMapper">
            <summary>Задает stub IMemberConfiguration.set_NameMapper(IParentSourceToDestinationNameMapper value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMemberConfiguration.am::AutoMapper#IMemberConfiguration#MemberMappers">
            <summary>Задает stub IMemberConfiguration.get_MemberMappers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMemberConfiguration.am::AutoMapper#IMemberConfiguration#NameMapper">
            <summary>Задает stub IMemberConfiguration.get_NameMapper()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMemberConfigurationExpression">
            <summary>Тип заглушки AutoMapper.IMemberConfigurationExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMemberConfigurationExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression#MapFrom(System.String)">
            <summary>Задает заглушка IMemberConfigurationExpression.MapFrom(String sourceMember)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#Condition(System.Func{AutoMapper.ResolutionContext,System.Boolean})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.Condition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#Condition(System.Func{System.Object,System.Boolean})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.Condition(Func`2&lt;!0,Boolean&gt; condition)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#DoNotUseDestinationValue">
            <summary>Задает заглушка IMemberConfigurationExpression`1.DoNotUseDestinationValue()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#ExplicitExpansion">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ExplicitExpansion()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#Ignore">
            <summary>Задает заглушка IMemberConfigurationExpression`1.Ignore()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#MapFrom``1(System.Linq.Expressions.Expression{System.Func{System.Object,``0}})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.MapFrom(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; sourceMember)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#MapFrom``1(System.String)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.MapFrom(String property)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#NullSubstitute(System.Object)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.NullSubstitute(Object nullSubstitute)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#PreCondition(System.Func{AutoMapper.ResolutionContext,System.Boolean})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.PreCondition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#PreCondition(System.Func{System.Object,System.Boolean})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.PreCondition(Func`2&lt;!0,Boolean&gt; condition)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#ResolveUsing(System.Func{AutoMapper.ResolutionResult,System.Object})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ResolveUsing(Func`2&lt;ResolutionResult,Object&gt; resolver)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#ResolveUsing(System.Func{System.Object,System.Object})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ResolveUsing(Func`2&lt;!0,Object&gt; resolver)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#ResolveUsing(System.Func{AutoMapper.ResolutionResult,System.Object,System.Object})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ResolveUsing(Func`3&lt;ResolutionResult,!0,Object&gt; resolver)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#ResolveUsing(AutoMapper.IValueResolver)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ResolveUsing(IValueResolver valueResolver)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#ResolveUsing(System.Type)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ResolveUsing(Type valueResolverType)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#ResolveUsing``1">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ResolveUsing()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#SetMappingOrder(System.Int32)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.SetMappingOrder(Int32 mappingOrder)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#UseDestinationValue">
            <summary>Задает заглушка IMemberConfigurationExpression`1.UseDestinationValue()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#UseValue(System.Object)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.UseValue(Object value)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.am::AutoMapper#IMemberConfigurationExpression{System#Object}#UseValue``1(``0)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.UseValue(!!0 value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.ConditionFuncOfObjectBoolean">
            <summary>Задает stub IMemberConfigurationExpression`1.Condition(Func`2&lt;!0,Boolean&gt; condition)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.ConditionFuncOfResolutionContextBoolean">
            <summary>Задает stub IMemberConfigurationExpression`1.Condition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.DoNotUseDestinationValue">
            <summary>Задает stub IMemberConfigurationExpression`1.DoNotUseDestinationValue()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.ExplicitExpansion">
            <summary>Задает stub IMemberConfigurationExpression`1.ExplicitExpansion()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.Ignore">
            <summary>Задает stub IMemberConfigurationExpression`1.Ignore()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.MapFromOf1ExpressionOfFuncOfObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Linq.Expressions.Expression{System.Func{System.Object,``0}}})">
            <summary>Задает заглушки MapFrom(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; sourceMember)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.MapFromOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String})">
            <summary>Задает заглушки MapFrom(String property)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.MapFromString">
            <summary>Задает stub IMemberConfigurationExpression.MapFrom(String sourceMember)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.NullSubstituteObject">
            <summary>Задает stub IMemberConfigurationExpression`1.NullSubstitute(Object nullSubstitute)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.PreConditionFuncOfObjectBoolean">
            <summary>Задает stub IMemberConfigurationExpression`1.PreCondition(Func`2&lt;!0,Boolean&gt; condition)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.PreConditionFuncOfResolutionContextBoolean">
            <summary>Задает stub IMemberConfigurationExpression`1.PreCondition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.ResolveUsingFuncOfObjectObject">
            <summary>Задает stub IMemberConfigurationExpression`1.ResolveUsing(Func`2&lt;!0,Object&gt; resolver)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.ResolveUsingFuncOfResolutionResultObject">
            <summary>Задает stub IMemberConfigurationExpression`1.ResolveUsing(Func`2&lt;ResolutionResult,Object&gt; resolver)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.ResolveUsingFuncOfResolutionResultObjectObject">
            <summary>Задает stub IMemberConfigurationExpression`1.ResolveUsing(Func`3&lt;ResolutionResult,!0,Object&gt; resolver)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.ResolveUsingIValueResolver">
            <summary>Задает stub IMemberConfigurationExpression`1.ResolveUsing(IValueResolver valueResolver)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.ResolveUsingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IResolverConfigurationExpression{System.Object,``0}})">
            <summary>Задает заглушки ResolveUsing()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.ResolveUsingType">
            <summary>Задает stub IMemberConfigurationExpression`1.ResolveUsing(Type valueResolverType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.SetMappingOrderInt32">
            <summary>Задает stub IMemberConfigurationExpression`1.SetMappingOrder(Int32 mappingOrder)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.UseDestinationValue">
            <summary>Задает stub IMemberConfigurationExpression`1.UseDestinationValue()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression.UseValueObject">
            <summary>Задает stub IMemberConfigurationExpression`1.UseValue(Object value)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression.UseValueOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Задает заглушки UseValue(!!0 value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMemberConfigurationExpression`1">
            <summary>Тип заглушки AutoMapper.IMemberConfigurationExpression`1</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMemberConfigurationExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#Condition(System.Func{`0,System.Boolean})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.Condition(Func`2&lt;!0,Boolean&gt; condition)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#Condition(System.Func{AutoMapper.ResolutionContext,System.Boolean})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.Condition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#DoNotUseDestinationValue">
            <summary>Задает заглушка IMemberConfigurationExpression`1.DoNotUseDestinationValue()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#ExplicitExpansion">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ExplicitExpansion()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#Ignore">
            <summary>Задает заглушка IMemberConfigurationExpression`1.Ignore()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#MapFrom``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.MapFrom(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; sourceMember)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#MapFrom``1(System.String)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.MapFrom(String property)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#NullSubstitute(System.Object)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.NullSubstitute(Object nullSubstitute)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#PreCondition(System.Func{`0,System.Boolean})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.PreCondition(Func`2&lt;!0,Boolean&gt; condition)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#PreCondition(System.Func{AutoMapper.ResolutionContext,System.Boolean})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.PreCondition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#ResolveUsing(System.Func{AutoMapper.ResolutionResult,System.Object})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ResolveUsing(Func`2&lt;ResolutionResult,Object&gt; resolver)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#ResolveUsing(System.Func{AutoMapper.ResolutionResult,`0,System.Object})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ResolveUsing(Func`3&lt;ResolutionResult,!0,Object&gt; resolver)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#ResolveUsing(AutoMapper.IValueResolver)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ResolveUsing(IValueResolver valueResolver)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#ResolveUsing(System.Type)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ResolveUsing(Type valueResolverType)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#ResolveUsing(System.Func{`0,System.Object})">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ResolveUsing(Func`2&lt;!0,Object&gt; resolver)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#ResolveUsing``1">
            <summary>Задает заглушка IMemberConfigurationExpression`1.ResolveUsing()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#SetMappingOrder(System.Int32)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.SetMappingOrder(Int32 mappingOrder)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#UseDestinationValue">
            <summary>Задает заглушка IMemberConfigurationExpression`1.UseDestinationValue()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#UseValue(System.Object)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.UseValue(Object value)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.am::AutoMapper#IMemberConfigurationExpression{TSource}#UseValue``1(``0)">
            <summary>Задает заглушка IMemberConfigurationExpression`1.UseValue(!!0 value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.ConditionFuncOfResolutionContextBoolean">
            <summary>Задает stub IMemberConfigurationExpression`1.Condition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.ConditionFuncOfT0Boolean">
            <summary>Задает stub IMemberConfigurationExpression`1.Condition(Func`2&lt;!0,Boolean&gt; condition)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.DoNotUseDestinationValue">
            <summary>Задает stub IMemberConfigurationExpression`1.DoNotUseDestinationValue()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.ExplicitExpansion">
            <summary>Задает stub IMemberConfigurationExpression`1.ExplicitExpansion()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.Ignore">
            <summary>Задает stub IMemberConfigurationExpression`1.Ignore()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.MapFromOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Linq.Expressions.Expression{System.Func{`0,``0}}})">
            <summary>Задает заглушки MapFrom(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; sourceMember)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.MapFromOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String})">
            <summary>Задает заглушки MapFrom(String property)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.NullSubstituteObject">
            <summary>Задает stub IMemberConfigurationExpression`1.NullSubstitute(Object nullSubstitute)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.PreConditionFuncOfResolutionContextBoolean">
            <summary>Задает stub IMemberConfigurationExpression`1.PreCondition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.PreConditionFuncOfT0Boolean">
            <summary>Задает stub IMemberConfigurationExpression`1.PreCondition(Func`2&lt;!0,Boolean&gt; condition)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.ResolveUsingFuncOfResolutionResultObject">
            <summary>Задает stub IMemberConfigurationExpression`1.ResolveUsing(Func`2&lt;ResolutionResult,Object&gt; resolver)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.ResolveUsingFuncOfResolutionResultT0Object">
            <summary>Задает stub IMemberConfigurationExpression`1.ResolveUsing(Func`3&lt;ResolutionResult,!0,Object&gt; resolver)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.ResolveUsingFuncOfT0Object">
            <summary>Задает stub IMemberConfigurationExpression`1.ResolveUsing(Func`2&lt;!0,Object&gt; resolver)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.ResolveUsingIValueResolver">
            <summary>Задает stub IMemberConfigurationExpression`1.ResolveUsing(IValueResolver valueResolver)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.ResolveUsingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IResolverConfigurationExpression{`0,``0}})">
            <summary>Задает заглушки ResolveUsing()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.ResolveUsingType">
            <summary>Задает stub IMemberConfigurationExpression`1.ResolveUsing(Type valueResolverType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.SetMappingOrderInt32">
            <summary>Задает stub IMemberConfigurationExpression`1.SetMappingOrder(Int32 mappingOrder)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.UseDestinationValue">
            <summary>Задает stub IMemberConfigurationExpression`1.UseDestinationValue()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.UseValueObject">
            <summary>Задает stub IMemberConfigurationExpression`1.UseValue(Object value)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberConfigurationExpression`1.UseValueOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Задает заглушки UseValue(!!0 value)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMemberGetter">
            <summary>Тип заглушки AutoMapper.IMemberGetter</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberGetter.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMemberGetter</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberGetter.am::AutoMapper#IMemberGetter#GetValue(System.Object)">
            <summary>Задает заглушка IMemberGetter.GetValue(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberGetter.am::AutoMapper#IValueResolver#Resolve(AutoMapper.ResolutionResult)">
            <summary>Задает заглушка IValueResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberGetter.GetValueObject">
            <summary>Задает stub IMemberGetter.GetValue(Object source)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberGetter.MemberInfoGet">
            <summary>Задает stub IMemberGetter.get_MemberInfo()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberGetter.MemberTypeGet">
            <summary>Задает stub IMemberResolver.get_MemberType()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberGetter.NameGet">
            <summary>Задает stub IMemberGetter.get_Name()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberGetter.ResolveResolutionResult">
            <summary>Задает stub IValueResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMemberGetter.am::AutoMapper#IMemberGetter#MemberInfo">
            <summary>Задает stub IMemberGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMemberGetter.am::AutoMapper#IMemberResolver#MemberType">
            <summary>Задает stub IMemberResolver.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMemberGetter.am::AutoMapper#IMemberGetter#Name">
            <summary>Задает stub IMemberGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIMemberResolver">
            <summary>Тип заглушки AutoMapper.IMemberResolver</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberResolver.#ctor">
            <summary>Инициализирует новый экземпляр type StubIMemberResolver</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIMemberResolver.am::AutoMapper#IValueResolver#Resolve(AutoMapper.ResolutionResult)">
            <summary>Задает заглушка IValueResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberResolver.MemberTypeGet">
            <summary>Задает stub IMemberResolver.get_MemberType()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIMemberResolver.ResolveResolutionResult">
            <summary>Задает stub IValueResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIMemberResolver.am::AutoMapper#IMemberResolver#MemberType">
            <summary>Задает stub IMemberResolver.get_MemberType()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubINamingConvention">
            <summary>Тип заглушки AutoMapper.INamingConvention</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubINamingConvention.#ctor">
            <summary>Инициализирует новый экземпляр type StubINamingConvention</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubINamingConvention.am::AutoMapper#INamingConvention#ReplaceValue(System.Text.RegularExpressions.Match)">
            <summary>Задает заглушка INamingConvention.ReplaceValue(Match match)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubINamingConvention.ReplaceValueMatch">
            <summary>Задает stub INamingConvention.ReplaceValue(Match match)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubINamingConvention.SeparatorCharacterGet">
            <summary>Задает stub INamingConvention.get_SeparatorCharacter()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubINamingConvention.SplittingExpressionGet">
            <summary>Задает stub INamingConvention.get_SplittingExpression()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubINamingConvention.am::AutoMapper#INamingConvention#SeparatorCharacter">
            <summary>Задает stub INamingConvention.get_SeparatorCharacter()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubINamingConvention.am::AutoMapper#INamingConvention#SplittingExpression">
            <summary>Задает stub INamingConvention.get_SplittingExpression()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIObjectMapper">
            <summary>Тип заглушки AutoMapper.IObjectMapper</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIObjectMapper.#ctor">
            <summary>Инициализирует новый экземпляр type StubIObjectMapper</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIObjectMapper.am::AutoMapper#IObjectMapper#IsMatch(AutoMapper.TypePair)">
            <summary>Задает заглушка IObjectMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIObjectMapper.am::AutoMapper#IObjectMapper#Map(AutoMapper.ResolutionContext)">
            <summary>Задает заглушка IObjectMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIObjectMapper.IsMatchTypePair">
            <summary>Задает stub IObjectMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIObjectMapper.MapResolutionContext">
            <summary>Задает stub IObjectMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIParentSourceToDestinationNameMapper">
            <summary>Тип заглушки AutoMapper.IParentSourceToDestinationNameMapper</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIParentSourceToDestinationNameMapper.#ctor">
            <summary>Инициализирует новый экземпляр type StubIParentSourceToDestinationNameMapper</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIParentSourceToDestinationNameMapper.am::AutoMapper#IParentSourceToDestinationNameMapper#GetMatchingMemberInfo(AutoMapper.TypeDetails,System.Type,System.String)">
            <summary>Задает заглушка IParentSourceToDestinationNameMapper.GetMatchingMemberInfo(TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIParentSourceToDestinationNameMapper.GetMatchingMemberInfoTypeDetailsTypeString">
            <summary>Задает stub IParentSourceToDestinationNameMapper.GetMatchingMemberInfo(TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIParentSourceToDestinationNameMapper.GetMembersGet">
            <summary>Задает stub IParentSourceToDestinationNameMapper.get_GetMembers()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIParentSourceToDestinationNameMapper.NamedMappersGet">
            <summary>Задает stub IParentSourceToDestinationNameMapper.get_NamedMappers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIParentSourceToDestinationNameMapper.am::AutoMapper#IParentSourceToDestinationNameMapper#GetMembers">
            <summary>Задает stub IParentSourceToDestinationNameMapper.get_GetMembers()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIParentSourceToDestinationNameMapper.am::AutoMapper#IParentSourceToDestinationNameMapper#NamedMappers">
            <summary>Задает stub IParentSourceToDestinationNameMapper.get_NamedMappers()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIProfileConfiguration">
            <summary>Тип заглушки AutoMapper.IProfileConfiguration</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileConfiguration.#ctor">
            <summary>Инициализирует новый экземпляр type StubIProfileConfiguration</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.AllowNullCollectionsGet">
            <summary>Задает stub IProfileConfiguration.get_AllowNullCollections()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.AllowNullDestinationValuesGet">
            <summary>Задает stub IProfileConfiguration.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.ConstructorMappingEnabledGet">
            <summary>Задает stub IProfileConfiguration.get_ConstructorMappingEnabled()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.CreateMissingTypeMapsGet">
            <summary>Задает stub IProfileConfiguration.get_CreateMissingTypeMaps()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.DefaultMemberConfigGet">
            <summary>Задает stub IProfileConfiguration.get_DefaultMemberConfig()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.DestinationMemberNamingConventionGet">
            <summary>Задает stub IProfileConfiguration.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.GlobalIgnoresGet">
            <summary>Задает stub IProfileConfiguration.get_GlobalIgnores()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.MemberConfigurationsGet">
            <summary>Задает stub IProfileConfiguration.get_MemberConfigurations()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.ProfileNameGet">
            <summary>Задает stub IProfileConfiguration.get_ProfileName()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.ShouldMapFieldGet">
            <summary>Задает stub IProfileConfiguration.get_ShouldMapField()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.ShouldMapPropertyGet">
            <summary>Задает stub IProfileConfiguration.get_ShouldMapProperty()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.SourceExtensionMethodsGet">
            <summary>Задает stub IProfileConfiguration.get_SourceExtensionMethods()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.SourceMemberNamingConventionGet">
            <summary>Задает stub IProfileConfiguration.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileConfiguration.TypeConfigurationsGet">
            <summary>Задает stub IProfileConfiguration.get_TypeConfigurations()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#AllowNullCollections">
            <summary>Задает stub IProfileConfiguration.get_AllowNullCollections()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#AllowNullDestinationValues">
            <summary>Задает stub IProfileConfiguration.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#ConstructorMappingEnabled">
            <summary>Задает stub IProfileConfiguration.get_ConstructorMappingEnabled()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#CreateMissingTypeMaps">
            <summary>Задает stub IProfileConfiguration.get_CreateMissingTypeMaps()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#DefaultMemberConfig">
            <summary>Задает stub IProfileConfiguration.get_DefaultMemberConfig()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#DestinationMemberNamingConvention">
            <summary>Задает stub IProfileConfiguration.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#GlobalIgnores">
            <summary>Задает stub IProfileConfiguration.get_GlobalIgnores()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#MemberConfigurations">
            <summary>Задает stub IProfileConfiguration.get_MemberConfigurations()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#ProfileName">
            <summary>Задает stub IProfileConfiguration.get_ProfileName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#ShouldMapField">
            <summary>Задает stub IProfileConfiguration.get_ShouldMapField()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#ShouldMapProperty">
            <summary>Задает stub IProfileConfiguration.get_ShouldMapProperty()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#SourceExtensionMethods">
            <summary>Задает stub IProfileConfiguration.get_SourceExtensionMethods()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#SourceMemberNamingConvention">
            <summary>Задает stub IProfileConfiguration.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileConfiguration.am::AutoMapper#IProfileConfiguration#TypeConfigurations">
            <summary>Задает stub IProfileConfiguration.get_TypeConfigurations()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIProfileExpression">
            <summary>Тип заглушки AutoMapper.IProfileExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.#ctor">
            <summary>Инициализирует новый экземпляр type StubIProfileExpression</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.AddConditionalObjectMapper">
            <summary>Задает stub IProfileExpression.AddConditionalObjectMapper()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.AddGlobalIgnoreString">
            <summary>Задает stub IProfileExpression.AddGlobalIgnore(String propertyNameStartingWith)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.AddMemberConfiguration">
            <summary>Задает stub IProfileExpression.AddMemberConfiguration()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.AllowNullCollectionsGet">
            <summary>Задает stub IProfileExpression.get_AllowNullCollections()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.AllowNullCollectionsSetBoolean">
            <summary>Задает stub IProfileExpression.set_AllowNullCollections(Boolean value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.AllowNullDestinationValuesGet">
            <summary>Задает stub IProfileExpression.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.AllowNullDestinationValuesSetBoolean">
            <summary>Задает stub IProfileExpression.set_AllowNullDestinationValues(Boolean value)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.AttachBackingFieldToAllowNullCollections">
            <summary>Присоединение делегатов для эмуляции StubIProfileExpression.AllowNullCollections как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.AttachBackingFieldToAllowNullDestinationValues">
            <summary>Присоединение делегатов для эмуляции StubIProfileExpression.AllowNullDestinationValues как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.AttachBackingFieldToCreateMissingTypeMaps">
            <summary>Присоединение делегатов для эмуляции StubIProfileExpression.CreateMissingTypeMaps как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.AttachBackingFieldToDestinationMemberNamingConvention">
            <summary>Присоединение делегатов для эмуляции StubIProfileExpression.DestinationMemberNamingConvention как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.AttachBackingFieldToShouldMapField">
            <summary>Присоединение делегатов для эмуляции StubIProfileExpression.ShouldMapField как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.AttachBackingFieldToShouldMapProperty">
            <summary>Присоединение делегатов для эмуляции StubIProfileExpression.ShouldMapProperty как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.AttachBackingFieldToSourceMemberNamingConvention">
            <summary>Присоединение делегатов для эмуляции StubIProfileExpression.SourceMemberNamingConvention как свойства с резервным полем.</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#AddConditionalObjectMapper">
            <summary>Задает заглушка IProfileExpression.AddConditionalObjectMapper()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#AddGlobalIgnore(System.String)">
            <summary>Задает заглушка IProfileExpression.AddGlobalIgnore(String propertyNameStartingWith)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#AddMemberConfiguration">
            <summary>Задает заглушка IProfileExpression.AddMemberConfiguration()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#ClearPrefixes">
            <summary>Задает заглушка IProfileExpression.ClearPrefixes()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#CreateMap(System.Type,System.Type)">
            <summary>Задает заглушка IProfileExpression.CreateMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#CreateMap(System.Type,System.Type,AutoMapper.MemberList)">
            <summary>Задает заглушка IProfileExpression.CreateMap(Type sourceType, Type destinationType, MemberList memberList)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#CreateMap``2">
            <summary>Задает заглушка IProfileExpression.CreateMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#CreateMap``2(AutoMapper.MemberList)">
            <summary>Задает заглушка IProfileExpression.CreateMap(MemberList memberList)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#DisableConstructorMapping">
            <summary>Задает заглушка IProfileExpression.DisableConstructorMapping()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#ForAllMaps(System.Action{AutoMapper.TypeMap,AutoMapper.IMappingExpression})">
            <summary>Задает заглушка IProfileExpression.ForAllMaps(Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#IncludeSourceExtensionMethods(System.Reflection.Assembly)">
            <summary>Задает заглушка IProfileExpression.IncludeSourceExtensionMethods(Assembly assembly)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#RecognizeAlias(System.String,System.String)">
            <summary>Задает заглушка IProfileExpression.RecognizeAlias(String original, String alias)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#RecognizeDestinationPostfixes(System.String[])">
            <summary>Задает заглушка IProfileExpression.RecognizeDestinationPostfixes(String[] postfixes)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#RecognizeDestinationPrefixes(System.String[])">
            <summary>Задает заглушка IProfileExpression.RecognizeDestinationPrefixes(String[] prefixes)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#RecognizePostfixes(System.String[])">
            <summary>Задает заглушка IProfileExpression.RecognizePostfixes(String[] postfixes)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#RecognizePrefixes(System.String[])">
            <summary>Задает заглушка IProfileExpression.RecognizePrefixes(String[] prefixes)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#ReplaceMemberName(System.String,System.String)">
            <summary>Задает заглушка IProfileExpression.ReplaceMemberName(String original, String newValue)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.ClearPrefixes">
            <summary>Задает stub IProfileExpression.ClearPrefixes()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.CreateMapOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает заглушки CreateMap()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIProfileExpression.CreateMapOf2MemberList``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.MemberList,AutoMapper.IMappingExpression{``0,``1}})">
            <summary>Задает заглушки CreateMap(MemberList memberList)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.CreateMapTypeType">
            <summary>Задает stub IProfileExpression.CreateMap(Type sourceType, Type destinationType)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.CreateMapTypeTypeMemberList">
            <summary>Задает stub IProfileExpression.CreateMap(Type sourceType, Type destinationType, MemberList memberList)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.CreateMissingTypeMapsGet">
            <summary>Задает stub IProfileExpression.get_CreateMissingTypeMaps()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.CreateMissingTypeMapsSetBoolean">
            <summary>Задает stub IProfileExpression.set_CreateMissingTypeMaps(Boolean value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.DestinationMemberNamingConventionGet">
            <summary>Задает stub IProfileExpression.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.DestinationMemberNamingConventionSetINamingConvention">
            <summary>Задает stub IProfileExpression.set_DestinationMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.DisableConstructorMapping">
            <summary>Задает stub IProfileExpression.DisableConstructorMapping()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.ForAllMapsActionOfTypeMapIMappingExpression">
            <summary>Задает stub IProfileExpression.ForAllMaps(Action`2&lt;TypeMap,IMappingExpression&gt; configuration)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.IncludeSourceExtensionMethodsAssembly">
            <summary>Задает stub IProfileExpression.IncludeSourceExtensionMethods(Assembly assembly)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.ProfileNameGet">
            <summary>Задает stub IProfileExpression.get_ProfileName()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.RecognizeAliasStringString">
            <summary>Задает stub IProfileExpression.RecognizeAlias(String original, String alias)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.RecognizeDestinationPostfixesStringArray">
            <summary>Задает stub IProfileExpression.RecognizeDestinationPostfixes(String[] postfixes)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.RecognizeDestinationPrefixesStringArray">
            <summary>Задает stub IProfileExpression.RecognizeDestinationPrefixes(String[] prefixes)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.RecognizePostfixesStringArray">
            <summary>Задает stub IProfileExpression.RecognizePostfixes(String[] postfixes)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.RecognizePrefixesStringArray">
            <summary>Задает stub IProfileExpression.RecognizePrefixes(String[] prefixes)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.ReplaceMemberNameStringString">
            <summary>Задает stub IProfileExpression.ReplaceMemberName(String original, String newValue)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.ShouldMapFieldGet">
            <summary>Задает stub IProfileExpression.get_ShouldMapField()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.ShouldMapFieldSetFuncOfFieldInfoBoolean">
            <summary>Задает stub IProfileExpression.set_ShouldMapField(Func`2&lt;FieldInfo,Boolean&gt; value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.ShouldMapPropertyGet">
            <summary>Задает stub IProfileExpression.get_ShouldMapProperty()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.ShouldMapPropertySetFuncOfPropertyInfoBoolean">
            <summary>Задает stub IProfileExpression.set_ShouldMapProperty(Func`2&lt;PropertyInfo,Boolean&gt; value)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.SourceMemberNamingConventionGet">
            <summary>Задает stub IProfileExpression.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIProfileExpression.SourceMemberNamingConventionSetINamingConvention">
            <summary>Задает stub IProfileExpression.set_SourceMemberNamingConvention(INamingConvention value)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#AllowNullCollections">
            <summary>Задает stub IProfileExpression.get_AllowNullCollections()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#AllowNullDestinationValues">
            <summary>Задает stub IProfileExpression.get_AllowNullDestinationValues()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#CreateMissingTypeMaps">
            <summary>Задает stub IProfileExpression.get_CreateMissingTypeMaps()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#DestinationMemberNamingConvention">
            <summary>Задает stub IProfileExpression.get_DestinationMemberNamingConvention()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#ProfileName">
            <summary>Задает stub IProfileExpression.get_ProfileName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#ShouldMapField">
            <summary>Задает stub IProfileExpression.get_ShouldMapField()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#ShouldMapProperty">
            <summary>Задает stub IProfileExpression.get_ShouldMapProperty()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIProfileExpression.am::AutoMapper#IProfileExpression#SourceMemberNamingConvention">
            <summary>Задает stub IProfileExpression.get_SourceMemberNamingConvention()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIResolutionExpression">
            <summary>Тип заглушки AutoMapper.IResolutionExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolutionExpression.#ctor">
            <summary>Инициализирует новый экземпляр type StubIResolutionExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolutionExpression.am::AutoMapper#IResolutionExpression#FromMember(System.String)">
            <summary>Задает заглушка IResolutionExpression.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIResolutionExpression.FromMemberString">
            <summary>Задает stub IResolutionExpression.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIResolutionExpression`1">
            <summary>Тип заглушки AutoMapper.IResolutionExpression`1</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolutionExpression`1.#ctor">
            <summary>Инициализирует новый экземпляр type StubIResolutionExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolutionExpression`1.am::AutoMapper#IResolutionExpression#FromMember(System.String)">
            <summary>Задает заглушка IResolutionExpression.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolutionExpression`1.am::AutoMapper#IResolutionExpression{TSource}#FromMember(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Задает заглушка IResolutionExpression`1.FromMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIResolutionExpression`1.FromMemberExpressionOfFuncOfT0Object">
            <summary>Задает stub IResolutionExpression`1.FromMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIResolutionExpression`1.FromMemberString">
            <summary>Задает stub IResolutionExpression.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIResolverConfigurationExpression">
            <summary>Тип заглушки AutoMapper.IResolverConfigurationExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolverConfigurationExpression.#ctor">
            <summary>Инициализирует новый экземпляр type StubIResolverConfigurationExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolverConfigurationExpression.am::AutoMapper#IResolutionExpression#FromMember(System.String)">
            <summary>Задает заглушка IResolutionExpression.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolverConfigurationExpression.am::AutoMapper#IResolverConfigurationExpression#ConstructedBy(System.Func{AutoMapper.IValueResolver})">
            <summary>Задает заглушка IResolverConfigurationExpression.ConstructedBy(Func`1&lt;IValueResolver&gt; constructor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIResolverConfigurationExpression.ConstructedByFuncOfIValueResolver">
            <summary>Задает stub IResolverConfigurationExpression.ConstructedBy(Func`1&lt;IValueResolver&gt; constructor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIResolverConfigurationExpression.FromMemberString">
            <summary>Задает stub IResolutionExpression.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIResolverConfigurationExpression`1">
            <summary>Тип заглушки AutoMapper.IResolverConfigurationExpression`1</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolverConfigurationExpression`1.#ctor">
            <summary>Инициализирует новый экземпляр type StubIResolverConfigurationExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolverConfigurationExpression`1.am::AutoMapper#IResolutionExpression#FromMember(System.String)">
            <summary>Задает заглушка IResolutionExpression.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolverConfigurationExpression`1.am::AutoMapper#IResolutionExpression{TSource}#FromMember(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Задает заглушка IResolutionExpression`1.FromMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolverConfigurationExpression`1.am::AutoMapper#IResolverConfigurationExpression{TSource}#ConstructedBy(System.Func{AutoMapper.IValueResolver})">
            <summary>Задает заглушка IResolverConfigurationExpression`1.ConstructedBy(Func`1&lt;IValueResolver&gt; constructor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIResolverConfigurationExpression`1.ConstructedByFuncOfIValueResolver">
            <summary>Задает stub IResolverConfigurationExpression`1.ConstructedBy(Func`1&lt;IValueResolver&gt; constructor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIResolverConfigurationExpression`1.FromMemberExpressionOfFuncOfT0Object">
            <summary>Задает stub IResolutionExpression`1.FromMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIResolverConfigurationExpression`1.FromMemberString">
            <summary>Задает stub IResolutionExpression.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIResolverConfigurationExpression`2">
            <summary>Тип заглушки AutoMapper.IResolverConfigurationExpression`2</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolverConfigurationExpression`2.#ctor">
            <summary>Инициализирует новый экземпляр type StubIResolverConfigurationExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolverConfigurationExpression`2.am::AutoMapper#IResolverConfigurationExpression{TSource@TValueResolver}#ConstructedBy(System.Func{`1})">
            <summary>Задает заглушка IResolverConfigurationExpression`2.ConstructedBy(Func`1&lt;!1&gt; constructor)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolverConfigurationExpression`2.am::AutoMapper#IResolverConfigurationExpression{TSource@TValueResolver}#FromMember(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Задает заглушка IResolverConfigurationExpression`2.FromMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIResolverConfigurationExpression`2.am::AutoMapper#IResolverConfigurationExpression{TSource@TValueResolver}#FromMember(System.String)">
            <summary>Задает заглушка IResolverConfigurationExpression`2.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIResolverConfigurationExpression`2.ConstructedByFuncOfT1">
            <summary>Задает stub IResolverConfigurationExpression`2.ConstructedBy(Func`1&lt;!1&gt; constructor)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIResolverConfigurationExpression`2.FromMemberExpressionOfFuncOfT0Object">
            <summary>Задает stub IResolverConfigurationExpression`2.FromMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIResolverConfigurationExpression`2.FromMemberString">
            <summary>Задает stub IResolverConfigurationExpression`2.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubISourceMemberConfigurationExpression">
            <summary>Тип заглушки AutoMapper.ISourceMemberConfigurationExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubISourceMemberConfigurationExpression.#ctor">
            <summary>Инициализирует новый экземпляр type StubISourceMemberConfigurationExpression</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubISourceMemberConfigurationExpression.am::AutoMapper#ISourceMemberConfigurationExpression#Ignore">
            <summary>Задает заглушка ISourceMemberConfigurationExpression.Ignore()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubISourceMemberConfigurationExpression.Ignore">
            <summary>Задает stub ISourceMemberConfigurationExpression.Ignore()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubISourceToDestinationNameMapper">
            <summary>Тип заглушки AutoMapper.ISourceToDestinationNameMapper</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubISourceToDestinationNameMapper.#ctor">
            <summary>Инициализирует новый экземпляр type StubISourceToDestinationNameMapper</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubISourceToDestinationNameMapper.am::AutoMapper#ISourceToDestinationNameMapper#GetMatchingMemberInfo(AutoMapper.IGetTypeInfoMembers,AutoMapper.TypeDetails,System.Type,System.String)">
            <summary>Задает заглушка ISourceToDestinationNameMapper.GetMatchingMemberInfo(IGetTypeInfoMembers getTypeInfoMembers, TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubISourceToDestinationNameMapper.GetMatchingMemberInfoIGetTypeInfoMembersTypeDetailsTypeString">
            <summary>Задает stub ISourceToDestinationNameMapper.GetMatchingMemberInfo(IGetTypeInfoMembers getTypeInfoMembers, TypeDetails typeInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubITypeConverter`2">
            <summary>Тип заглушки AutoMapper.ITypeConverter`2</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubITypeConverter`2.#ctor">
            <summary>Инициализирует новый экземпляр type StubITypeConverter</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubITypeConverter`2.am::AutoMapper#ITypeConverter{TSource@TDestination}#Convert(AutoMapper.ResolutionContext)">
            <summary>Задает заглушка ITypeConverter`2.Convert(ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubITypeConverter`2.ConvertResolutionContext">
            <summary>Задает stub ITypeConverter`2.Convert(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubITypeMapFactory">
            <summary>Тип заглушки AutoMapper.ITypeMapFactory</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubITypeMapFactory.#ctor">
            <summary>Инициализирует новый экземпляр type StubITypeMapFactory</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubITypeMapFactory.am::AutoMapper#ITypeMapFactory#CreateTypeMap(System.Type,System.Type,AutoMapper.IProfileConfiguration,AutoMapper.MemberList)">
            <summary>Задает заглушка ITypeMapFactory.CreateTypeMap(Type sourceType, Type destinationType, IProfileConfiguration mappingOptions, MemberList memberList)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubITypeMapFactory.CreateTypeMapTypeTypeIProfileConfigurationMemberList">
            <summary>Задает stub ITypeMapFactory.CreateTypeMap(Type sourceType, Type destinationType, IProfileConfiguration mappingOptions, MemberList memberList)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIValueResolver">
            <summary>Тип заглушки AutoMapper.IValueResolver</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIValueResolver.#ctor">
            <summary>Инициализирует новый экземпляр type StubIValueResolver</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIValueResolver.am::AutoMapper#IValueResolver#Resolve(AutoMapper.ResolutionResult)">
            <summary>Задает заглушка IValueResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIValueResolver.ResolveResolutionResult">
            <summary>Задает stub IValueResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubIgnoreMapAttribute">
            <summary>Тип заглушки AutoMapper.IgnoreMapAttribute</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIgnoreMapAttribute.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIgnoreMapAttribute.Equals(System.Object)">
            <summary>Задает заглушка Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIgnoreMapAttribute.EqualsObject">
            <summary>Задает stub Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIgnoreMapAttribute.GetHashCode">
            <summary>Задает заглушка Attribute.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIgnoreMapAttribute.GetHashCode01">
            <summary>Задает stub Attribute.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIgnoreMapAttribute.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIgnoreMapAttribute</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIgnoreMapAttribute.IsDefaultAttribute">
            <summary>Задает заглушка Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIgnoreMapAttribute.IsDefaultAttribute01">
            <summary>Задает stub Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubIgnoreMapAttribute.Match(System.Object)">
            <summary>Задает заглушка Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIgnoreMapAttribute.MatchObject">
            <summary>Задает stub Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubIgnoreMapAttribute.TypeIdGet">
            <summary>Задает stub Attribute.get_TypeId()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIgnoreMapAttribute.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIgnoreMapAttribute.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIgnoreMapAttribute.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubIgnoreMapAttribute.TypeId">
            <summary>Задает stub Attribute.get_TypeId()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubLowerUnderscoreNamingConvention">
            <summary>Тип заглушки AutoMapper.LowerUnderscoreNamingConvention</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubLowerUnderscoreNamingConvention.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubLowerUnderscoreNamingConvention.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubLowerUnderscoreNamingConvention</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubLowerUnderscoreNamingConvention.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubLowerUnderscoreNamingConvention.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubLowerUnderscoreNamingConvention.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubMapToAttribute">
            <summary>Тип заглушки AutoMapper.MapToAttribute</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMapToAttribute.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMapToAttribute.Equals(System.Object)">
            <summary>Задает заглушка Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubMapToAttribute.EqualsObject">
            <summary>Задает stub Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMapToAttribute.GetHashCode">
            <summary>Задает заглушка Attribute.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubMapToAttribute.GetHashCode01">
            <summary>Задает stub Attribute.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMapToAttribute.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMapToAttribute</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMapToAttribute.IsDefaultAttribute">
            <summary>Задает заглушка Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubMapToAttribute.IsDefaultAttribute01">
            <summary>Задает stub Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMapToAttribute.IsMatch(AutoMapper.TypeDetails,System.Reflection.MemberInfo,System.Type,System.String)">
            <summary>Задает заглушка MapToAttribute.IsMatch(TypeDetails typeInfo, MemberInfo memberInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubMapToAttribute.IsMatchTypeDetailsMemberInfoTypeString">
            <summary>Задает stub MapToAttribute.IsMatch(TypeDetails typeInfo, MemberInfo memberInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMapToAttribute.Match(System.Object)">
            <summary>Задает заглушка Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubMapToAttribute.MatchObject">
            <summary>Задает stub Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubMapToAttribute.TypeIdGet">
            <summary>Задает stub Attribute.get_TypeId()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMapToAttribute.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMapToAttribute.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMapToAttribute.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMapToAttribute.TypeId">
            <summary>Задает stub Attribute.get_TypeId()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubMapperConfiguration">
            <summary>Тип заглушки AutoMapper.MapperConfiguration</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMapperConfiguration.#ctor(System.Action{AutoMapper.IMapperConfiguration})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMapperConfiguration.#ctor(System.Action{AutoMapper.IMapperConfiguration},System.Collections.Generic.IEnumerable{AutoMapper.IObjectMapper},System.Collections.Generic.IEnumerable{AutoMapper.Mappers.ITypeMapObjectMapper})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMapperConfiguration.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMapperConfiguration</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMapperConfiguration.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMapperConfiguration.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMapperConfiguration.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubMappingEngine">
            <summary>Тип заглушки AutoMapper.MappingEngine</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMappingEngine.#ctor(AutoMapper.IConfigurationProvider,AutoMapper.IMapper)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMappingEngine.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMappingEngine</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMappingEngine.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMappingEngine.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMappingEngine.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubMappingOperationOptions">
            <summary>Тип заглушки AutoMapper.MappingOperationOptions</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMappingOperationOptions.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMappingOperationOptions.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMappingOperationOptions</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMappingOperationOptions.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMappingOperationOptions.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMappingOperationOptions.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubMappingOperationOptions`2">
            <summary>Тип заглушки AutoMapper.MappingOperationOptions`2</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMappingOperationOptions`2.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMappingOperationOptions`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMappingOperationOptions</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMappingOperationOptions`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMappingOperationOptions`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMappingOperationOptions`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubMemberConfiguration">
            <summary>Тип заглушки AutoMapper.MemberConfiguration</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMemberConfiguration.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubMemberConfiguration.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMemberConfiguration</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMemberConfiguration.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMemberConfiguration.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubMemberConfiguration.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubNameSplitMember">
            <summary>Тип заглушки AutoMapper.NameSplitMember</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubNameSplitMember.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubNameSplitMember.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNameSplitMember</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubNameSplitMember.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubNameSplitMember.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubNameSplitMember.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubNullReferenceExceptionSwallowingResolver">
            <summary>Тип заглушки AutoMapper.NullReferenceExceptionSwallowingResolver</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubNullReferenceExceptionSwallowingResolver.#ctor(AutoMapper.IMemberResolver)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubNullReferenceExceptionSwallowingResolver.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNullReferenceExceptionSwallowingResolver</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubNullReferenceExceptionSwallowingResolver.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubNullReferenceExceptionSwallowingResolver.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubNullReferenceExceptionSwallowingResolver.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubParentSourceToDestinationNameMapper">
            <summary>Тип заглушки AutoMapper.ParentSourceToDestinationNameMapper</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubParentSourceToDestinationNameMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubParentSourceToDestinationNameMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubParentSourceToDestinationNameMapper</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubParentSourceToDestinationNameMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubParentSourceToDestinationNameMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubParentSourceToDestinationNameMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubPascalCaseNamingConvention">
            <summary>Тип заглушки AutoMapper.PascalCaseNamingConvention</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubPascalCaseNamingConvention.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubPascalCaseNamingConvention.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPascalCaseNamingConvention</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubPascalCaseNamingConvention.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubPascalCaseNamingConvention.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubPascalCaseNamingConvention.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubPrePostfixName">
            <summary>Тип заглушки AutoMapper.PrePostfixName</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubPrePostfixName.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubPrePostfixName.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPrePostfixName</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubPrePostfixName.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubPrePostfixName.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubPrePostfixName.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubProfile">
            <summary>Тип заглушки AutoMapper.Profile</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubProfile.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubProfile.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubProfile.Configure">
            <summary>Задает заглушка Profile.Configure()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubProfile.Configure01">
            <summary>Задает stub Profile.Configure()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubProfile.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubProfile</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubProfile.ProfileNameGet">
            <summary>Задает stub Profile.get_ProfileName()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubProfile.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubProfile.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubProfile.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubProfile.ProfileName">
            <summary>Задает stub Profile.get_ProfileName()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubPropertyMap">
            <summary>Тип заглушки AutoMapper.PropertyMap</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubPropertyMap.#ctor(AutoMapper.IMemberAccessor)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubPropertyMap.#ctor(AutoMapper.PropertyMap)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubPropertyMap.Equals(System.Object)">
            <summary>Задает заглушка PropertyMap.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubPropertyMap.EqualsObject">
            <summary>Задает stub PropertyMap.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubPropertyMap.GetHashCode">
            <summary>Задает заглушка PropertyMap.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubPropertyMap.GetHashCode01">
            <summary>Задает stub PropertyMap.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubPropertyMap.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPropertyMap</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubPropertyMap.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubPropertyMap.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubPropertyMap.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubReplaceName">
            <summary>Тип заглушки AutoMapper.ReplaceName</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubReplaceName.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubReplaceName.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubReplaceName</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubReplaceName.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubReplaceName.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubReplaceName.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubResolutionContext">
            <summary>Тип заглушки AutoMapper.ResolutionContext</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubResolutionContext.#ctor(AutoMapper.TypeMap,System.Object,System.Type,System.Type,AutoMapper.MappingOperationOptions,AutoMapper.IMappingEngine)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubResolutionContext.#ctor(AutoMapper.TypeMap,System.Object,System.Object,System.Type,System.Type,AutoMapper.MappingOperationOptions,AutoMapper.IMappingEngine)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubResolutionContext.Equals(System.Object)">
            <summary>Задает заглушка ResolutionContext.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubResolutionContext.EqualsObject">
            <summary>Задает stub ResolutionContext.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubResolutionContext.GetHashCode">
            <summary>Задает заглушка ResolutionContext.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubResolutionContext.GetHashCode01">
            <summary>Задает stub ResolutionContext.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubResolutionContext.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubResolutionContext</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubResolutionContext.ToString">
            <summary>Задает заглушка ResolutionContext.ToString()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubResolutionContext.ToString01">
            <summary>Задает stub ResolutionContext.ToString()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubResolutionContext.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubResolutionContext.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubResolutionContext.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubResolutionResult">
            <summary>Тип заглушки AutoMapper.ResolutionResult</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubResolutionResult.#ctor(AutoMapper.ResolutionContext)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubResolutionResult.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubResolutionResult</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubResolutionResult.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubResolutionResult.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubResolutionResult.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubSourceMemberConfig">
            <summary>Тип заглушки AutoMapper.SourceMemberConfig</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubSourceMemberConfig.#ctor(System.Reflection.MemberInfo)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubSourceMemberConfig.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSourceMemberConfig</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubSourceMemberConfig.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubSourceMemberConfig.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubSourceMemberConfig.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute">
            <summary>Тип заглушки AutoMapper.SourceToDestinationMapperAttribute</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.Equals(System.Object)">
            <summary>Задает заглушка Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.EqualsObject">
            <summary>Задает stub Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.GetHashCode">
            <summary>Задает заглушка Attribute.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.GetHashCode01">
            <summary>Задает stub Attribute.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSourceToDestinationMapperAttribute</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.IsDefaultAttribute">
            <summary>Задает заглушка Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.IsDefaultAttribute01">
            <summary>Задает stub Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.IsMatch(AutoMapper.TypeDetails,System.Reflection.MemberInfo,System.Type,System.String)">
            <summary>Задает заглушка SourceToDestinationMapperAttribute.IsMatch(TypeDetails typeInfo, MemberInfo memberInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.IsMatchTypeDetailsMemberInfoTypeString">
            <summary>Задает stub SourceToDestinationMapperAttribute.IsMatch(TypeDetails typeInfo, MemberInfo memberInfo, Type destType, String nameToSearch)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.Match(System.Object)">
            <summary>Задает заглушка Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.MatchObject">
            <summary>Задает stub Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.TypeIdGet">
            <summary>Задает stub Attribute.get_TypeId()</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubSourceToDestinationMapperAttribute.TypeId">
            <summary>Задает stub Attribute.get_TypeId()</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubSourceToDestinationNameMapperAttributesMember">
            <summary>Тип заглушки AutoMapper.SourceToDestinationNameMapperAttributesMember</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubSourceToDestinationNameMapperAttributesMember.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubSourceToDestinationNameMapperAttributesMember.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSourceToDestinationNameMapperAttributesMember</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubSourceToDestinationNameMapperAttributesMember.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubSourceToDestinationNameMapperAttributesMember.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubSourceToDestinationNameMapperAttributesMember.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubThreadSafeList`1">
            <summary>Тип заглушки AutoMapper.ThreadSafeList`1</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubThreadSafeList`1.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubThreadSafeList`1.Dispose(System.Boolean)">
            <summary>Задает заглушка ThreadSafeList`1.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubThreadSafeList`1.DisposeBoolean">
            <summary>Задает stub ThreadSafeList`1.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubThreadSafeList`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubThreadSafeList</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubThreadSafeList`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubThreadSafeList`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubThreadSafeList`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubTypeConverter`2">
            <summary>Тип заглушки AutoMapper.TypeConverter`2</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeConverter`2.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeConverter`2.ConvertCore(`0)">
            <summary>Задает заглушка TypeConverter`2.ConvertCore(!0 source)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubTypeConverter`2.ConvertCoreT0">
            <summary>Задает stub TypeConverter`2.ConvertCore(!0 source)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeConverter`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubTypeConverter</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypeConverter`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypeConverter`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypeConverter`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubTypeDetails">
            <summary>Тип заглушки AutoMapper.TypeDetails</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeDetails.#ctor(System.Type)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeDetails.#ctor(System.Type,System.Func{System.Reflection.PropertyInfo,System.Boolean},System.Func{System.Reflection.FieldInfo,System.Boolean})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeDetails.#ctor(System.Type,System.Func{System.Reflection.PropertyInfo,System.Boolean},System.Func{System.Reflection.FieldInfo,System.Boolean},System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeDetails.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubTypeDetails</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypeDetails.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypeDetails.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypeDetails.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubTypeMap">
            <summary>Тип заглушки AutoMapper.TypeMap</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeMap.#ctor(AutoMapper.TypeDetails,AutoMapper.TypeDetails,AutoMapper.MemberList,System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeMap.Equals(System.Object)">
            <summary>Задает заглушка TypeMap.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubTypeMap.EqualsObject">
            <summary>Задает stub TypeMap.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeMap.GetHashCode">
            <summary>Задает заглушка TypeMap.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubTypeMap.GetHashCode01">
            <summary>Задает stub TypeMap.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeMap.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubTypeMap</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypeMap.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypeMap.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypeMap.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubTypeMapFactory">
            <summary>Тип заглушки AutoMapper.TypeMapFactory</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeMapFactory.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypeMapFactory.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubTypeMapFactory</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypeMapFactory.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypeMapFactory.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypeMapFactory.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubTypePair">
            <summary>Тип заглушки AutoMapper.TypePair</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypePair.#ctor(System.Type,System.Type)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypePair.Equals(System.Object)">
            <summary>Задает заглушка TypePair.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubTypePair.EqualsObject">
            <summary>Задает stub TypePair.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypePair.GetHashCode">
            <summary>Задает заглушка TypePair.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubTypePair.GetHashCode01">
            <summary>Задает stub TypePair.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubTypePair.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubTypePair</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypePair.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypePair.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubTypePair.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Fakes.StubValueResolver`2">
            <summary>Тип заглушки AutoMapper.ValueResolver`2</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubValueResolver`2.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubValueResolver`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubValueResolver</summary>
        </member>
        <member name="M:AutoMapper.Fakes.StubValueResolver`2.ResolveCore(`0)">
            <summary>Задает заглушка ValueResolver`2.ResolveCore(!0 source)</summary>
        </member>
        <member name="F:AutoMapper.Fakes.StubValueResolver`2.ResolveCoreT0">
            <summary>Задает stub ValueResolver`2.ResolveCore(!0 source)</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubValueResolver`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubValueResolver`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Fakes.StubValueResolver`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.CreateTypeMapExpression</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.#ctor(AutoMapper.Internal.CreateTypeMapExpression)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AfterMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression})">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.AfterMap()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.BeforeMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression})">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.BeforeMap()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.Bind(AutoMapper.IMappingExpression)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ConvertUsingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ConvertUsing()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AcceptIMappingExpression">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.Accept(IMappingExpression mappingExpression)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AfterMapActionOfObjectObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.AfterMap(Action`2&lt;Object,Object&gt; afterFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AsType">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.As(Type typeOverride)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.BeforeMapActionOfObjectObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.BeforeMap(Action`2&lt;Object,Object&gt; beforeFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ConstructProjectionUsingLambdaExpression">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ConstructProjectionUsing(LambdaExpression ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ConstructUsingFuncOfObjectObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ConstructUsing(Func`2&lt;Object,Object&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ConstructUsingFuncOfResolutionContextObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ConstructUsing(Func`2&lt;ResolutionContext,Object&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ConstructUsingServiceLocator">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ConstructUsingServiceLocator()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ConstructorTypePairMemberListString">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.CreateTypeMapExpression(TypePair typePair, MemberList memberList, String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ConvertUsingType">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ConvertUsing(Type typeConverterType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ForAllMembersActionOfIMemberConfigurationExpression">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ForAllMembers(Action`1&lt;IMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ForCtorParamStringActionOfICtorParamConfigurationExpressionOfObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ForCtorParam(String ctorParamName, Action`1&lt;ICtorParamConfigurationExpression`1&lt;Object&gt;&gt; paramOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ForMemberStringActionOfIMemberConfigurationExpression">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ForMember(String name, Action`1&lt;IMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ForSourceMemberStringActionOfISourceMemberConfigurationExpression">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ForSourceMember(String sourceMemberName, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.IgnoreAllPropertiesWithAnInaccessibleSetter">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.IgnoreAllPropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.IgnoreAllSourcePropertiesWithAnInaccessibleSetter">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.IgnoreAllSourcePropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.IncludeBaseTypeType">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.IncludeBase(Type sourceBase, Type destinationBase)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.IncludeTypeType">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.Include(Type derivedSourceType, Type derivedDestinationType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.MaxDepthInt32">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.MaxDepth(Int32 depth)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.MemberListGet">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.get_MemberList()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.MemberListSetMemberList">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.set_MemberList(MemberList value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ProfileNameGet">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.get_ProfileName()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ProfileNameSetString">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.set_ProfileName(String value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ProjectUsingExpressionOfFuncOfObjectObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ProjectUsing(Expression`1&lt;Func`2&lt;Object,Object&gt;&gt; projectionExpression)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.ReverseMap">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ReverseMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.SubstituteFuncOfObjectObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.Substitute(Func`2&lt;Object,Object&gt; substituteFunc)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.TypeMapGet">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.get_TypeMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.TypePairGet">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.get_TypePair()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.TypePairSetTypePair">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.set_TypePair(TypePair value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.WithProfileString">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.WithProfile(String profileName)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.AfterMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Internal.CreateTypeMapExpression,AutoMapper.IMappingExpression})">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.AfterMap()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.BeforeMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Internal.CreateTypeMapExpression,AutoMapper.IMappingExpression})">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.BeforeMap()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ConvertUsingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.Internal.CreateTypeMapExpression})">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ConvertUsing()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.AcceptIMappingExpression">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.Accept(IMappingExpression mappingExpression)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.AfterMapActionOfObjectObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.AfterMap(Action`2&lt;Object,Object&gt; afterFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.AsType">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.As(Type typeOverride)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.BeforeMapActionOfObjectObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.BeforeMap(Action`2&lt;Object,Object&gt; beforeFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ConstructProjectionUsingLambdaExpression">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ConstructProjectionUsing(LambdaExpression ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ConstructUsingFuncOfObjectObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ConstructUsing(Func`2&lt;Object,Object&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ConstructUsingFuncOfResolutionContextObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ConstructUsing(Func`2&lt;ResolutionContext,Object&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ConstructUsingServiceLocator">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ConstructUsingServiceLocator()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ConvertUsingType">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ConvertUsing(Type typeConverterType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ForAllMembersActionOfIMemberConfigurationExpression">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ForAllMembers(Action`1&lt;IMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ForCtorParamStringActionOfICtorParamConfigurationExpressionOfObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ForCtorParam(String ctorParamName, Action`1&lt;ICtorParamConfigurationExpression`1&lt;Object&gt;&gt; paramOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ForMemberStringActionOfIMemberConfigurationExpression">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ForMember(String name, Action`1&lt;IMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ForSourceMemberStringActionOfISourceMemberConfigurationExpression">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ForSourceMember(String sourceMemberName, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.IgnoreAllPropertiesWithAnInaccessibleSetter">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.IgnoreAllPropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.IgnoreAllSourcePropertiesWithAnInaccessibleSetter">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.IgnoreAllSourcePropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.IncludeBaseTypeType">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.IncludeBase(Type sourceBase, Type destinationBase)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.IncludeTypeType">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.Include(Type derivedSourceType, Type derivedDestinationType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.MaxDepthInt32">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.MaxDepth(Int32 depth)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.MemberListGet">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.get_MemberList()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.MemberListSetMemberList">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.set_MemberList(MemberList value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ProfileNameGet">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.get_ProfileName()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ProfileNameSetString">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.set_ProfileName(String value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ProjectUsingExpressionOfFuncOfObjectObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ProjectUsing(Expression`1&lt;Func`2&lt;Object,Object&gt;&gt; projectionExpression)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.ReverseMap">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.ReverseMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.SubstituteFuncOfObjectObject">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.Substitute(Func`2&lt;Object,Object&gt; substituteFunc)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.TypeMapGet">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.get_TypeMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.TypePairGet">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.get_TypePair()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.TypePairSetTypePair">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.set_TypePair(TypePair value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimCreateTypeMapExpression.AllInstances.WithProfileString">
            <summary>Задает оболочка совместимости CreateTypeMapExpression.WithProfile(String profileName)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDefaultResolver">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.DefaultResolver</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDefaultResolver.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDefaultResolver.#ctor(AutoMapper.Internal.DefaultResolver)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDefaultResolver.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDefaultResolver.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDefaultResolver.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDefaultResolver.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDefaultResolver.Constructor">
            <summary>Задает оболочка совместимости DefaultResolver.DefaultResolver()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDefaultResolver.ResolveResolutionResult">
            <summary>Задает оболочка совместимости DefaultResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDefaultResolver.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDefaultResolver.AllInstances.ResolveResolutionResult">
            <summary>Задает оболочка совместимости DefaultResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.DeferredInstantiatedConverter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter.#ctor(AutoMapper.Internal.DeferredInstantiatedConverter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter.Bind(AutoMapper.ITypeConverter{System.Object,System.Object})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter.ConstructorTypeFuncOfResolutionContextObject">
            <summary>Задает оболочка совместимости DeferredInstantiatedConverter.DeferredInstantiatedConverter(Type typeConverterType, Func`2&lt;ResolutionContext,Object&gt; instantiator)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter.ConvertResolutionContext">
            <summary>Задает оболочка совместимости DeferredInstantiatedConverter.Convert(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter.GetClosedConvertMethodResolutionContext">
            <summary>Задает оболочка совместимости DeferredInstantiatedConverter.GetClosedConvertMethod(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter.AllInstances.ConvertResolutionContext">
            <summary>Задает оболочка совместимости DeferredInstantiatedConverter.Convert(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter.AllInstances.GetClosedConvertMethodResolutionContext">
            <summary>Задает оболочка совместимости DeferredInstantiatedConverter.GetClosedConvertMethod(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter`2">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.DeferredInstantiatedConverter`2</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter`2.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter`2.#ctor(AutoMapper.Internal.DeferredInstantiatedConverter{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter`2.Bind(AutoMapper.ITypeConverter{`0,`1})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter`2.ConstructorFuncOfResolutionContextITypeConverterOfT0T1">
            <summary>Задает оболочка совместимости DeferredInstantiatedConverter`2.DeferredInstantiatedConverter`2(Func`2&lt;ResolutionContext,ITypeConverter`2&lt;!0,!1&gt;&gt; instantiator)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter`2.ConvertResolutionContext">
            <summary>Задает оболочка совместимости DeferredInstantiatedConverter`2.Convert(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedConverter`2.AllInstances.ConvertResolutionContext">
            <summary>Задает оболочка совместимости DeferredInstantiatedConverter`2.Convert(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedResolver">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.DeferredInstantiatedResolver</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedResolver.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedResolver.#ctor(AutoMapper.Internal.DeferredInstantiatedResolver)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedResolver.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedResolver.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedResolver.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedResolver.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedResolver.ConstructorFuncOfResolutionContextIValueResolver">
            <summary>Задает оболочка совместимости DeferredInstantiatedResolver.DeferredInstantiatedResolver(Func`2&lt;ResolutionContext,IValueResolver&gt; constructor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedResolver.ResolveResolutionResult">
            <summary>Задает оболочка совместимости DeferredInstantiatedResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedResolver.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDeferredInstantiatedResolver.AllInstances.ResolveResolutionResult">
            <summary>Задает оболочка совместимости DeferredInstantiatedResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`1">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.DelegateBasedResolver`1</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`1.#ctor(AutoMapper.Internal.DelegateBasedResolver{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`1.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`1.ConstructorFuncOfResolutionResultObject">
            <summary>Задает оболочка совместимости DelegateBasedResolver`1.DelegateBasedResolver`1(Func`2&lt;ResolutionResult,Object&gt; method)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`1.ResolveResolutionResult">
            <summary>Задает оболочка совместимости DelegateBasedResolver`1.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`1.AllInstances.ResolveResolutionResult">
            <summary>Задает оболочка совместимости DelegateBasedResolver`1.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.DelegateBasedResolver`2</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.#ctor(AutoMapper.Internal.DelegateBasedResolver{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.Bind(AutoMapper.IMemberResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.ConstructorFuncOfT0T1">
            <summary>Задает оболочка совместимости DelegateBasedResolver`2.DelegateBasedResolver`2(Func`2&lt;!0,!1&gt; method)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.MemberTypeGet">
            <summary>Задает оболочка совместимости DelegateBasedResolver`2.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.ResolveResolutionResult">
            <summary>Задает оболочка совместимости DelegateBasedResolver`2.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.AllInstances.MemberTypeGet">
            <summary>Задает оболочка совместимости DelegateBasedResolver`2.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateBasedResolver`2.AllInstances.ResolveResolutionResult">
            <summary>Задает оболочка совместимости DelegateBasedResolver`2.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDelegateFactory">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.DelegateFactory</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateFactory.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateFactory.#ctor(AutoMapper.Internal.DelegateFactory)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateFactory.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimDelegateFactory.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.Constructor">
            <summary>Задает оболочка совместимости DelegateFactory.DelegateFactory()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.CreateCtorConstructorInfoIEnumerableOfConstructorParameterMap">
            <summary>Задает оболочка совместимости DelegateFactory.CreateCtor(ConstructorInfo constructorInfo, IEnumerable`1&lt;ConstructorParameterMap&gt; ctorParams)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.CreateCtorType">
            <summary>Задает оболочка совместимости DelegateFactory.CreateCtor(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.CreateGetFieldInfo">
            <summary>Задает оболочка совместимости DelegateFactory.CreateGet(FieldInfo field)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.CreateGetMethodInfo">
            <summary>Задает оболочка совместимости DelegateFactory.CreateGet(MethodInfo method)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.CreateGetPropertyInfo">
            <summary>Задает оболочка совместимости DelegateFactory.CreateGet(PropertyInfo property)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.CreateParameterExpressionsMethodInfoExpressionExpression">
            <summary>Задает оболочка совместимости DelegateFactory.CreateParameterExpressions(MethodInfo method, Expression instanceParameter, Expression argumentsParameter)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.CreateSetFieldInfo">
            <summary>Задает оболочка совместимости DelegateFactory.CreateSet(FieldInfo field)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.CreateSetPropertyInfo">
            <summary>Задает оболочка совместимости DelegateFactory.CreateSet(PropertyInfo property)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimDelegateFactory.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.AllInstances.CreateCtorConstructorInfoIEnumerableOfConstructorParameterMap">
            <summary>Задает оболочка совместимости DelegateFactory.CreateCtor(ConstructorInfo constructorInfo, IEnumerable`1&lt;ConstructorParameterMap&gt; ctorParams)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.AllInstances.CreateCtorType">
            <summary>Задает оболочка совместимости DelegateFactory.CreateCtor(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.AllInstances.CreateGetFieldInfo">
            <summary>Задает оболочка совместимости DelegateFactory.CreateGet(FieldInfo field)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.AllInstances.CreateGetMethodInfo">
            <summary>Задает оболочка совместимости DelegateFactory.CreateGet(MethodInfo method)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.AllInstances.CreateGetPropertyInfo">
            <summary>Задает оболочка совместимости DelegateFactory.CreateGet(PropertyInfo property)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.AllInstances.CreateSetFieldInfo">
            <summary>Задает оболочка совместимости DelegateFactory.CreateSet(FieldInfo field)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimDelegateFactory.AllInstances.CreateSetPropertyInfo">
            <summary>Задает оболочка совместимости DelegateFactory.CreateSet(PropertyInfo property)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimEnumerableExtensions">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.EnumerableExtensions</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimEnumerableExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimEnumerableExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimEnumerableExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimEnumerableExtensions.EachOf1IEnumerableOfM0ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.IEnumerable{``0},System.Action{``0}})">
            <summary>Задает оболочка совместимости EnumerableExtensions.Each(IEnumerable`1&lt;!!0&gt; items, Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimEnumerableExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimFieldAccessor">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.FieldAccessor</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldAccessor.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldAccessor.#ctor(AutoMapper.Internal.FieldAccessor)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldAccessor.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldAccessor.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldAccessor.Bind(AutoMapper.IMemberAccessor)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldAccessor.Bind(AutoMapper.IMemberGetter)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldAccessor.Bind(AutoMapper.IMemberResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldAccessor.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldAccessor.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldAccessor.ConstructorFieldInfo">
            <summary>Задает оболочка совместимости FieldAccessor.FieldAccessor(FieldInfo fieldInfo)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldAccessor.SetValueObjectObject">
            <summary>Задает оболочка совместимости FieldAccessor.SetValue(Object destination, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimFieldAccessor.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldAccessor.AllInstances.SetValueObjectObject">
            <summary>Задает оболочка совместимости FieldAccessor.SetValue(Object destination, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimFieldGetter">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.FieldGetter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldGetter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldGetter.#ctor(AutoMapper.Internal.FieldGetter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldGetter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldGetter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldGetter.Bind(AutoMapper.IMemberGetter)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldGetter.Bind(AutoMapper.IMemberResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimFieldGetter.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.ConstructorFieldInfo">
            <summary>Задает оболочка совместимости FieldGetter.FieldGetter(FieldInfo fieldInfo)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.EqualsFieldGetter">
            <summary>Задает оболочка совместимости FieldGetter.Equals(FieldGetter other)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.EqualsObject">
            <summary>Задает оболочка совместимости FieldGetter.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.GetCustomAttributesBoolean">
            <summary>Задает оболочка совместимости FieldGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.GetCustomAttributesTypeBoolean">
            <summary>Задает оболочка совместимости FieldGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.GetHashCode">
            <summary>Задает оболочка совместимости FieldGetter.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.GetValueObject">
            <summary>Задает оболочка совместимости FieldGetter.GetValue(Object source)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.IsDefinedTypeBoolean">
            <summary>Задает оболочка совместимости FieldGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.MemberInfoGet">
            <summary>Задает оболочка совместимости FieldGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.MemberTypeGet">
            <summary>Задает оболочка совместимости FieldGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.NameGet">
            <summary>Задает оболочка совместимости FieldGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimFieldGetter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.AllInstances.EqualsFieldGetter">
            <summary>Задает оболочка совместимости FieldGetter.Equals(FieldGetter other)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости FieldGetter.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.AllInstances.GetCustomAttributesBoolean">
            <summary>Задает оболочка совместимости FieldGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.AllInstances.GetCustomAttributesTypeBoolean">
            <summary>Задает оболочка совместимости FieldGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости FieldGetter.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.AllInstances.GetValueObject">
            <summary>Задает оболочка совместимости FieldGetter.GetValue(Object source)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.AllInstances.IsDefinedTypeBoolean">
            <summary>Задает оболочка совместимости FieldGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.AllInstances.MemberInfoGet">
            <summary>Задает оболочка совместимости FieldGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.AllInstances.MemberTypeGet">
            <summary>Задает оболочка совместимости FieldGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimFieldGetter.AllInstances.NameGet">
            <summary>Задает оболочка совместимости FieldGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimMappingExpression">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.MappingExpression</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.#ctor(AutoMapper.Internal.MappingExpression)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.AfterMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression})">
            <summary>Задает оболочка совместимости MappingExpression.AfterMap()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.AutoMapperIMappingExpressionConvertUsingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает оболочка совместимости MappingExpression.AutoMapper.IMappingExpression.ConvertUsing()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.BeforeMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression})">
            <summary>Задает оболочка совместимости MappingExpression.BeforeMap()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.Bind(AutoMapper.IMappingExpression)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.Bind(AutoMapper.IMemberConfigurationExpression)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.Bind(AutoMapper.IMemberConfigurationExpression{System.Object})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.Bind(AutoMapper.IMappingExpression{System.Object,System.Object})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AfterMapActionOfObjectObject">
            <summary>Задает оболочка совместимости MappingExpression.AfterMap(Action`2&lt;Object,Object&gt; afterFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AsType">
            <summary>Задает оболочка совместимости MappingExpression.As(Type typeOverride)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AutoMapperIMappingExpressionWithProfileString">
            <summary>Задает оболочка совместимости MappingExpression.AutoMapper.IMappingExpression.WithProfile(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.BeforeMapActionOfObjectObject">
            <summary>Задает оболочка совместимости MappingExpression.BeforeMap(Action`2&lt;Object,Object&gt; beforeFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.ConstructProjectionUsingLambdaExpression">
            <summary>Задает оболочка совместимости MappingExpression.ConstructProjectionUsing(LambdaExpression ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.ConstructUsingFuncOfObjectObject">
            <summary>Задает оболочка совместимости MappingExpression.ConstructUsing(Func`2&lt;Object,Object&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.ConstructUsingFuncOfResolutionContextObject">
            <summary>Задает оболочка совместимости MappingExpression.ConstructUsing(Func`2&lt;ResolutionContext,Object&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.ConstructUsingServiceLocator">
            <summary>Задает оболочка совместимости MappingExpression.ConstructUsingServiceLocator()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.ConstructorTypeMapFuncOfTypeObjectIProfileExpression">
            <summary>Задает оболочка совместимости MappingExpression.MappingExpression(TypeMap typeMap, Func`2&lt;Type,Object&gt; typeConverterCtor, IProfileExpression configurationContainer)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.ConvertUsingType">
            <summary>Задает оболочка совместимости MappingExpression.ConvertUsing(Type typeConverterType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.ForAllMembersActionOfIMemberConfigurationExpression">
            <summary>Задает оболочка совместимости MappingExpression.ForAllMembers(Action`1&lt;IMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.ForCtorParamStringActionOfICtorParamConfigurationExpressionOfObject">
            <summary>Задает оболочка совместимости MappingExpression.ForCtorParam(String ctorParamName, Action`1&lt;ICtorParamConfigurationExpression`1&lt;Object&gt;&gt; paramOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.ForMemberStringActionOfIMemberConfigurationExpression">
            <summary>Задает оболочка совместимости MappingExpression.ForMember(String name, Action`1&lt;IMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.ForSourceMemberStringActionOfISourceMemberConfigurationExpression">
            <summary>Задает оболочка совместимости MappingExpression.ForSourceMember(String sourceMemberName, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.IgnoreAllPropertiesWithAnInaccessibleSetter">
            <summary>Задает оболочка совместимости MappingExpression.IgnoreAllPropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.IgnoreAllSourcePropertiesWithAnInaccessibleSetter">
            <summary>Задает оболочка совместимости MappingExpression.IgnoreAllSourcePropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.IncludeBaseTypeType">
            <summary>Задает оболочка совместимости MappingExpression.IncludeBase(Type sourceBase, Type destinationBase)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.IncludeTypeType">
            <summary>Задает оболочка совместимости MappingExpression.Include(Type otherSourceType, Type otherDestinationType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.MapFromString">
            <summary>Задает оболочка совместимости MappingExpression.MapFrom(String sourceMember)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.MaxDepthInt32">
            <summary>Задает оболочка совместимости MappingExpression.MaxDepth(Int32 depth)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.ProjectUsingLambdaExpression">
            <summary>Задает оболочка совместимости MappingExpression.ProjectUsing(LambdaExpression projectionExpression)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.ReverseMap">
            <summary>Задает оболочка совместимости MappingExpression.ReverseMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.SubstituteFuncOfObjectObject">
            <summary>Задает оболочка совместимости MappingExpression.Substitute(Func`2&lt;Object,Object&gt; substituteFunc)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.AfterMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Internal.MappingExpression,AutoMapper.IMappingExpression})">
            <summary>Задает оболочка совместимости MappingExpression.AfterMap()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.AutoMapperIMappingExpressionConvertUsingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.Internal.MappingExpression})">
            <summary>Задает оболочка совместимости MappingExpression.AutoMapper.IMappingExpression.ConvertUsing()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.BeforeMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Internal.MappingExpression,AutoMapper.IMappingExpression})">
            <summary>Задает оболочка совместимости MappingExpression.BeforeMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.AfterMapActionOfObjectObject">
            <summary>Задает оболочка совместимости MappingExpression.AfterMap(Action`2&lt;Object,Object&gt; afterFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.AsType">
            <summary>Задает оболочка совместимости MappingExpression.As(Type typeOverride)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.AutoMapperIMappingExpressionWithProfileString">
            <summary>Задает оболочка совместимости MappingExpression.AutoMapper.IMappingExpression.WithProfile(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.BeforeMapActionOfObjectObject">
            <summary>Задает оболочка совместимости MappingExpression.BeforeMap(Action`2&lt;Object,Object&gt; beforeFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.ConstructProjectionUsingLambdaExpression">
            <summary>Задает оболочка совместимости MappingExpression.ConstructProjectionUsing(LambdaExpression ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.ConstructUsingFuncOfObjectObject">
            <summary>Задает оболочка совместимости MappingExpression.ConstructUsing(Func`2&lt;Object,Object&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.ConstructUsingFuncOfResolutionContextObject">
            <summary>Задает оболочка совместимости MappingExpression.ConstructUsing(Func`2&lt;ResolutionContext,Object&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.ConstructUsingServiceLocator">
            <summary>Задает оболочка совместимости MappingExpression.ConstructUsingServiceLocator()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.ConvertUsingType">
            <summary>Задает оболочка совместимости MappingExpression.ConvertUsing(Type typeConverterType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.ForAllMembersActionOfIMemberConfigurationExpression">
            <summary>Задает оболочка совместимости MappingExpression.ForAllMembers(Action`1&lt;IMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.ForCtorParamStringActionOfICtorParamConfigurationExpressionOfObject">
            <summary>Задает оболочка совместимости MappingExpression.ForCtorParam(String ctorParamName, Action`1&lt;ICtorParamConfigurationExpression`1&lt;Object&gt;&gt; paramOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.ForMemberStringActionOfIMemberConfigurationExpression">
            <summary>Задает оболочка совместимости MappingExpression.ForMember(String name, Action`1&lt;IMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.ForSourceMemberStringActionOfISourceMemberConfigurationExpression">
            <summary>Задает оболочка совместимости MappingExpression.ForSourceMember(String sourceMemberName, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.IgnoreAllPropertiesWithAnInaccessibleSetter">
            <summary>Задает оболочка совместимости MappingExpression.IgnoreAllPropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.IgnoreAllSourcePropertiesWithAnInaccessibleSetter">
            <summary>Задает оболочка совместимости MappingExpression.IgnoreAllSourcePropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.IncludeBaseTypeType">
            <summary>Задает оболочка совместимости MappingExpression.IncludeBase(Type sourceBase, Type destinationBase)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.IncludeTypeType">
            <summary>Задает оболочка совместимости MappingExpression.Include(Type otherSourceType, Type otherDestinationType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.MapFromString">
            <summary>Задает оболочка совместимости MappingExpression.MapFrom(String sourceMember)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.MaxDepthInt32">
            <summary>Задает оболочка совместимости MappingExpression.MaxDepth(Int32 depth)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.ProjectUsingLambdaExpression">
            <summary>Задает оболочка совместимости MappingExpression.ProjectUsing(LambdaExpression projectionExpression)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.ReverseMap">
            <summary>Задает оболочка совместимости MappingExpression.ReverseMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression.AllInstances.SubstituteFuncOfObjectObject">
            <summary>Задает оболочка совместимости MappingExpression.Substitute(Func`2&lt;Object,Object&gt; substituteFunc)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimMappingExpression`2">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.MappingExpression`2</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.#ctor(AutoMapper.Internal.MappingExpression{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AfterMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{`0,`1}})">
            <summary>Задает оболочка совместимости MappingExpression`2.AfterMap()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает оболочка совместимости MappingExpression`2.As()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.BeforeMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{`0,`1}})">
            <summary>Задает оболочка совместимости MappingExpression`2.BeforeMap()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.Bind(AutoMapper.IMemberConfigurationExpression{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.Bind(AutoMapper.IMappingExpression{`0,`1})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.BuildCtorOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Func{AutoMapper.ResolutionContext,``0}})">
            <summary>Задает оболочка совместимости MappingExpression`2.BuildCtor(Type type)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConvertUsingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Задает оболочка совместимости MappingExpression`2.ConvertUsing()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.IncludeBaseOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{`0,`1}})">
            <summary>Задает оболочка совместимости MappingExpression`2.IncludeBase()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.IncludeOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IMappingExpression{`0,`1}})">
            <summary>Задает оболочка совместимости MappingExpression`2.Include()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.MapFromOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Linq.Expressions.Expression{System.Func{`0,``0}}})">
            <summary>Задает оболочка совместимости MappingExpression`2.MapFrom(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; sourceMember)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.MapFromOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String})">
            <summary>Задает оболочка совместимости MappingExpression`2.MapFrom(String property)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ResolveUsingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.IResolverConfigurationExpression{`0,``0}})">
            <summary>Задает оболочка совместимости MappingExpression`2.ResolveUsing()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.UseValueOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Задает оболочка совместимости MappingExpression`2.UseValue(!!0 value)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2._AfterMapb__59_0Of1T0T1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{`0,`1})">
            <summary>Задает оболочка совместимости MappingExpression`2.&lt;AfterMap&gt;b__59_0(!0 src, !1 dest)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2._BeforeMapb__57_0Of1T0T1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{`0,`1})">
            <summary>Задает оболочка совместимости MappingExpression`2.&lt;BeforeMap&gt;b__57_0(!0 src, !1 dest)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AfterMapActionOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.AfterMap(Action`2&lt;!0,!1&gt; afterFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.BeforeMapActionOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.BeforeMap(Action`2&lt;!0,!1&gt; beforeFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConditionFuncOfResolutionContextBoolean">
            <summary>Задает оболочка совместимости MappingExpression`2.Condition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConditionFuncOfT0Boolean">
            <summary>Задает оболочка совместимости MappingExpression`2.Condition(Func`2&lt;!0,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConfigureReverseMapIMappingExpressionOfT1T0">
            <summary>Задает оболочка совместимости MappingExpression`2.ConfigureReverseMap(IMappingExpression`2&lt;!1,!0&gt; mappingExpression)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConstructProjectionUsingExpressionOfFuncOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConstructProjectionUsing(Expression`1&lt;Func`2&lt;!0,!1&gt;&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConstructUsingFuncOfResolutionContextT1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConstructUsing(Func`2&lt;ResolutionContext,!1&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConstructUsingFuncOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConstructUsing(Func`2&lt;!0,!1&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConstructUsingServiceLocator">
            <summary>Задает оболочка совместимости MappingExpression`2.ConstructUsingServiceLocator()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConstructorTypeMapFuncOfTypeObjectIProfileExpression">
            <summary>Задает оболочка совместимости MappingExpression`2.MappingExpression`2(TypeMap typeMap, Func`2&lt;Type,Object&gt; serviceCtor, IProfileExpression profile)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConvertUsingFuncOfResolutionContextT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConvertUsing(Func`3&lt;ResolutionContext,!0,!1&gt; mappingFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConvertUsingFuncOfResolutionContextT1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConvertUsing(Func`2&lt;ResolutionContext,!1&gt; mappingFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConvertUsingFuncOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConvertUsing(Func`2&lt;!0,!1&gt; mappingFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ConvertUsingITypeConverterOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConvertUsing(ITypeConverter`2&lt;!0,!1&gt; converter)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.DoNotUseDestinationValue">
            <summary>Задает оболочка совместимости MappingExpression`2.DoNotUseDestinationValue()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ExplicitExpansion">
            <summary>Задает оболочка совместимости MappingExpression`2.ExplicitExpansion()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ForAllMembersActionOfIMemberConfigurationExpressionOfT0">
            <summary>Задает оболочка совместимости MappingExpression`2.ForAllMembers(Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ForCtorParamStringActionOfICtorParamConfigurationExpressionOfT0">
            <summary>Задает оболочка совместимости MappingExpression`2.ForCtorParam(String ctorParamName, Action`1&lt;ICtorParamConfigurationExpression`1&lt;!0&gt;&gt; paramOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ForDestinationMemberIMemberAccessorActionOfIMemberConfigurationExpressionOfT0">
            <summary>Задает оболочка совместимости MappingExpression`2.ForDestinationMember(IMemberAccessor destinationProperty, Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ForMemberExpressionOfFuncOfT1ObjectActionOfIMemberConfigurationExpressionOfT0">
            <summary>Задает оболочка совместимости MappingExpression`2.ForMember(Expression`1&lt;Func`2&lt;!1,Object&gt;&gt; destinationMember, Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ForMemberStringActionOfIMemberConfigurationExpressionOfT0">
            <summary>Задает оболочка совместимости MappingExpression`2.ForMember(String name, Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ForSourceMemberExpressionOfFuncOfT0ObjectActionOfISourceMemberConfigurationExpression">
            <summary>Задает оболочка совместимости MappingExpression`2.ForSourceMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ForSourceMemberStringActionOfISourceMemberConfigurationExpression">
            <summary>Задает оболочка совместимости MappingExpression`2.ForSourceMember(String sourceMemberName, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.HasAnInaccessibleSetterPropertyInfo">
            <summary>Задает оболочка совместимости MappingExpression`2.HasAnInaccessibleSetter(PropertyInfo property)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.Ignore">
            <summary>Задает оболочка совместимости MappingExpression`2.Ignore()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.IgnoreAllPropertiesWithAnInaccessibleSetter">
            <summary>Задает оболочка совместимости MappingExpression`2.IgnoreAllPropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.IgnoreAllSourcePropertiesWithAnInaccessibleSetter">
            <summary>Задает оболочка совместимости MappingExpression`2.IgnoreAllSourcePropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.IncludeBaseTypeType">
            <summary>Задает оболочка совместимости MappingExpression`2.IncludeBase(Type sourceBase, Type destinationBase)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.IncludeTypeType">
            <summary>Задает оболочка совместимости MappingExpression`2.Include(Type otherSourceType, Type otherDestinationType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.MaxDepthInt32">
            <summary>Задает оболочка совместимости MappingExpression`2.MaxDepth(Int32 depth)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.NullSubstituteObject">
            <summary>Задает оболочка совместимости MappingExpression`2.NullSubstitute(Object nullSubstitute)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.PreConditionFuncOfResolutionContextBoolean">
            <summary>Задает оболочка совместимости MappingExpression`2.PreCondition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.PreConditionFuncOfT0Boolean">
            <summary>Задает оболочка совместимости MappingExpression`2.PreCondition(Func`2&lt;!0,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ProfileGet">
            <summary>Задает оболочка совместимости MappingExpression`2.get_Profile()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ProjectUsingExpressionOfFuncOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.ProjectUsing(Expression`1&lt;Func`2&lt;!0,!1&gt;&gt; projectionExpression)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.PropertyMapGet">
            <summary>Задает оболочка совместимости MappingExpression`2.get_PropertyMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.PropertyMapSetPropertyMap">
            <summary>Задает оболочка совместимости MappingExpression`2.set_PropertyMap(PropertyMap value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ResolveUsingFuncOfResolutionResultObject">
            <summary>Задает оболочка совместимости MappingExpression`2.ResolveUsing(Func`2&lt;ResolutionResult,Object&gt; resolver)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ResolveUsingFuncOfResolutionResultT0Object">
            <summary>Задает оболочка совместимости MappingExpression`2.ResolveUsing(Func`3&lt;ResolutionResult,!0,Object&gt; resolver)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ResolveUsingFuncOfT0Object">
            <summary>Задает оболочка совместимости MappingExpression`2.ResolveUsing(Func`2&lt;!0,Object&gt; resolver)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ResolveUsingIValueResolver">
            <summary>Задает оболочка совместимости MappingExpression`2.ResolveUsing(IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ResolveUsingType">
            <summary>Задает оболочка совместимости MappingExpression`2.ResolveUsing(Type valueResolverType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.ReverseMap">
            <summary>Задает оболочка совместимости MappingExpression`2.ReverseMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.SetMappingOrderInt32">
            <summary>Задает оболочка совместимости MappingExpression`2.SetMappingOrder(Int32 mappingOrder)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.SubstituteFuncOfT0Object">
            <summary>Задает оболочка совместимости MappingExpression`2.Substitute(Func`2&lt;!0,Object&gt; substituteFunc)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.TypeMapGet">
            <summary>Задает оболочка совместимости MappingExpression`2.get_TypeMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.UseDestinationValue">
            <summary>Задает оболочка совместимости MappingExpression`2.UseDestinationValue()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.UseValueObject">
            <summary>Задает оболочка совместимости MappingExpression`2.UseValue(Object value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.WithProfileString">
            <summary>Задает оболочка совместимости MappingExpression`2.WithProfile(String profileName)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.AfterMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Internal.MappingExpression{`0,`1},AutoMapper.IMappingExpression{`0,`1}})">
            <summary>Задает оболочка совместимости MappingExpression`2.AfterMap()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.AsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.Internal.MappingExpression{`0,`1}})">
            <summary>Задает оболочка совместимости MappingExpression`2.As()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.BeforeMapOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Internal.MappingExpression{`0,`1},AutoMapper.IMappingExpression{`0,`1}})">
            <summary>Задает оболочка совместимости MappingExpression`2.BeforeMap()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.BuildCtorOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Internal.MappingExpression{`0,`1},System.Type,System.Func{AutoMapper.ResolutionContext,``0}})">
            <summary>Задает оболочка совместимости MappingExpression`2.BuildCtor(Type type)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ConvertUsingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.Internal.MappingExpression{`0,`1}})">
            <summary>Задает оболочка совместимости MappingExpression`2.ConvertUsing()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.IncludeBaseOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Internal.MappingExpression{`0,`1},AutoMapper.IMappingExpression{`0,`1}})">
            <summary>Задает оболочка совместимости MappingExpression`2.IncludeBase()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.IncludeOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Internal.MappingExpression{`0,`1},AutoMapper.IMappingExpression{`0,`1}})">
            <summary>Задает оболочка совместимости MappingExpression`2.Include()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.MapFromOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.Internal.MappingExpression{`0,`1},System.Linq.Expressions.Expression{System.Func{`0,``0}}})">
            <summary>Задает оболочка совместимости MappingExpression`2.MapFrom(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; sourceMember)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.MapFromOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.Internal.MappingExpression{`0,`1},System.String})">
            <summary>Задает оболочка совместимости MappingExpression`2.MapFrom(String property)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ResolveUsingOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.Internal.MappingExpression{`0,`1},AutoMapper.IResolverConfigurationExpression{`0,``0}})">
            <summary>Задает оболочка совместимости MappingExpression`2.ResolveUsing()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.UseValueOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.Internal.MappingExpression{`0,`1},``0})">
            <summary>Задает оболочка совместимости MappingExpression`2.UseValue(!!0 value)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances._AfterMapb__59_0Of1T0T1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.Internal.MappingExpression{`0,`1},`0,`1})">
            <summary>Задает оболочка совместимости MappingExpression`2.&lt;AfterMap&gt;b__59_0(!0 src, !1 dest)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances._BeforeMapb__57_0Of1T0T1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{AutoMapper.Internal.MappingExpression{`0,`1},`0,`1})">
            <summary>Задает оболочка совместимости MappingExpression`2.&lt;BeforeMap&gt;b__57_0(!0 src, !1 dest)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.AfterMapActionOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.AfterMap(Action`2&lt;!0,!1&gt; afterFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.BeforeMapActionOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.BeforeMap(Action`2&lt;!0,!1&gt; beforeFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ConditionFuncOfResolutionContextBoolean">
            <summary>Задает оболочка совместимости MappingExpression`2.Condition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ConditionFuncOfT0Boolean">
            <summary>Задает оболочка совместимости MappingExpression`2.Condition(Func`2&lt;!0,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ConfigureReverseMapIMappingExpressionOfT1T0">
            <summary>Задает оболочка совместимости MappingExpression`2.ConfigureReverseMap(IMappingExpression`2&lt;!1,!0&gt; mappingExpression)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ConstructProjectionUsingExpressionOfFuncOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConstructProjectionUsing(Expression`1&lt;Func`2&lt;!0,!1&gt;&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ConstructUsingFuncOfResolutionContextT1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConstructUsing(Func`2&lt;ResolutionContext,!1&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ConstructUsingFuncOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConstructUsing(Func`2&lt;!0,!1&gt; ctor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ConstructUsingServiceLocator">
            <summary>Задает оболочка совместимости MappingExpression`2.ConstructUsingServiceLocator()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ConvertUsingFuncOfResolutionContextT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConvertUsing(Func`3&lt;ResolutionContext,!0,!1&gt; mappingFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ConvertUsingFuncOfResolutionContextT1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConvertUsing(Func`2&lt;ResolutionContext,!1&gt; mappingFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ConvertUsingFuncOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConvertUsing(Func`2&lt;!0,!1&gt; mappingFunction)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ConvertUsingITypeConverterOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.ConvertUsing(ITypeConverter`2&lt;!0,!1&gt; converter)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.DoNotUseDestinationValue">
            <summary>Задает оболочка совместимости MappingExpression`2.DoNotUseDestinationValue()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ExplicitExpansion">
            <summary>Задает оболочка совместимости MappingExpression`2.ExplicitExpansion()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ForAllMembersActionOfIMemberConfigurationExpressionOfT0">
            <summary>Задает оболочка совместимости MappingExpression`2.ForAllMembers(Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ForCtorParamStringActionOfICtorParamConfigurationExpressionOfT0">
            <summary>Задает оболочка совместимости MappingExpression`2.ForCtorParam(String ctorParamName, Action`1&lt;ICtorParamConfigurationExpression`1&lt;!0&gt;&gt; paramOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ForDestinationMemberIMemberAccessorActionOfIMemberConfigurationExpressionOfT0">
            <summary>Задает оболочка совместимости MappingExpression`2.ForDestinationMember(IMemberAccessor destinationProperty, Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ForMemberExpressionOfFuncOfT1ObjectActionOfIMemberConfigurationExpressionOfT0">
            <summary>Задает оболочка совместимости MappingExpression`2.ForMember(Expression`1&lt;Func`2&lt;!1,Object&gt;&gt; destinationMember, Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ForMemberStringActionOfIMemberConfigurationExpressionOfT0">
            <summary>Задает оболочка совместимости MappingExpression`2.ForMember(String name, Action`1&lt;IMemberConfigurationExpression`1&lt;!0&gt;&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ForSourceMemberExpressionOfFuncOfT0ObjectActionOfISourceMemberConfigurationExpression">
            <summary>Задает оболочка совместимости MappingExpression`2.ForSourceMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ForSourceMemberStringActionOfISourceMemberConfigurationExpression">
            <summary>Задает оболочка совместимости MappingExpression`2.ForSourceMember(String sourceMemberName, Action`1&lt;ISourceMemberConfigurationExpression&gt; memberOptions)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.HasAnInaccessibleSetterPropertyInfo">
            <summary>Задает оболочка совместимости MappingExpression`2.HasAnInaccessibleSetter(PropertyInfo property)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.Ignore">
            <summary>Задает оболочка совместимости MappingExpression`2.Ignore()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.IgnoreAllPropertiesWithAnInaccessibleSetter">
            <summary>Задает оболочка совместимости MappingExpression`2.IgnoreAllPropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.IgnoreAllSourcePropertiesWithAnInaccessibleSetter">
            <summary>Задает оболочка совместимости MappingExpression`2.IgnoreAllSourcePropertiesWithAnInaccessibleSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.IncludeBaseTypeType">
            <summary>Задает оболочка совместимости MappingExpression`2.IncludeBase(Type sourceBase, Type destinationBase)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.IncludeTypeType">
            <summary>Задает оболочка совместимости MappingExpression`2.Include(Type otherSourceType, Type otherDestinationType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.MaxDepthInt32">
            <summary>Задает оболочка совместимости MappingExpression`2.MaxDepth(Int32 depth)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.NullSubstituteObject">
            <summary>Задает оболочка совместимости MappingExpression`2.NullSubstitute(Object nullSubstitute)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.PreConditionFuncOfResolutionContextBoolean">
            <summary>Задает оболочка совместимости MappingExpression`2.PreCondition(Func`2&lt;ResolutionContext,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.PreConditionFuncOfT0Boolean">
            <summary>Задает оболочка совместимости MappingExpression`2.PreCondition(Func`2&lt;!0,Boolean&gt; condition)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ProfileGet">
            <summary>Задает оболочка совместимости MappingExpression`2.get_Profile()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ProjectUsingExpressionOfFuncOfT0T1">
            <summary>Задает оболочка совместимости MappingExpression`2.ProjectUsing(Expression`1&lt;Func`2&lt;!0,!1&gt;&gt; projectionExpression)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.PropertyMapGet">
            <summary>Задает оболочка совместимости MappingExpression`2.get_PropertyMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.PropertyMapSetPropertyMap">
            <summary>Задает оболочка совместимости MappingExpression`2.set_PropertyMap(PropertyMap value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ResolveUsingFuncOfResolutionResultObject">
            <summary>Задает оболочка совместимости MappingExpression`2.ResolveUsing(Func`2&lt;ResolutionResult,Object&gt; resolver)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ResolveUsingFuncOfResolutionResultT0Object">
            <summary>Задает оболочка совместимости MappingExpression`2.ResolveUsing(Func`3&lt;ResolutionResult,!0,Object&gt; resolver)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ResolveUsingFuncOfT0Object">
            <summary>Задает оболочка совместимости MappingExpression`2.ResolveUsing(Func`2&lt;!0,Object&gt; resolver)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ResolveUsingIValueResolver">
            <summary>Задает оболочка совместимости MappingExpression`2.ResolveUsing(IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ResolveUsingType">
            <summary>Задает оболочка совместимости MappingExpression`2.ResolveUsing(Type valueResolverType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.ReverseMap">
            <summary>Задает оболочка совместимости MappingExpression`2.ReverseMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.SetMappingOrderInt32">
            <summary>Задает оболочка совместимости MappingExpression`2.SetMappingOrder(Int32 mappingOrder)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.SubstituteFuncOfT0Object">
            <summary>Задает оболочка совместимости MappingExpression`2.Substitute(Func`2&lt;!0,Object&gt; substituteFunc)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.TypeMapGet">
            <summary>Задает оболочка совместимости MappingExpression`2.get_TypeMap()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.UseDestinationValue">
            <summary>Задает оболочка совместимости MappingExpression`2.UseDestinationValue()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.UseValueObject">
            <summary>Задает оболочка совместимости MappingExpression`2.UseValue(Object value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMappingExpression`2.AllInstances.WithProfileString">
            <summary>Задает оболочка совместимости MappingExpression`2.WithProfile(String profileName)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimMemberGetter">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.MemberGetter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMemberGetter.#ctor(AutoMapper.Internal.MemberGetter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMemberGetter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMemberGetter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMemberGetter.Bind(AutoMapper.IMemberGetter)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMemberGetter.Bind(AutoMapper.IMemberResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMemberGetter.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberGetter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberGetter.Constructor">
            <summary>Задает оболочка совместимости MemberGetter.MemberGetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberGetter.ResolveResolutionResult">
            <summary>Задает оболочка совместимости MemberGetter.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberGetter.StaticConstructor">
            <summary>Задает оболочка совместимости MemberGetter.MemberGetter()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimMemberGetter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberGetter.AllInstances.ResolveResolutionResult">
            <summary>Задает оболочка совместимости MemberGetter.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimMemberNameReplacer">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.MemberNameReplacer</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.#ctor(AutoMapper.Internal.MemberNameReplacer)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.ConstructorStringString">
            <summary>Задает оболочка совместимости MemberNameReplacer.MemberNameReplacer(String originalValue, String newValue)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.NewValueGet">
            <summary>Задает оболочка совместимости MemberNameReplacer.get_NewValue()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.NewValueSetString">
            <summary>Задает оболочка совместимости MemberNameReplacer.set_NewValue(String value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.OriginalValueGet">
            <summary>Задает оболочка совместимости MemberNameReplacer.get_OriginalValue()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.OriginalValueSetString">
            <summary>Задает оболочка совместимости MemberNameReplacer.set_OriginalValue(String value)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.AllInstances.NewValueGet">
            <summary>Задает оболочка совместимости MemberNameReplacer.get_NewValue()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.AllInstances.NewValueSetString">
            <summary>Задает оболочка совместимости MemberNameReplacer.set_NewValue(String value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.AllInstances.OriginalValueGet">
            <summary>Задает оболочка совместимости MemberNameReplacer.get_OriginalValue()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMemberNameReplacer.AllInstances.OriginalValueSetString">
            <summary>Задает оболочка совместимости MemberNameReplacer.set_OriginalValue(String value)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimMethodGetter">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.MethodGetter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMethodGetter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMethodGetter.#ctor(AutoMapper.Internal.MethodGetter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMethodGetter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMethodGetter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMethodGetter.Bind(AutoMapper.IMemberGetter)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMethodGetter.Bind(AutoMapper.IMemberResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimMethodGetter.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.ConstructorMethodInfo">
            <summary>Задает оболочка совместимости MethodGetter.MethodGetter(MethodInfo methodInfo)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.EqualsMethodGetter">
            <summary>Задает оболочка совместимости MethodGetter.Equals(MethodGetter other)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.EqualsObject">
            <summary>Задает оболочка совместимости MethodGetter.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.GetCustomAttributesBoolean">
            <summary>Задает оболочка совместимости MethodGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.GetCustomAttributesTypeBoolean">
            <summary>Задает оболочка совместимости MethodGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.GetHashCode">
            <summary>Задает оболочка совместимости MethodGetter.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.GetValueObject">
            <summary>Задает оболочка совместимости MethodGetter.GetValue(Object source)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.IsDefinedTypeBoolean">
            <summary>Задает оболочка совместимости MethodGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.MemberInfoGet">
            <summary>Задает оболочка совместимости MethodGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.MemberTypeGet">
            <summary>Задает оболочка совместимости MethodGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.NameGet">
            <summary>Задает оболочка совместимости MethodGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimMethodGetter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.AllInstances.EqualsMethodGetter">
            <summary>Задает оболочка совместимости MethodGetter.Equals(MethodGetter other)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости MethodGetter.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.AllInstances.GetCustomAttributesBoolean">
            <summary>Задает оболочка совместимости MethodGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.AllInstances.GetCustomAttributesTypeBoolean">
            <summary>Задает оболочка совместимости MethodGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости MethodGetter.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.AllInstances.GetValueObject">
            <summary>Задает оболочка совместимости MethodGetter.GetValue(Object source)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.AllInstances.IsDefinedTypeBoolean">
            <summary>Задает оболочка совместимости MethodGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.AllInstances.MemberInfoGet">
            <summary>Задает оболочка совместимости MethodGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.AllInstances.MemberTypeGet">
            <summary>Задает оболочка совместимости MethodGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimMethodGetter.AllInstances.NameGet">
            <summary>Задает оболочка совместимости MethodGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimNullReplacementMethod">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.NullReplacementMethod</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimNullReplacementMethod.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimNullReplacementMethod.#ctor(AutoMapper.Internal.NullReplacementMethod)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimNullReplacementMethod.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimNullReplacementMethod.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimNullReplacementMethod.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimNullReplacementMethod.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimNullReplacementMethod.ConstructorObject">
            <summary>Задает оболочка совместимости NullReplacementMethod.NullReplacementMethod(Object nullSubstitute)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimNullReplacementMethod.ResolveResolutionResult">
            <summary>Задает оболочка совместимости NullReplacementMethod.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimNullReplacementMethod.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimNullReplacementMethod.AllInstances.ResolveResolutionResult">
            <summary>Задает оболочка совместимости NullReplacementMethod.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.PrimitiveExtensions</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.GetOrDefaultOf2IDictionaryOfM0M1M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{``0,``1},``0,``1})">
            <summary>Задает оболочка совместимости PrimitiveExtensions.GetOrDefault(IDictionary`2&lt;!!0,!!1&gt; dictionary, !!0 key)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.GetDictionaryTypeType">
            <summary>Задает оболочка совместимости PrimitiveExtensions.GetDictionaryType(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.GetGenericElementTypeType">
            <summary>Задает оболочка совместимости PrimitiveExtensions.GetGenericElementType(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.GetTypeOfNullableType">
            <summary>Задает оболочка совместимости PrimitiveExtensions.GetTypeOfNullable(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.IsCollectionTypeType">
            <summary>Задает оболочка совместимости PrimitiveExtensions.IsCollectionType(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.IsDictionaryTypeType">
            <summary>Задает оболочка совместимости PrimitiveExtensions.IsDictionaryType(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.IsEnumerableTypeType">
            <summary>Задает оболочка совместимости PrimitiveExtensions.IsEnumerableType(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.IsListOrDictionaryTypeType">
            <summary>Задает оболочка совместимости PrimitiveExtensions.IsListOrDictionaryType(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.IsListTypeType">
            <summary>Задает оболочка совместимости PrimitiveExtensions.IsListType(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.IsNullableTypeType">
            <summary>Задает оболочка совместимости PrimitiveExtensions.IsNullableType(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPrimitiveExtensions.IsQueryableTypeType">
            <summary>Задает оболочка совместимости PrimitiveExtensions.IsQueryableType(Type type)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimPropertyAccessor">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.PropertyAccessor</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyAccessor.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyAccessor.#ctor(AutoMapper.Internal.PropertyAccessor)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyAccessor.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyAccessor.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyAccessor.Bind(AutoMapper.IMemberAccessor)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyAccessor.Bind(AutoMapper.IMemberGetter)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyAccessor.Bind(AutoMapper.IMemberResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyAccessor.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyAccessor.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyAccessor.ConstructorPropertyInfo">
            <summary>Задает оболочка совместимости PropertyAccessor.PropertyAccessor(PropertyInfo propertyInfo)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyAccessor.HasSetterGet">
            <summary>Задает оболочка совместимости PropertyAccessor.get_HasSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyAccessor.SetValueObjectObject">
            <summary>Задает оболочка совместимости PropertyAccessor.SetValue(Object destination, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimPropertyAccessor.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyAccessor.AllInstances.HasSetterGet">
            <summary>Задает оболочка совместимости PropertyAccessor.get_HasSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyAccessor.AllInstances.SetValueObjectObject">
            <summary>Задает оболочка совместимости PropertyAccessor.SetValue(Object destination, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimPropertyEmitter">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.PropertyEmitter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyEmitter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyEmitter.#ctor(AutoMapper.Internal.PropertyEmitter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyEmitter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyEmitter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyEmitter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyEmitter.ConstructorTypeBuilderStringTypeFieldBuilder">
            <summary>Задает оболочка совместимости PropertyEmitter.PropertyEmitter(TypeBuilder owner, String name, Type propertyType, FieldBuilder propertyChangedField)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyEmitter.GetGetterType">
            <summary>Задает оболочка совместимости PropertyEmitter.GetGetter(Type requiredType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyEmitter.GetSetterType">
            <summary>Задает оболочка совместимости PropertyEmitter.GetSetter(Type requiredType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyEmitter.PropertyTypeGet">
            <summary>Задает оболочка совместимости PropertyEmitter.get_PropertyType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyEmitter.StaticConstructor">
            <summary>Задает оболочка совместимости PropertyEmitter.PropertyEmitter()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimPropertyEmitter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyEmitter.AllInstances.GetGetterType">
            <summary>Задает оболочка совместимости PropertyEmitter.GetGetter(Type requiredType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyEmitter.AllInstances.GetSetterType">
            <summary>Задает оболочка совместимости PropertyEmitter.GetSetter(Type requiredType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyEmitter.AllInstances.PropertyTypeGet">
            <summary>Задает оболочка совместимости PropertyEmitter.get_PropertyType()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimPropertyGetter">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.PropertyGetter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyGetter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyGetter.#ctor(AutoMapper.Internal.PropertyGetter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyGetter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyGetter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyGetter.Bind(AutoMapper.IMemberGetter)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyGetter.Bind(AutoMapper.IMemberResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyGetter.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.ConstructorPropertyInfo">
            <summary>Задает оболочка совместимости PropertyGetter.PropertyGetter(PropertyInfo propertyInfo)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.EqualsObject">
            <summary>Задает оболочка совместимости PropertyGetter.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.EqualsPropertyGetter">
            <summary>Задает оболочка совместимости PropertyGetter.Equals(PropertyGetter other)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.GetCustomAttributesBoolean">
            <summary>Задает оболочка совместимости PropertyGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.GetCustomAttributesTypeBoolean">
            <summary>Задает оболочка совместимости PropertyGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.GetHashCode">
            <summary>Задает оболочка совместимости PropertyGetter.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.GetValueObject">
            <summary>Задает оболочка совместимости PropertyGetter.GetValue(Object source)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.IsDefinedTypeBoolean">
            <summary>Задает оболочка совместимости PropertyGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.MemberInfoGet">
            <summary>Задает оболочка совместимости PropertyGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.MemberTypeGet">
            <summary>Задает оболочка совместимости PropertyGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.NameGet">
            <summary>Задает оболочка совместимости PropertyGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimPropertyGetter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости PropertyGetter.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.AllInstances.EqualsPropertyGetter">
            <summary>Задает оболочка совместимости PropertyGetter.Equals(PropertyGetter other)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.AllInstances.GetCustomAttributesBoolean">
            <summary>Задает оболочка совместимости PropertyGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.AllInstances.GetCustomAttributesTypeBoolean">
            <summary>Задает оболочка совместимости PropertyGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости PropertyGetter.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.AllInstances.GetValueObject">
            <summary>Задает оболочка совместимости PropertyGetter.GetValue(Object source)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.AllInstances.IsDefinedTypeBoolean">
            <summary>Задает оболочка совместимости PropertyGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.AllInstances.MemberInfoGet">
            <summary>Задает оболочка совместимости PropertyGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.AllInstances.MemberTypeGet">
            <summary>Задает оболочка совместимости PropertyGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyGetter.AllInstances.NameGet">
            <summary>Задает оболочка совместимости PropertyGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimPropertyNameResolver">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.PropertyNameResolver</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyNameResolver.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyNameResolver.#ctor(AutoMapper.Internal.PropertyNameResolver)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyNameResolver.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyNameResolver.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimPropertyNameResolver.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyNameResolver.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyNameResolver.ConstructorTypeString">
            <summary>Задает оболочка совместимости PropertyNameResolver.PropertyNameResolver(Type sourceType, String propertyName)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyNameResolver.ResolveResolutionResult">
            <summary>Задает оболочка совместимости PropertyNameResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimPropertyNameResolver.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimPropertyNameResolver.AllInstances.ResolveResolutionResult">
            <summary>Задает оболочка совместимости PropertyNameResolver.Resolve(ResolutionResult source)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimProxyBase">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.ProxyBase</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimProxyBase.#ctor(AutoMapper.Internal.ProxyBase)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimProxyBase.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimProxyBase.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimProxyBase.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimProxyBase.Constructor">
            <summary>Задает оболочка совместимости ProxyBase.ProxyBase()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimProxyBase.NotifyPropertyChangedPropertyChangedEventHandlerString">
            <summary>Задает оболочка совместимости ProxyBase.NotifyPropertyChanged(PropertyChangedEventHandler handler, String method)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimProxyBase.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimProxyBase.AllInstances.NotifyPropertyChangedPropertyChangedEventHandlerString">
            <summary>Задает оболочка совместимости ProxyBase.NotifyPropertyChanged(PropertyChangedEventHandler handler, String method)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimProxyGenerator">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.ProxyGenerator</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimProxyGenerator.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimProxyGenerator.#ctor(AutoMapper.Internal.ProxyGenerator)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimProxyGenerator.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimProxyGenerator.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimProxyGenerator.Bind(AutoMapper.Internal.IProxyGenerator)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimProxyGenerator.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimProxyGenerator.Constructor">
            <summary>Задает оболочка совместимости ProxyGenerator.ProxyGenerator()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimProxyGenerator.CreateProxyModule">
            <summary>Задает оболочка совместимости ProxyGenerator.CreateProxyModule()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimProxyGenerator.CreateProxyTypeType">
            <summary>Задает оболочка совместимости ProxyGenerator.CreateProxyType(Type interfaceType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimProxyGenerator.GetProxyTypeType">
            <summary>Задает оболочка совместимости ProxyGenerator.GetProxyType(Type interfaceType)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimProxyGenerator.StaticConstructor">
            <summary>Задает оболочка совместимости ProxyGenerator.ProxyGenerator()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimProxyGenerator.StringToByteArrayString">
            <summary>Задает оболочка совместимости ProxyGenerator.StringToByteArray(String hex)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimProxyGenerator.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimProxyGenerator.AllInstances.GetProxyTypeType">
            <summary>Задает оболочка совместимости ProxyGenerator.GetProxyType(Type interfaceType)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimResolutionExpression">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.ResolutionExpression</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression.#ctor(AutoMapper.Internal.ResolutionExpression)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression.Bind(AutoMapper.IResolutionExpression)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression.Bind(AutoMapper.IResolverConfigurationExpression)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression.Bind(AutoMapper.IResolutionExpression{System.Object})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression.Bind(AutoMapper.IResolverConfigurationExpression{System.Object})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression.ConstructorTypePropertyMap">
            <summary>Задает оболочка совместимости ResolutionExpression.ResolutionExpression(Type sourceType, PropertyMap propertyMap)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimResolutionExpression.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimResolutionExpression`1">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.ResolutionExpression`1</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.#ctor(AutoMapper.Internal.ResolutionExpression{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.Bind(AutoMapper.IResolutionExpression)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.Bind(AutoMapper.IResolverConfigurationExpression)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.Bind(AutoMapper.IResolutionExpression{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.Bind(AutoMapper.IResolverConfigurationExpression{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.AutoMapperIResolverConfigurationExpressionConstructedByFuncOfIValueResolver">
            <summary>Задает оболочка совместимости ResolutionExpression`1.AutoMapper.IResolverConfigurationExpression.ConstructedBy(Func`1&lt;IValueResolver&gt; constructor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.ConstructedByFuncOfIValueResolver">
            <summary>Задает оболочка совместимости ResolutionExpression`1.ConstructedBy(Func`1&lt;IValueResolver&gt; constructor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.ConstructorTypePropertyMap">
            <summary>Задает оболочка совместимости ResolutionExpression`1.ResolutionExpression`1(Type sourceType, PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.FromMemberExpressionOfFuncOfT0Object">
            <summary>Задает оболочка совместимости ResolutionExpression`1.FromMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.FromMemberString">
            <summary>Задает оболочка совместимости ResolutionExpression`1.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.AllInstances.AutoMapperIResolverConfigurationExpressionConstructedByFuncOfIValueResolver">
            <summary>Задает оболочка совместимости ResolutionExpression`1.AutoMapper.IResolverConfigurationExpression.ConstructedBy(Func`1&lt;IValueResolver&gt; constructor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.AllInstances.ConstructedByFuncOfIValueResolver">
            <summary>Задает оболочка совместимости ResolutionExpression`1.ConstructedBy(Func`1&lt;IValueResolver&gt; constructor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.AllInstances.FromMemberExpressionOfFuncOfT0Object">
            <summary>Задает оболочка совместимости ResolutionExpression`1.FromMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`1.AllInstances.FromMemberString">
            <summary>Задает оболочка совместимости ResolutionExpression`1.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimResolutionExpression`2">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.ResolutionExpression`2</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.#ctor(AutoMapper.Internal.ResolutionExpression{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.Bind(AutoMapper.IResolverConfigurationExpression{`0,`1})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.ConstructedByFuncOfT1">
            <summary>Задает оболочка совместимости ResolutionExpression`2.ConstructedBy(Func`1&lt;!1&gt; constructor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.ConstructorTypePropertyMap">
            <summary>Задает оболочка совместимости ResolutionExpression`2.ResolutionExpression`2(Type sourceType, PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.FromMemberExpressionOfFuncOfT0Object">
            <summary>Задает оболочка совместимости ResolutionExpression`2.FromMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.FromMemberString">
            <summary>Задает оболочка совместимости ResolutionExpression`2.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.AllInstances.ConstructedByFuncOfT1">
            <summary>Задает оболочка совместимости ResolutionExpression`2.ConstructedBy(Func`1&lt;!1&gt; constructor)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.AllInstances.FromMemberExpressionOfFuncOfT0Object">
            <summary>Задает оболочка совместимости ResolutionExpression`2.FromMember(Expression`1&lt;Func`2&lt;!0,Object&gt;&gt; sourceMember)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimResolutionExpression`2.AllInstances.FromMemberString">
            <summary>Задает оболочка совместимости ResolutionExpression`2.FromMember(String sourcePropertyName)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.ValueTypeFieldAccessor</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.#ctor(AutoMapper.Internal.ValueTypeFieldAccessor)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.Bind(AutoMapper.IMemberAccessor)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.Bind(AutoMapper.IMemberGetter)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.Bind(AutoMapper.IMemberResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.ConstructorFieldInfo">
            <summary>Задает оболочка совместимости ValueTypeFieldAccessor.ValueTypeFieldAccessor(FieldInfo fieldInfo)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.SetValueObjectObject">
            <summary>Задает оболочка совместимости ValueTypeFieldAccessor.SetValue(Object destination, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimValueTypeFieldAccessor.AllInstances.SetValueObjectObject">
            <summary>Задает оболочка совместимости ValueTypeFieldAccessor.SetValue(Object destination, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor">
            <summary>Тип оболочки совместимости для AutoMapper.Internal.ValueTypePropertyAccessor</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.#ctor(AutoMapper.Internal.ValueTypePropertyAccessor)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.Bind(AutoMapper.IMemberAccessor)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.Bind(AutoMapper.IMemberGetter)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.Bind(AutoMapper.IMemberResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.Bind(AutoMapper.IValueResolver)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.ConstructorPropertyInfo">
            <summary>Задает оболочка совместимости ValueTypePropertyAccessor.ValueTypePropertyAccessor(PropertyInfo propertyInfo)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.HasSetterGet">
            <summary>Задает оболочка совместимости ValueTypePropertyAccessor.get_HasSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.SetValueObjectObject">
            <summary>Задает оболочка совместимости ValueTypePropertyAccessor.SetValue(Object destination, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.AllInstances.HasSetterGet">
            <summary>Задает оболочка совместимости ValueTypePropertyAccessor.get_HasSetter()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.ShimValueTypePropertyAccessor.AllInstances.SetValueObjectObject">
            <summary>Задает оболочка совместимости ValueTypePropertyAccessor.SetValue(Object destination, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubCreateTypeMapExpression">
            <summary>Тип заглушки AutoMapper.Internal.CreateTypeMapExpression</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubCreateTypeMapExpression.#ctor(AutoMapper.TypePair,AutoMapper.MemberList,System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubCreateTypeMapExpression.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubCreateTypeMapExpression</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubCreateTypeMapExpression.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubCreateTypeMapExpression.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubCreateTypeMapExpression.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubDefaultResolver">
            <summary>Тип заглушки AutoMapper.Internal.DefaultResolver</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDefaultResolver.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDefaultResolver.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDefaultResolver</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDefaultResolver.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDefaultResolver.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDefaultResolver.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubDeferredInstantiatedConverter">
            <summary>Тип заглушки AutoMapper.Internal.DeferredInstantiatedConverter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDeferredInstantiatedConverter.#ctor(System.Type,System.Func{AutoMapper.ResolutionContext,System.Object})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDeferredInstantiatedConverter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDeferredInstantiatedConverter</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDeferredInstantiatedConverter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDeferredInstantiatedConverter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDeferredInstantiatedConverter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubDeferredInstantiatedConverter`2">
            <summary>Тип заглушки AutoMapper.Internal.DeferredInstantiatedConverter`2</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDeferredInstantiatedConverter`2.#ctor(System.Func{AutoMapper.ResolutionContext,AutoMapper.ITypeConverter{`0,`1}})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDeferredInstantiatedConverter`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDeferredInstantiatedConverter</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDeferredInstantiatedConverter`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDeferredInstantiatedConverter`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDeferredInstantiatedConverter`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubDeferredInstantiatedResolver">
            <summary>Тип заглушки AutoMapper.Internal.DeferredInstantiatedResolver</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDeferredInstantiatedResolver.#ctor(System.Func{AutoMapper.ResolutionContext,AutoMapper.IValueResolver})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDeferredInstantiatedResolver.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDeferredInstantiatedResolver</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDeferredInstantiatedResolver.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDeferredInstantiatedResolver.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDeferredInstantiatedResolver.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubDelegateBasedResolver`1">
            <summary>Тип заглушки AutoMapper.Internal.DelegateBasedResolver`1</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDelegateBasedResolver`1.#ctor(System.Func{AutoMapper.ResolutionResult,System.Object})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDelegateBasedResolver`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDelegateBasedResolver</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDelegateBasedResolver`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDelegateBasedResolver`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDelegateBasedResolver`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubDelegateBasedResolver`2">
            <summary>Тип заглушки AutoMapper.Internal.DelegateBasedResolver`2</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDelegateBasedResolver`2.#ctor(System.Func{`0,`1})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDelegateBasedResolver`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDelegateBasedResolver</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDelegateBasedResolver`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDelegateBasedResolver`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDelegateBasedResolver`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubDelegateFactory">
            <summary>Тип заглушки AutoMapper.Internal.DelegateFactory</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDelegateFactory.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubDelegateFactory.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDelegateFactory</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDelegateFactory.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDelegateFactory.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubDelegateFactory.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubFieldAccessor">
            <summary>Тип заглушки AutoMapper.Internal.FieldAccessor</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldAccessor.#ctor(System.Reflection.FieldInfo)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldAccessor.Equals(System.Object)">
            <summary>Задает заглушка FieldGetter.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldAccessor.EqualsObject">
            <summary>Задает stub FieldGetter.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldAccessor.GetCustomAttributes(System.Boolean)">
            <summary>Задает заглушка FieldGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldAccessor.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>Задает заглушка FieldGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldAccessor.GetCustomAttributesBoolean">
            <summary>Задает stub FieldGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldAccessor.GetCustomAttributesTypeBoolean">
            <summary>Задает stub FieldGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldAccessor.GetHashCode">
            <summary>Задает заглушка FieldGetter.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldAccessor.GetHashCode01">
            <summary>Задает stub FieldGetter.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldAccessor.GetValue(System.Object)">
            <summary>Задает заглушка FieldGetter.GetValue(Object source)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldAccessor.GetValueObject">
            <summary>Задает stub FieldGetter.GetValue(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldAccessor.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubFieldAccessor</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldAccessor.IsDefined(System.Type,System.Boolean)">
            <summary>Задает заглушка FieldGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldAccessor.IsDefinedTypeBoolean">
            <summary>Задает stub FieldGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldAccessor.MemberInfoGet">
            <summary>Задает stub FieldGetter.get_MemberInfo()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldAccessor.MemberTypeGet">
            <summary>Задает stub FieldGetter.get_MemberType()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldAccessor.NameGet">
            <summary>Задает stub FieldGetter.get_Name()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubFieldAccessor.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubFieldAccessor.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubFieldAccessor.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubFieldAccessor.MemberInfo">
            <summary>Задает stub FieldGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubFieldAccessor.MemberType">
            <summary>Задает stub FieldGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubFieldAccessor.Name">
            <summary>Задает stub FieldGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubFieldGetter">
            <summary>Тип заглушки AutoMapper.Internal.FieldGetter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldGetter.#ctor(System.Reflection.FieldInfo)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldGetter.Equals(System.Object)">
            <summary>Задает заглушка FieldGetter.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldGetter.EqualsObject">
            <summary>Задает stub FieldGetter.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldGetter.GetCustomAttributes(System.Boolean)">
            <summary>Задает заглушка FieldGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldGetter.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>Задает заглушка FieldGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldGetter.GetCustomAttributesBoolean">
            <summary>Задает stub FieldGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldGetter.GetCustomAttributesTypeBoolean">
            <summary>Задает stub FieldGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldGetter.GetHashCode">
            <summary>Задает заглушка FieldGetter.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldGetter.GetHashCode01">
            <summary>Задает stub FieldGetter.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldGetter.GetValue(System.Object)">
            <summary>Задает заглушка FieldGetter.GetValue(Object source)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldGetter.GetValueObject">
            <summary>Задает stub FieldGetter.GetValue(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldGetter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubFieldGetter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubFieldGetter.IsDefined(System.Type,System.Boolean)">
            <summary>Задает заглушка FieldGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldGetter.IsDefinedTypeBoolean">
            <summary>Задает stub FieldGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldGetter.MemberInfoGet">
            <summary>Задает stub FieldGetter.get_MemberInfo()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldGetter.MemberTypeGet">
            <summary>Задает stub FieldGetter.get_MemberType()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubFieldGetter.NameGet">
            <summary>Задает stub FieldGetter.get_Name()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubFieldGetter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubFieldGetter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubFieldGetter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubFieldGetter.MemberInfo">
            <summary>Задает stub FieldGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubFieldGetter.MemberType">
            <summary>Задает stub FieldGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubFieldGetter.Name">
            <summary>Задает stub FieldGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubIEnumNameValueMapper">
            <summary>Тип заглушки AutoMapper.Internal.IEnumNameValueMapper</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubIEnumNameValueMapper.#ctor">
            <summary>Инициализирует новый экземпляр type StubIEnumNameValueMapper</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubIEnumNameValueMapper.am::AutoMapper#Internal#IEnumNameValueMapper#Convert(System.Type,System.Type,AutoMapper.ResolutionContext)">
            <summary>Задает заглушка IEnumNameValueMapper.Convert(Type enumSourceType, Type enumDestinationType, ResolutionContext context)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubIEnumNameValueMapper.am::AutoMapper#Internal#IEnumNameValueMapper#IsMatch(System.Type,System.String)">
            <summary>Задает заглушка IEnumNameValueMapper.IsMatch(Type enumDestinationType, String sourceValue)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubIEnumNameValueMapper.ConvertTypeTypeResolutionContext">
            <summary>Задает stub IEnumNameValueMapper.Convert(Type enumSourceType, Type enumDestinationType, ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubIEnumNameValueMapper.IsMatchTypeString">
            <summary>Задает stub IEnumNameValueMapper.IsMatch(Type enumDestinationType, String sourceValue)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubIEnumNameValueMapperFactory">
            <summary>Тип заглушки AutoMapper.Internal.IEnumNameValueMapperFactory</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubIEnumNameValueMapperFactory.#ctor">
            <summary>Инициализирует новый экземпляр type StubIEnumNameValueMapperFactory</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubIEnumNameValueMapperFactory.am::AutoMapper#Internal#IEnumNameValueMapperFactory#Create">
            <summary>Задает заглушка IEnumNameValueMapperFactory.Create()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubIEnumNameValueMapperFactory.Create">
            <summary>Задает stub IEnumNameValueMapperFactory.Create()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubIProxyGenerator">
            <summary>Тип заглушки AutoMapper.Internal.IProxyGenerator</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubIProxyGenerator.#ctor">
            <summary>Инициализирует новый экземпляр type StubIProxyGenerator</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubIProxyGenerator.am::AutoMapper#Internal#IProxyGenerator#GetProxyType(System.Type)">
            <summary>Задает заглушка IProxyGenerator.GetProxyType(Type interfaceType)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubIProxyGenerator.GetProxyTypeType">
            <summary>Задает stub IProxyGenerator.GetProxyType(Type interfaceType)</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubMappingExpression">
            <summary>Тип заглушки AutoMapper.Internal.MappingExpression</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMappingExpression.#ctor(AutoMapper.TypeMap,System.Func{System.Type,System.Object},AutoMapper.IProfileExpression)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMappingExpression.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMappingExpression</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMappingExpression.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMappingExpression.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMappingExpression.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubMappingExpression`2">
            <summary>Тип заглушки AutoMapper.Internal.MappingExpression`2</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMappingExpression`2.#ctor(AutoMapper.TypeMap,System.Func{System.Type,System.Object},AutoMapper.IProfileExpression)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMappingExpression`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMappingExpression</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMappingExpression`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMappingExpression`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMappingExpression`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubMemberGetter">
            <summary>Тип заглушки AutoMapper.Internal.MemberGetter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMemberGetter.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMemberGetter.GetCustomAttributes(System.Boolean)">
            <summary>Задает заглушка MemberGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMemberGetter.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>Задает заглушка MemberGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMemberGetter.GetCustomAttributesBoolean">
            <summary>Задает stub MemberGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMemberGetter.GetCustomAttributesTypeBoolean">
            <summary>Задает stub MemberGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMemberGetter.GetValue(System.Object)">
            <summary>Задает заглушка MemberGetter.GetValue(Object source)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMemberGetter.GetValueObject">
            <summary>Задает stub MemberGetter.GetValue(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMemberGetter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMemberGetter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMemberGetter.IsDefined(System.Type,System.Boolean)">
            <summary>Задает заглушка MemberGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMemberGetter.IsDefinedTypeBoolean">
            <summary>Задает stub MemberGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMemberGetter.MemberInfoGet">
            <summary>Задает stub MemberGetter.get_MemberInfo()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMemberGetter.MemberTypeGet">
            <summary>Задает stub MemberGetter.get_MemberType()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMemberGetter.NameGet">
            <summary>Задает stub MemberGetter.get_Name()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMemberGetter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMemberGetter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMemberGetter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMemberGetter.MemberInfo">
            <summary>Задает stub MemberGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMemberGetter.MemberType">
            <summary>Задает stub MemberGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMemberGetter.Name">
            <summary>Задает stub MemberGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubMemberNameReplacer">
            <summary>Тип заглушки AutoMapper.Internal.MemberNameReplacer</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMemberNameReplacer.#ctor(System.String,System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMemberNameReplacer.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMemberNameReplacer</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMemberNameReplacer.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMemberNameReplacer.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMemberNameReplacer.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubMethodGetter">
            <summary>Тип заглушки AutoMapper.Internal.MethodGetter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMethodGetter.#ctor(System.Reflection.MethodInfo)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMethodGetter.Equals(System.Object)">
            <summary>Задает заглушка MethodGetter.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMethodGetter.EqualsObject">
            <summary>Задает stub MethodGetter.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMethodGetter.GetCustomAttributes(System.Boolean)">
            <summary>Задает заглушка MethodGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMethodGetter.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>Задает заглушка MethodGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMethodGetter.GetCustomAttributesBoolean">
            <summary>Задает stub MethodGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMethodGetter.GetCustomAttributesTypeBoolean">
            <summary>Задает stub MethodGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMethodGetter.GetHashCode">
            <summary>Задает заглушка MethodGetter.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMethodGetter.GetHashCode01">
            <summary>Задает stub MethodGetter.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMethodGetter.GetValue(System.Object)">
            <summary>Задает заглушка MethodGetter.GetValue(Object source)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMethodGetter.GetValueObject">
            <summary>Задает stub MethodGetter.GetValue(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMethodGetter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMethodGetter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubMethodGetter.IsDefined(System.Type,System.Boolean)">
            <summary>Задает заглушка MethodGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMethodGetter.IsDefinedTypeBoolean">
            <summary>Задает stub MethodGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMethodGetter.MemberInfoGet">
            <summary>Задает stub MethodGetter.get_MemberInfo()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMethodGetter.MemberTypeGet">
            <summary>Задает stub MethodGetter.get_MemberType()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubMethodGetter.NameGet">
            <summary>Задает stub MethodGetter.get_Name()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMethodGetter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMethodGetter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMethodGetter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMethodGetter.MemberInfo">
            <summary>Задает stub MethodGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMethodGetter.MemberType">
            <summary>Задает stub MethodGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubMethodGetter.Name">
            <summary>Задает stub MethodGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubNullReplacementMethod">
            <summary>Тип заглушки AutoMapper.Internal.NullReplacementMethod</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubNullReplacementMethod.#ctor(System.Object)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubNullReplacementMethod.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNullReplacementMethod</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubNullReplacementMethod.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubNullReplacementMethod.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubNullReplacementMethod.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubPropertyAccessor">
            <summary>Тип заглушки AutoMapper.Internal.PropertyAccessor</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyAccessor.#ctor(System.Reflection.PropertyInfo)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyAccessor.Equals(System.Object)">
            <summary>Задает заглушка PropertyGetter.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyAccessor.EqualsObject">
            <summary>Задает stub PropertyGetter.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyAccessor.GetCustomAttributes(System.Boolean)">
            <summary>Задает заглушка PropertyGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyAccessor.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>Задает заглушка PropertyGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyAccessor.GetCustomAttributesBoolean">
            <summary>Задает stub PropertyGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyAccessor.GetCustomAttributesTypeBoolean">
            <summary>Задает stub PropertyGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyAccessor.GetHashCode">
            <summary>Задает заглушка PropertyGetter.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyAccessor.GetHashCode01">
            <summary>Задает stub PropertyGetter.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyAccessor.GetValue(System.Object)">
            <summary>Задает заглушка PropertyGetter.GetValue(Object source)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyAccessor.GetValueObject">
            <summary>Задает stub PropertyGetter.GetValue(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyAccessor.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPropertyAccessor</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyAccessor.IsDefined(System.Type,System.Boolean)">
            <summary>Задает заглушка PropertyGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyAccessor.IsDefinedTypeBoolean">
            <summary>Задает stub PropertyGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyAccessor.MemberInfoGet">
            <summary>Задает stub PropertyGetter.get_MemberInfo()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyAccessor.MemberTypeGet">
            <summary>Задает stub PropertyGetter.get_MemberType()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyAccessor.NameGet">
            <summary>Задает stub PropertyGetter.get_Name()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>Задает заглушка PropertyAccessor.SetValue(Object destination, Object value)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyAccessor.SetValueObjectObject">
            <summary>Задает stub PropertyAccessor.SetValue(Object destination, Object value)</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyAccessor.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyAccessor.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyAccessor.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyAccessor.MemberInfo">
            <summary>Задает stub PropertyGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyAccessor.MemberType">
            <summary>Задает stub PropertyGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyAccessor.Name">
            <summary>Задает stub PropertyGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubPropertyEmitter">
            <summary>Тип заглушки AutoMapper.Internal.PropertyEmitter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyEmitter.#ctor(System.Reflection.Emit.TypeBuilder,System.String,System.Type,System.Reflection.Emit.FieldBuilder)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyEmitter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPropertyEmitter</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyEmitter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyEmitter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyEmitter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubPropertyGetter">
            <summary>Тип заглушки AutoMapper.Internal.PropertyGetter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyGetter.#ctor(System.Reflection.PropertyInfo)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyGetter.Equals(System.Object)">
            <summary>Задает заглушка PropertyGetter.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyGetter.EqualsObject">
            <summary>Задает stub PropertyGetter.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyGetter.GetCustomAttributes(System.Boolean)">
            <summary>Задает заглушка PropertyGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyGetter.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>Задает заглушка PropertyGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyGetter.GetCustomAttributesBoolean">
            <summary>Задает stub PropertyGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyGetter.GetCustomAttributesTypeBoolean">
            <summary>Задает stub PropertyGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyGetter.GetHashCode">
            <summary>Задает заглушка PropertyGetter.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyGetter.GetHashCode01">
            <summary>Задает stub PropertyGetter.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyGetter.GetValue(System.Object)">
            <summary>Задает заглушка PropertyGetter.GetValue(Object source)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyGetter.GetValueObject">
            <summary>Задает stub PropertyGetter.GetValue(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyGetter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPropertyGetter</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyGetter.IsDefined(System.Type,System.Boolean)">
            <summary>Задает заглушка PropertyGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyGetter.IsDefinedTypeBoolean">
            <summary>Задает stub PropertyGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyGetter.MemberInfoGet">
            <summary>Задает stub PropertyGetter.get_MemberInfo()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyGetter.MemberTypeGet">
            <summary>Задает stub PropertyGetter.get_MemberType()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubPropertyGetter.NameGet">
            <summary>Задает stub PropertyGetter.get_Name()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyGetter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyGetter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyGetter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyGetter.MemberInfo">
            <summary>Задает stub PropertyGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyGetter.MemberType">
            <summary>Задает stub PropertyGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyGetter.Name">
            <summary>Задает stub PropertyGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubPropertyNameResolver">
            <summary>Тип заглушки AutoMapper.Internal.PropertyNameResolver</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyNameResolver.#ctor(System.Type,System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubPropertyNameResolver.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPropertyNameResolver</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyNameResolver.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyNameResolver.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubPropertyNameResolver.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubProxyBase">
            <summary>Тип заглушки AutoMapper.Internal.ProxyBase</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubProxyBase.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubProxyBase.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubProxyBase</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubProxyBase.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubProxyBase.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubProxyBase.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubProxyGenerator">
            <summary>Тип заглушки AutoMapper.Internal.ProxyGenerator</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubProxyGenerator.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubProxyGenerator.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubProxyGenerator</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubProxyGenerator.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubProxyGenerator.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubProxyGenerator.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubResolutionExpression">
            <summary>Тип заглушки AutoMapper.Internal.ResolutionExpression</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubResolutionExpression.#ctor(System.Type,AutoMapper.PropertyMap)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubResolutionExpression.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubResolutionExpression</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubResolutionExpression.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubResolutionExpression.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubResolutionExpression.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubResolutionExpression`1">
            <summary>Тип заглушки AutoMapper.Internal.ResolutionExpression`1</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubResolutionExpression`1.#ctor(System.Type,AutoMapper.PropertyMap)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubResolutionExpression`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubResolutionExpression</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubResolutionExpression`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubResolutionExpression`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubResolutionExpression`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubResolutionExpression`2">
            <summary>Тип заглушки AutoMapper.Internal.ResolutionExpression`2</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubResolutionExpression`2.#ctor(System.Type,AutoMapper.PropertyMap)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubResolutionExpression`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubResolutionExpression</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubResolutionExpression`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubResolutionExpression`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubResolutionExpression`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor">
            <summary>Тип заглушки AutoMapper.Internal.ValueTypeFieldAccessor</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.#ctor(System.Reflection.FieldInfo)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.Equals(System.Object)">
            <summary>Задает заглушка FieldGetter.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.EqualsObject">
            <summary>Задает stub FieldGetter.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.GetCustomAttributes(System.Boolean)">
            <summary>Задает заглушка FieldGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>Задает заглушка FieldGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.GetCustomAttributesBoolean">
            <summary>Задает stub FieldGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.GetCustomAttributesTypeBoolean">
            <summary>Задает stub FieldGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.GetHashCode">
            <summary>Задает заглушка FieldGetter.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.GetHashCode01">
            <summary>Задает stub FieldGetter.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.GetValue(System.Object)">
            <summary>Задает заглушка FieldGetter.GetValue(Object source)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.GetValueObject">
            <summary>Задает stub FieldGetter.GetValue(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubValueTypeFieldAccessor</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.IsDefined(System.Type,System.Boolean)">
            <summary>Задает заглушка FieldGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.IsDefinedTypeBoolean">
            <summary>Задает stub FieldGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.MemberInfoGet">
            <summary>Задает stub FieldGetter.get_MemberInfo()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.MemberTypeGet">
            <summary>Задает stub FieldGetter.get_MemberType()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.NameGet">
            <summary>Задает stub FieldGetter.get_Name()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.MemberInfo">
            <summary>Задает stub FieldGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.MemberType">
            <summary>Задает stub FieldGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubValueTypeFieldAccessor.Name">
            <summary>Задает stub FieldGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor">
            <summary>Тип заглушки AutoMapper.Internal.ValueTypePropertyAccessor</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.#ctor(System.Reflection.PropertyInfo)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.Equals(System.Object)">
            <summary>Задает заглушка PropertyGetter.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.EqualsObject">
            <summary>Задает stub PropertyGetter.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.GetCustomAttributes(System.Boolean)">
            <summary>Задает заглушка PropertyGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>Задает заглушка PropertyGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.GetCustomAttributesBoolean">
            <summary>Задает stub PropertyGetter.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.GetCustomAttributesTypeBoolean">
            <summary>Задает stub PropertyGetter.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.GetHashCode">
            <summary>Задает заглушка PropertyGetter.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.GetHashCode01">
            <summary>Задает stub PropertyGetter.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.GetValue(System.Object)">
            <summary>Задает заглушка PropertyGetter.GetValue(Object source)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.GetValueObject">
            <summary>Задает stub PropertyGetter.GetValue(Object source)</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubValueTypePropertyAccessor</summary>
        </member>
        <member name="M:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.IsDefined(System.Type,System.Boolean)">
            <summary>Задает заглушка PropertyGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.IsDefinedTypeBoolean">
            <summary>Задает stub PropertyGetter.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.MemberInfoGet">
            <summary>Задает stub PropertyGetter.get_MemberInfo()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.MemberTypeGet">
            <summary>Задает stub PropertyGetter.get_MemberType()</summary>
        </member>
        <member name="F:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.NameGet">
            <summary>Задает stub PropertyGetter.get_Name()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.MemberInfo">
            <summary>Задает stub PropertyGetter.get_MemberInfo()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.MemberType">
            <summary>Задает stub PropertyGetter.get_MemberType()</summary>
        </member>
        <member name="P:AutoMapper.Internal.Fakes.StubValueTypePropertyAccessor.Name">
            <summary>Задает stub PropertyGetter.get_Name()</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimArrayMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.ArrayMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimArrayMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimArrayMapper.#ctor(AutoMapper.Mappers.ArrayMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimArrayMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimArrayMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimArrayMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.ClearEnumerableArray">
            <summary>Задает оболочка совместимости ArrayMapper.ClearEnumerable(Array enumerable)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.Constructor">
            <summary>Задает оболочка совместимости ArrayMapper.ArrayMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.CreateDestinationObjectBaseTypeInt32">
            <summary>Задает оболочка совместимости ArrayMapper.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.GetOrCreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает оболочка совместимости ArrayMapper.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости ArrayMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.SetElementValueArrayObjectInt32">
            <summary>Задает оболочка совместимости ArrayMapper.SetElementValue(Array destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.ShouldAssignEnumerableResolutionContext">
            <summary>Задает оболочка совместимости ArrayMapper.ShouldAssignEnumerable(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimArrayMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.AllInstances.ClearEnumerableArray">
            <summary>Задает оболочка совместимости ArrayMapper.ClearEnumerable(Array enumerable)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.AllInstances.CreateDestinationObjectBaseTypeInt32">
            <summary>Задает оболочка совместимости ArrayMapper.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.AllInstances.GetOrCreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает оболочка совместимости ArrayMapper.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости ArrayMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.AllInstances.SetElementValueArrayObjectInt32">
            <summary>Задает оболочка совместимости ArrayMapper.SetElementValue(Array destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimArrayMapper.AllInstances.ShouldAssignEnumerableResolutionContext">
            <summary>Задает оболочка совместимости ArrayMapper.ShouldAssignEnumerable(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimAssignableMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.AssignableMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimAssignableMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimAssignableMapper.#ctor(AutoMapper.Mappers.AssignableMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimAssignableMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimAssignableMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimAssignableMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimAssignableMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimAssignableMapper.Constructor">
            <summary>Задает оболочка совместимости AssignableMapper.AssignableMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimAssignableMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости AssignableMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimAssignableMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости AssignableMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimAssignableMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimAssignableMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости AssignableMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimAssignableMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости AssignableMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimCollectionMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.CollectionMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimCollectionMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimCollectionMapper.#ctor(AutoMapper.Mappers.CollectionMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimCollectionMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimCollectionMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimCollectionMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimCollectionMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimCollectionMapper.Constructor">
            <summary>Задает оболочка совместимости CollectionMapper.CollectionMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimCollectionMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости CollectionMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimCollectionMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости CollectionMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimCollectionMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimCollectionMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости CollectionMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimCollectionMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости CollectionMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.ConditionalObjectMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.#ctor(AutoMapper.Mappers.ConditionalObjectMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.Bind(AutoMapper.Mappers.IConditionalObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.ConstructorString">
            <summary>Задает оболочка совместимости ConditionalObjectMapper.ConditionalObjectMapper(String profileName)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.ConventionsGet">
            <summary>Задает оболочка совместимости ConditionalObjectMapper.get_Conventions()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости ConditionalObjectMapper.IsMatch(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.ProfileNameGet">
            <summary>Задает оболочка совместимости ConditionalObjectMapper.get_ProfileName()</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.AllInstances.ConventionsGet">
            <summary>Задает оболочка совместимости ConditionalObjectMapper.get_Conventions()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости ConditionalObjectMapper.IsMatch(TypePair typePair)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConditionalObjectMapper.AllInstances.ProfileNameGet">
            <summary>Задает оболочка совместимости ConditionalObjectMapper.get_ProfileName()</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimConventionGeneratorExtensions">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.ConventionGeneratorExtensions</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConventionGeneratorExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConventionGeneratorExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConventionGeneratorExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConventionGeneratorExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConventionGeneratorExtensions.WhereIConditionalObjectMapperFuncOfTypeTypeBoolean">
            <summary>Задает оболочка совместимости ConventionGeneratorExtensions.Where(IConditionalObjectMapper self, Func`3&lt;Type,Type,Boolean&gt; condition)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimConvertMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.ConvertMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConvertMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConvertMapper.#ctor(AutoMapper.Mappers.ConvertMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConvertMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConvertMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimConvertMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConvertMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConvertMapper.Constructor">
            <summary>Задает оболочка совместимости ConvertMapper.ConvertMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConvertMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости ConvertMapper.IsMatch(TypePair types)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConvertMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости ConvertMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimConvertMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConvertMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости ConvertMapper.IsMatch(TypePair types)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimConvertMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости ConvertMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimDictionaryMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.DictionaryMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.#ctor(AutoMapper.Mappers.DictionaryMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.Constructor">
            <summary>Задает оболочка совместимости DictionaryMapper.DictionaryMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.GetKeyValuePairEnumeratorResolutionContextType">
            <summary>Задает оболочка совместимости DictionaryMapper.GetKeyValuePairEnumerator(ResolutionContext context, Type sourceKvpType)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости DictionaryMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости DictionaryMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.StaticConstructor">
            <summary>Задает оболочка совместимости DictionaryMapper.DictionaryMapper()</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости DictionaryMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDictionaryMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости DictionaryMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimDynamicMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.DynamicMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimDynamicMapper.#ctor(AutoMapper.Mappers.DynamicMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimDynamicMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimDynamicMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimDynamicMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDynamicMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDynamicMapper.Constructor">
            <summary>Задает оболочка совместимости DynamicMapper.DynamicMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDynamicMapper.GetDynamicallyMemberInfoObject">
            <summary>Задает оболочка совместимости DynamicMapper.GetDynamically(MemberInfo member, Object target)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDynamicMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости DynamicMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDynamicMapper.SetDynamicallyMemberInfoObjectObject">
            <summary>Задает оболочка совместимости DynamicMapper.SetDynamically(MemberInfo member, Object target, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimDynamicMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDynamicMapper.AllInstances.GetDynamicallyMemberInfoObject">
            <summary>Задает оболочка совместимости DynamicMapper.GetDynamically(MemberInfo member, Object target)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDynamicMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости DynamicMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimDynamicMapper.AllInstances.SetDynamicallyMemberInfoObjectObject">
            <summary>Задает оболочка совместимости DynamicMapper.SetDynamically(MemberInfo member, Object target, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimEnumMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.EnumMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumMapper.#ctor(AutoMapper.Mappers.EnumMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumMapper.Constructor">
            <summary>Задает оболочка совместимости EnumMapper.EnumMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumMapper.ConvertEnumToNullableTypeResolutionContext">
            <summary>Задает оболочка совместимости EnumMapper.ConvertEnumToNullableType(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumMapper.EnumToEnumMappingTypePair">
            <summary>Задает оболочка совместимости EnumMapper.EnumToEnumMapping(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumMapper.EnumToNullableTypeMappingTypePair">
            <summary>Задает оболочка совместимости EnumMapper.EnumToNullableTypeMapping(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumMapper.EnumToStringMappingTypePairBooleanRef">
            <summary>Задает оболочка совместимости EnumMapper.EnumToStringMapping(TypePair context, Boolean&amp; toEnum)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumMapper.EnumToUnderlyingTypeMappingTypePairBooleanRef">
            <summary>Задает оболочка совместимости EnumMapper.EnumToUnderlyingTypeMapping(TypePair context, Boolean&amp; toEnum)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости EnumMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости EnumMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimEnumMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости EnumMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости EnumMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimEnumerableMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.EnumerableMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.#ctor(AutoMapper.Mappers.EnumerableMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.ClearEnumerableIList">
            <summary>Задает оболочка совместимости EnumerableMapper.ClearEnumerable(IList enumerable)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.Constructor">
            <summary>Задает оболочка совместимости EnumerableMapper.EnumerableMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.CreateDestinationObjectBaseTypeInt32">
            <summary>Задает оболочка совместимости EnumerableMapper.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.GetOrCreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает оболочка совместимости EnumerableMapper.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости EnumerableMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.SetElementValueIListObjectInt32">
            <summary>Задает оболочка совместимости EnumerableMapper.SetElementValue(IList destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.AllInstances.ClearEnumerableIList">
            <summary>Задает оболочка совместимости EnumerableMapper.ClearEnumerable(IList enumerable)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.AllInstances.CreateDestinationObjectBaseTypeInt32">
            <summary>Задает оболочка совместимости EnumerableMapper.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.AllInstances.GetOrCreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает оболочка совместимости EnumerableMapper.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости EnumerableMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapper.AllInstances.SetElementValueIListObjectInt32">
            <summary>Задает оболочка совместимости EnumerableMapper.SetElementValue(IList destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.EnumerableMapperBase`1</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.#ctor(AutoMapper.Mappers.EnumerableMapperBase{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.ClearEnumerableT0">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.ClearEnumerable(!0 enumerable)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.Constructor">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.EnumerableMapperBase`1()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.CreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.CreateDestinationObject(ResolutionContext context, Type destinationElementType, Int32 count)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.GetEnumerableForObject">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.GetEnumerableFor(Object destination)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.GetOrCreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.MapResolutionContext">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.Map(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.ShouldAssignEnumerableResolutionContext">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.ShouldAssignEnumerable(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.AllInstances.ClearEnumerableT0">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.ClearEnumerable(!0 enumerable)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.AllInstances.CreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.CreateDestinationObject(ResolutionContext context, Type destinationElementType, Int32 count)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.AllInstances.GetEnumerableForObject">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.GetEnumerableFor(Object destination)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.AllInstances.GetOrCreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.Map(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableMapperBase`1.AllInstances.ShouldAssignEnumerableResolutionContext">
            <summary>Задает оболочка совместимости EnumerableMapperBase`1.ShouldAssignEnumerable(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.EnumerableToDictionaryMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.#ctor(AutoMapper.Mappers.EnumerableToDictionaryMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.Constructor">
            <summary>Задает оболочка совместимости EnumerableToDictionaryMapper.EnumerableToDictionaryMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости EnumerableToDictionaryMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости EnumerableToDictionaryMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.StaticConstructor">
            <summary>Задает оболочка совместимости EnumerableToDictionaryMapper.EnumerableToDictionaryMapper()</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости EnumerableToDictionaryMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimEnumerableToDictionaryMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости EnumerableToDictionaryMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.ExplicitConversionOperatorMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.#ctor(AutoMapper.Mappers.ExplicitConversionOperatorMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.Constructor">
            <summary>Задает оболочка совместимости ExplicitConversionOperatorMapper.ExplicitConversionOperatorMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.GetExplicitConversionOperatorTypePair">
            <summary>Задает оболочка совместимости ExplicitConversionOperatorMapper.GetExplicitConversionOperator(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости ExplicitConversionOperatorMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости ExplicitConversionOperatorMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости ExplicitConversionOperatorMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExplicitConversionOperatorMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости ExplicitConversionOperatorMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimExpressionMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.ExpressionMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimExpressionMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimExpressionMapper.#ctor(AutoMapper.Mappers.ExpressionMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimExpressionMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimExpressionMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimExpressionMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExpressionMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExpressionMapper.Constructor">
            <summary>Задает оболочка совместимости ExpressionMapper.ExpressionMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExpressionMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости ExpressionMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExpressionMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости ExpressionMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimExpressionMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExpressionMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости ExpressionMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimExpressionMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости ExpressionMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.FlagsEnumMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper.#ctor(AutoMapper.Mappers.FlagsEnumMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper.Constructor">
            <summary>Задает оболочка совместимости FlagsEnumMapper.FlagsEnumMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости FlagsEnumMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости FlagsEnumMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости FlagsEnumMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFlagsEnumMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости FlagsEnumMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.FromDynamicMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.#ctor(AutoMapper.Mappers.FromDynamicMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.Constructor">
            <summary>Задает оболочка совместимости FromDynamicMapper.FromDynamicMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.GetSourceMemberMemberInfoObject">
            <summary>Задает оболочка совместимости FromDynamicMapper.GetSourceMember(MemberInfo member, Object target)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости FromDynamicMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.MembersToMapObjectObject">
            <summary>Задает оболочка совместимости FromDynamicMapper.MembersToMap(Object source, Object destination)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.SetDestinationMemberMemberInfoObjectObject">
            <summary>Задает оболочка совместимости FromDynamicMapper.SetDestinationMember(MemberInfo member, Object target, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.AllInstances.GetSourceMemberMemberInfoObject">
            <summary>Задает оболочка совместимости FromDynamicMapper.GetSourceMember(MemberInfo member, Object target)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости FromDynamicMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.AllInstances.MembersToMapObjectObject">
            <summary>Задает оболочка совместимости FromDynamicMapper.MembersToMap(Object source, Object destination)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromDynamicMapper.AllInstances.SetDestinationMemberMemberInfoObjectObject">
            <summary>Задает оболочка совместимости FromDynamicMapper.SetDestinationMember(MemberInfo member, Object target, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.FromStringDictionaryMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper.#ctor(AutoMapper.Mappers.FromStringDictionaryMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper.Constructor">
            <summary>Задает оболочка совместимости FromStringDictionaryMapper.FromStringDictionaryMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости FromStringDictionaryMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости FromStringDictionaryMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости FromStringDictionaryMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimFromStringDictionaryMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости FromStringDictionaryMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimHashSetMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.HashSetMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimHashSetMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimHashSetMapper.#ctor(AutoMapper.Mappers.HashSetMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimHashSetMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimHashSetMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimHashSetMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimHashSetMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimHashSetMapper.Constructor">
            <summary>Задает оболочка совместимости HashSetMapper.HashSetMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimHashSetMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости HashSetMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimHashSetMapper.IsSetTypeType">
            <summary>Задает оболочка совместимости HashSetMapper.IsSetType(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimHashSetMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости HashSetMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimHashSetMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimHashSetMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости HashSetMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimHashSetMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости HashSetMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.ImplicitConversionOperatorMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.#ctor(AutoMapper.Mappers.ImplicitConversionOperatorMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.Constructor">
            <summary>Задает оболочка совместимости ImplicitConversionOperatorMapper.ImplicitConversionOperatorMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.GetImplicitConversionOperatorTypePair">
            <summary>Задает оболочка совместимости ImplicitConversionOperatorMapper.GetImplicitConversionOperator(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости ImplicitConversionOperatorMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости ImplicitConversionOperatorMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости ImplicitConversionOperatorMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimImplicitConversionOperatorMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости ImplicitConversionOperatorMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimMapperRegistry">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.MapperRegistry</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimMapperRegistry.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimMapperRegistry.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimMapperRegistry.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMapperRegistry.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMapperRegistry.MappersGet">
            <summary>Задает оболочка совместимости MapperRegistry.get_Mappers()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMapperRegistry.Reset">
            <summary>Задает оболочка совместимости MapperRegistry.Reset()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMapperRegistry.StaticConstructor">
            <summary>Задает оболочка совместимости MapperRegistry.MapperRegistry()</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayFiller">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.MultidimensionalArrayFiller</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayFiller.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayFiller.#ctor(AutoMapper.Mappers.MultidimensionalArrayFiller)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayFiller.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayFiller.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayFiller.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayFiller.ConstructorArray">
            <summary>Задает оболочка совместимости MultidimensionalArrayFiller.MultidimensionalArrayFiller(Array destination)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayFiller.NewValueObject">
            <summary>Задает оболочка совместимости MultidimensionalArrayFiller.NewValue(Object value)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayFiller.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayFiller.AllInstances.NewValueObject">
            <summary>Задает оболочка совместимости MultidimensionalArrayFiller.NewValue(Object value)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.MultidimensionalArrayMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.#ctor(AutoMapper.Mappers.MultidimensionalArrayMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.ClearEnumerableArray">
            <summary>Задает оболочка совместимости MultidimensionalArrayMapper.ClearEnumerable(Array enumerable)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.Constructor">
            <summary>Задает оболочка совместимости MultidimensionalArrayMapper.MultidimensionalArrayMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.CreateDestinationObjectBaseTypeInt32">
            <summary>Задает оболочка совместимости MultidimensionalArrayMapper.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.GetOrCreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает оболочка совместимости MultidimensionalArrayMapper.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости MultidimensionalArrayMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.SetElementValueArrayObjectInt32">
            <summary>Задает оболочка совместимости MultidimensionalArrayMapper.SetElementValue(Array destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.AllInstances.ClearEnumerableArray">
            <summary>Задает оболочка совместимости MultidimensionalArrayMapper.ClearEnumerable(Array enumerable)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.AllInstances.CreateDestinationObjectBaseTypeInt32">
            <summary>Задает оболочка совместимости MultidimensionalArrayMapper.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.AllInstances.GetOrCreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает оболочка совместимости MultidimensionalArrayMapper.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости MultidimensionalArrayMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimMultidimensionalArrayMapper.AllInstances.SetElementValueArrayObjectInt32">
            <summary>Задает оболочка совместимости MultidimensionalArrayMapper.SetElementValue(Array destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.NameValueCollectionMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper.#ctor(AutoMapper.Mappers.NameValueCollectionMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper.Constructor">
            <summary>Задает оболочка совместимости NameValueCollectionMapper.NameValueCollectionMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости NameValueCollectionMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости NameValueCollectionMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости NameValueCollectionMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNameValueCollectionMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости NameValueCollectionMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimNullableMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.NullableMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNullableMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNullableMapper.#ctor(AutoMapper.Mappers.NullableMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNullableMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNullableMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNullableMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNullableMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNullableMapper.Constructor">
            <summary>Задает оболочка совместимости NullableMapper.NullableMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNullableMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости NullableMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNullableMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости NullableMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimNullableMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNullableMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости NullableMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNullableMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости NullableMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.NullableSourceMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper.#ctor(AutoMapper.Mappers.NullableSourceMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper.Constructor">
            <summary>Задает оболочка совместимости NullableSourceMapper.NullableSourceMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости NullableSourceMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости NullableSourceMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости NullableSourceMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimNullableSourceMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости NullableSourceMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimObjectCreator">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.ObjectCreator</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimObjectCreator.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimObjectCreator.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimObjectCreator.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimObjectCreator.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimObjectCreator.CreateArrayTypeArray">
            <summary>Задает оболочка совместимости ObjectCreator.CreateArray(Type elementType, Array sourceArray)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimObjectCreator.CreateArrayTypeInt32">
            <summary>Задает оболочка совместимости ObjectCreator.CreateArray(Type elementType, Int32 length)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimObjectCreator.CreateDefaultValueType">
            <summary>Задает оболочка совместимости ObjectCreator.CreateDefaultValue(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimObjectCreator.CreateDictionaryTypeTypeType">
            <summary>Задает оболочка совместимости ObjectCreator.CreateDictionary(Type dictionaryType, Type keyType, Type valueType)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimObjectCreator.CreateListType">
            <summary>Задает оболочка совместимости ObjectCreator.CreateList(Type elementType)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimObjectCreator.CreateNonNullValueType">
            <summary>Задает оболочка совместимости ObjectCreator.CreateNonNullValue(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimObjectCreator.CreateObjectType">
            <summary>Задает оболочка совместимости ObjectCreator.CreateObject(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimObjectCreator.StaticConstructor">
            <summary>Задает оболочка совместимости ObjectCreator.ObjectCreator()</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.PrimitiveArrayMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.#ctor(AutoMapper.Mappers.PrimitiveArrayMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.Constructor">
            <summary>Задает оболочка совместимости PrimitiveArrayMapper.PrimitiveArrayMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости PrimitiveArrayMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.IsPrimitiveArrayTypeType">
            <summary>Задает оболочка совместимости PrimitiveArrayMapper.IsPrimitiveArrayType(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости PrimitiveArrayMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости PrimitiveArrayMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.AllInstances.IsPrimitiveArrayTypeType">
            <summary>Задает оболочка совместимости PrimitiveArrayMapper.IsPrimitiveArrayType(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimPrimitiveArrayMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости PrimitiveArrayMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.ReadOnlyCollectionMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper.#ctor(AutoMapper.Mappers.ReadOnlyCollectionMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper.Constructor">
            <summary>Задает оболочка совместимости ReadOnlyCollectionMapper.ReadOnlyCollectionMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости ReadOnlyCollectionMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости ReadOnlyCollectionMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости ReadOnlyCollectionMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimReadOnlyCollectionMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости ReadOnlyCollectionMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimStringMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.StringMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimStringMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimStringMapper.#ctor(AutoMapper.Mappers.StringMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimStringMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimStringMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimStringMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimStringMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimStringMapper.Constructor">
            <summary>Задает оболочка совместимости StringMapper.StringMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimStringMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости StringMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimStringMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости StringMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimStringMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimStringMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости StringMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimStringMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости StringMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimToDynamicMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.ToDynamicMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.#ctor(AutoMapper.Mappers.ToDynamicMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.Constructor">
            <summary>Задает оболочка совместимости ToDynamicMapper.ToDynamicMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.GetSourceMemberMemberInfoObject">
            <summary>Задает оболочка совместимости ToDynamicMapper.GetSourceMember(MemberInfo member, Object target)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости ToDynamicMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.MembersToMapObjectObject">
            <summary>Задает оболочка совместимости ToDynamicMapper.MembersToMap(Object source, Object destination)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.SetDestinationMemberMemberInfoObjectObject">
            <summary>Задает оболочка совместимости ToDynamicMapper.SetDestinationMember(MemberInfo member, Object target, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.AllInstances.GetSourceMemberMemberInfoObject">
            <summary>Задает оболочка совместимости ToDynamicMapper.GetSourceMember(MemberInfo member, Object target)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости ToDynamicMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.AllInstances.MembersToMapObjectObject">
            <summary>Задает оболочка совместимости ToDynamicMapper.MembersToMap(Object source, Object destination)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToDynamicMapper.AllInstances.SetDestinationMemberMemberInfoObjectObject">
            <summary>Задает оболочка совместимости ToDynamicMapper.SetDestinationMember(MemberInfo member, Object target, Object value)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.ToStringDictionaryMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper.#ctor(AutoMapper.Mappers.ToStringDictionaryMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper.Constructor">
            <summary>Задает оболочка совместимости ToStringDictionaryMapper.ToStringDictionaryMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости ToStringDictionaryMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости ToStringDictionaryMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости ToStringDictionaryMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimToStringDictionaryMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости ToStringDictionaryMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.TypeConverterMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.#ctor(AutoMapper.Mappers.TypeConverterMapper)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.Bind(AutoMapper.IObjectMapper)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.Constructor">
            <summary>Задает оболочка совместимости TypeConverterMapper.TypeConverterMapper()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.GetConverterResolutionContext">
            <summary>Задает оболочка совместимости TypeConverterMapper.GetConverter(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.GetTypeConverterType">
            <summary>Задает оболочка совместимости TypeConverterMapper.GetTypeConverter(Type type)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.IsMatchTypePair">
            <summary>Задает оболочка совместимости TypeConverterMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.MapResolutionContext">
            <summary>Задает оболочка совместимости TypeConverterMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.AllInstances.IsMatchTypePair">
            <summary>Задает оболочка совместимости TypeConverterMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeConverterMapper.AllInstances.MapResolutionContext">
            <summary>Задает оболочка совместимости TypeConverterMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimTypeHelper">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.TypeHelper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimTypeHelper.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimTypeHelper.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimTypeHelper.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeHelper.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeHelper.GetElementTypeType">
            <summary>Задает оболочка совместимости TypeHelper.GetElementType(Type enumerableType)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeHelper.GetElementTypeTypeIEnumerable">
            <summary>Задает оболочка совместимости TypeHelper.GetElementType(Type enumerableType, IEnumerable enumerable)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeHelper.GetEnumerationTypeType">
            <summary>Задает оболочка совместимости TypeHelper.GetEnumerationType(Type enumType)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeHelper.GetIEnumerableTypeType">
            <summary>Задает оболочка совместимости TypeHelper.GetIEnumerableType(Type enumerableType)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.ShimTypeMapObjectMapperRegistry">
            <summary>Тип оболочки совместимости для AutoMapper.Mappers.TypeMapObjectMapperRegistry</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimTypeMapObjectMapperRegistry.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimTypeMapObjectMapperRegistry.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.ShimTypeMapObjectMapperRegistry.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeMapObjectMapperRegistry.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeMapObjectMapperRegistry.MappersGet">
            <summary>Задает оболочка совместимости TypeMapObjectMapperRegistry.get_Mappers()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.ShimTypeMapObjectMapperRegistry.StaticConstructor">
            <summary>Задает оболочка совместимости TypeMapObjectMapperRegistry.TypeMapObjectMapperRegistry()</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubArrayMapper">
            <summary>Тип заглушки AutoMapper.Mappers.ArrayMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubArrayMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubArrayMapper.ClearEnumerable(System.Array)">
            <summary>Задает заглушка ArrayMapper.ClearEnumerable(Array enumerable)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubArrayMapper.ClearEnumerableArray">
            <summary>Задает stub ArrayMapper.ClearEnumerable(Array enumerable)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubArrayMapper.CreateDestinationObject(AutoMapper.ResolutionContext,System.Type,System.Int32)">
            <summary>Задает заглушка EnumerableMapperBase`1.CreateDestinationObject(ResolutionContext context, Type destinationElementType, Int32 count)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubArrayMapper.CreateDestinationObjectBase(System.Type,System.Int32)">
            <summary>Задает заглушка ArrayMapper.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubArrayMapper.CreateDestinationObjectBaseTypeInt32">
            <summary>Задает stub ArrayMapper.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubArrayMapper.CreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает stub EnumerableMapperBase`1.CreateDestinationObject(ResolutionContext context, Type destinationElementType, Int32 count)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubArrayMapper.GetEnumerableFor(System.Object)">
            <summary>Задает заглушка EnumerableMapperBase`1.GetEnumerableFor(Object destination)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubArrayMapper.GetEnumerableForObject">
            <summary>Задает stub EnumerableMapperBase`1.GetEnumerableFor(Object destination)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubArrayMapper.GetOrCreateDestinationObject(AutoMapper.ResolutionContext,System.Type,System.Int32)">
            <summary>Задает заглушка ArrayMapper.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubArrayMapper.GetOrCreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает stub ArrayMapper.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubArrayMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubArrayMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubArrayMapper.IsMatch(AutoMapper.TypePair)">
            <summary>Задает заглушка ArrayMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubArrayMapper.IsMatchTypePair">
            <summary>Задает stub ArrayMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubArrayMapper.SetElementValue(System.Array,System.Object,System.Int32)">
            <summary>Задает заглушка ArrayMapper.SetElementValue(Array destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubArrayMapper.SetElementValueArrayObjectInt32">
            <summary>Задает stub ArrayMapper.SetElementValue(Array destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubArrayMapper.ShouldAssignEnumerable(AutoMapper.ResolutionContext)">
            <summary>Задает заглушка ArrayMapper.ShouldAssignEnumerable(ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubArrayMapper.ShouldAssignEnumerableResolutionContext">
            <summary>Задает stub ArrayMapper.ShouldAssignEnumerable(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubArrayMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubArrayMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubArrayMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubAssignableMapper">
            <summary>Тип заглушки AutoMapper.Mappers.AssignableMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubAssignableMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubAssignableMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubAssignableMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubAssignableMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubAssignableMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubAssignableMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubCollectionMapper">
            <summary>Тип заглушки AutoMapper.Mappers.CollectionMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubCollectionMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubCollectionMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubCollectionMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubCollectionMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubCollectionMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubCollectionMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubConditionalObjectMapper">
            <summary>Тип заглушки AutoMapper.Mappers.ConditionalObjectMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubConditionalObjectMapper.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubConditionalObjectMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubConditionalObjectMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubConditionalObjectMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubConditionalObjectMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubConditionalObjectMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubConvertMapper">
            <summary>Тип заглушки AutoMapper.Mappers.ConvertMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubConvertMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubConvertMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubConvertMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubConvertMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubConvertMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubConvertMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubDictionaryMapper">
            <summary>Тип заглушки AutoMapper.Mappers.DictionaryMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubDictionaryMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubDictionaryMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDictionaryMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubDictionaryMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubDictionaryMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubDictionaryMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubDynamicMapper">
            <summary>Тип заглушки AutoMapper.Mappers.DynamicMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubDynamicMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubDynamicMapper.GetSourceMember(System.Reflection.MemberInfo,System.Object)">
            <summary>Задает заглушка DynamicMapper.GetSourceMember(MemberInfo member, Object target)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubDynamicMapper.GetSourceMemberMemberInfoObject">
            <summary>Задает stub DynamicMapper.GetSourceMember(MemberInfo member, Object target)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubDynamicMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDynamicMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubDynamicMapper.IsMatch(AutoMapper.TypePair)">
            <summary>Задает заглушка DynamicMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubDynamicMapper.IsMatchTypePair">
            <summary>Задает stub DynamicMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubDynamicMapper.MembersToMap(System.Object,System.Object)">
            <summary>Задает заглушка DynamicMapper.MembersToMap(Object source, Object destination)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubDynamicMapper.MembersToMapObjectObject">
            <summary>Задает stub DynamicMapper.MembersToMap(Object source, Object destination)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubDynamicMapper.SetDestinationMember(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>Задает заглушка DynamicMapper.SetDestinationMember(MemberInfo member, Object target, Object value)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubDynamicMapper.SetDestinationMemberMemberInfoObjectObject">
            <summary>Задает stub DynamicMapper.SetDestinationMember(MemberInfo member, Object target, Object value)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubDynamicMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubDynamicMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubDynamicMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubEnumMapper">
            <summary>Тип заглушки AutoMapper.Mappers.EnumMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubEnumMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubEnumMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubEnumMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubEnumMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubEnumerableMapper">
            <summary>Тип заглушки AutoMapper.Mappers.EnumerableMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapper.ClearEnumerable(System.Collections.IList)">
            <summary>Задает заглушка EnumerableMapper.ClearEnumerable(IList enumerable)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapper.ClearEnumerableIList">
            <summary>Задает stub EnumerableMapper.ClearEnumerable(IList enumerable)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapper.CreateDestinationObject(AutoMapper.ResolutionContext,System.Type,System.Int32)">
            <summary>Задает заглушка EnumerableMapperBase`1.CreateDestinationObject(ResolutionContext context, Type destinationElementType, Int32 count)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapper.CreateDestinationObjectBase(System.Type,System.Int32)">
            <summary>Задает заглушка EnumerableMapper.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapper.CreateDestinationObjectBaseTypeInt32">
            <summary>Задает stub EnumerableMapper.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapper.CreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает stub EnumerableMapperBase`1.CreateDestinationObject(ResolutionContext context, Type destinationElementType, Int32 count)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapper.GetEnumerableFor(System.Object)">
            <summary>Задает заглушка EnumerableMapperBase`1.GetEnumerableFor(Object destination)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapper.GetEnumerableForObject">
            <summary>Задает stub EnumerableMapperBase`1.GetEnumerableFor(Object destination)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapper.GetOrCreateDestinationObject(AutoMapper.ResolutionContext,System.Type,System.Int32)">
            <summary>Задает заглушка EnumerableMapper.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapper.GetOrCreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает stub EnumerableMapper.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubEnumerableMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapper.IsMatch(AutoMapper.TypePair)">
            <summary>Задает заглушка EnumerableMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapper.IsMatchTypePair">
            <summary>Задает stub EnumerableMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapper.SetElementValue(System.Collections.IList,System.Object,System.Int32)">
            <summary>Задает заглушка EnumerableMapper.SetElementValue(IList destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapper.SetElementValueIListObjectInt32">
            <summary>Задает stub EnumerableMapper.SetElementValue(IList destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapper.ShouldAssignEnumerable(AutoMapper.ResolutionContext)">
            <summary>Задает заглушка EnumerableMapperBase`1.ShouldAssignEnumerable(ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapper.ShouldAssignEnumerableResolutionContext">
            <summary>Задает stub EnumerableMapperBase`1.ShouldAssignEnumerable(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubEnumerableMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubEnumerableMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubEnumerableMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1">
            <summary>Тип заглушки AutoMapper.Mappers.EnumerableMapperBase`1</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.ClearEnumerable(`0)">
            <summary>Задает заглушка EnumerableMapperBase`1.ClearEnumerable(!0 enumerable)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.ClearEnumerableT0">
            <summary>Задает stub EnumerableMapperBase`1.ClearEnumerable(!0 enumerable)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.CreateDestinationObject(AutoMapper.ResolutionContext,System.Type,System.Int32)">
            <summary>Задает заглушка EnumerableMapperBase`1.CreateDestinationObject(ResolutionContext context, Type destinationElementType, Int32 count)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.CreateDestinationObjectBase(System.Type,System.Int32)">
            <summary>Задает заглушка EnumerableMapperBase`1.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.CreateDestinationObjectBaseTypeInt32">
            <summary>Задает stub EnumerableMapperBase`1.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.CreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает stub EnumerableMapperBase`1.CreateDestinationObject(ResolutionContext context, Type destinationElementType, Int32 count)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.GetEnumerableFor(System.Object)">
            <summary>Задает заглушка EnumerableMapperBase`1.GetEnumerableFor(Object destination)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.GetEnumerableForObject">
            <summary>Задает stub EnumerableMapperBase`1.GetEnumerableFor(Object destination)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.GetOrCreateDestinationObject(AutoMapper.ResolutionContext,System.Type,System.Int32)">
            <summary>Задает заглушка EnumerableMapperBase`1.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.GetOrCreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает stub EnumerableMapperBase`1.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubEnumerableMapperBase</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.IsMatch(AutoMapper.TypePair)">
            <summary>Задает заглушка EnumerableMapperBase`1.IsMatch(TypePair context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.IsMatchTypePair">
            <summary>Задает stub EnumerableMapperBase`1.IsMatch(TypePair context)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.SetElementValue(`0,System.Object,System.Int32)">
            <summary>Задает заглушка EnumerableMapperBase`1.SetElementValue(!0 destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.SetElementValueT0ObjectInt32">
            <summary>Задает stub EnumerableMapperBase`1.SetElementValue(!0 destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.ShouldAssignEnumerable(AutoMapper.ResolutionContext)">
            <summary>Задает заглушка EnumerableMapperBase`1.ShouldAssignEnumerable(ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.ShouldAssignEnumerableResolutionContext">
            <summary>Задает stub EnumerableMapperBase`1.ShouldAssignEnumerable(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubEnumerableMapperBase`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubEnumerableToDictionaryMapper">
            <summary>Тип заглушки AutoMapper.Mappers.EnumerableToDictionaryMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableToDictionaryMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubEnumerableToDictionaryMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubEnumerableToDictionaryMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubEnumerableToDictionaryMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubEnumerableToDictionaryMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubEnumerableToDictionaryMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubExplicitConversionOperatorMapper">
            <summary>Тип заглушки AutoMapper.Mappers.ExplicitConversionOperatorMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubExplicitConversionOperatorMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubExplicitConversionOperatorMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubExplicitConversionOperatorMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubExplicitConversionOperatorMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubExplicitConversionOperatorMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubExplicitConversionOperatorMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubExpressionMapper">
            <summary>Тип заглушки AutoMapper.Mappers.ExpressionMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubExpressionMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubExpressionMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubExpressionMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubExpressionMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubExpressionMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubExpressionMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubFlagsEnumMapper">
            <summary>Тип заглушки AutoMapper.Mappers.FlagsEnumMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubFlagsEnumMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubFlagsEnumMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubFlagsEnumMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubFlagsEnumMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubFlagsEnumMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubFlagsEnumMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubFromDynamicMapper">
            <summary>Тип заглушки AutoMapper.Mappers.FromDynamicMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.GetSourceMember(System.Reflection.MemberInfo,System.Object)">
            <summary>Задает заглушка FromDynamicMapper.GetSourceMember(MemberInfo member, Object target)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.GetSourceMemberMemberInfoObject">
            <summary>Задает stub FromDynamicMapper.GetSourceMember(MemberInfo member, Object target)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubFromDynamicMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.IsMatch(AutoMapper.TypePair)">
            <summary>Задает заглушка FromDynamicMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.IsMatchTypePair">
            <summary>Задает stub FromDynamicMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.MembersToMap(System.Object,System.Object)">
            <summary>Задает заглушка FromDynamicMapper.MembersToMap(Object source, Object destination)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.MembersToMapObjectObject">
            <summary>Задает stub FromDynamicMapper.MembersToMap(Object source, Object destination)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.SetDestinationMember(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>Задает заглушка FromDynamicMapper.SetDestinationMember(MemberInfo member, Object target, Object value)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.SetDestinationMemberMemberInfoObjectObject">
            <summary>Задает stub FromDynamicMapper.SetDestinationMember(MemberInfo member, Object target, Object value)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubFromDynamicMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubFromStringDictionaryMapper">
            <summary>Тип заглушки AutoMapper.Mappers.FromStringDictionaryMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubFromStringDictionaryMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubFromStringDictionaryMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubFromStringDictionaryMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubFromStringDictionaryMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubFromStringDictionaryMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubFromStringDictionaryMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubHashSetMapper">
            <summary>Тип заглушки AutoMapper.Mappers.HashSetMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubHashSetMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubHashSetMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubHashSetMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubHashSetMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubHashSetMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubHashSetMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubIConditionalObjectMapper">
            <summary>Тип заглушки AutoMapper.Mappers.IConditionalObjectMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubIConditionalObjectMapper.#ctor">
            <summary>Инициализирует новый экземпляр type StubIConditionalObjectMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubIConditionalObjectMapper.am::AutoMapper#Mappers#IConditionalObjectMapper#IsMatch(AutoMapper.TypePair)">
            <summary>Задает заглушка IConditionalObjectMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubIConditionalObjectMapper.ConventionsGet">
            <summary>Задает stub IConditionalObjectMapper.get_Conventions()</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubIConditionalObjectMapper.IsMatchTypePair">
            <summary>Задает stub IConditionalObjectMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubIConditionalObjectMapper.ProfileNameGet">
            <summary>Задает stub IConditionalObjectMapper.get_ProfileName()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubIConditionalObjectMapper.am::AutoMapper#Mappers#IConditionalObjectMapper#Conventions">
            <summary>Задает stub IConditionalObjectMapper.get_Conventions()</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubIConditionalObjectMapper.am::AutoMapper#Mappers#IConditionalObjectMapper#ProfileName">
            <summary>Задает stub IConditionalObjectMapper.get_ProfileName()</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubITypeMapObjectMapper">
            <summary>Тип заглушки AutoMapper.Mappers.ITypeMapObjectMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubITypeMapObjectMapper.#ctor">
            <summary>Инициализирует новый экземпляр type StubITypeMapObjectMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubITypeMapObjectMapper.am::AutoMapper#Mappers#ITypeMapObjectMapper#IsMatch(AutoMapper.ResolutionContext)">
            <summary>Задает заглушка ITypeMapObjectMapper.IsMatch(ResolutionContext context)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubITypeMapObjectMapper.am::AutoMapper#Mappers#ITypeMapObjectMapper#Map(AutoMapper.ResolutionContext)">
            <summary>Задает заглушка ITypeMapObjectMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubITypeMapObjectMapper.IsMatchResolutionContext">
            <summary>Задает stub ITypeMapObjectMapper.IsMatch(ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubITypeMapObjectMapper.MapResolutionContext">
            <summary>Задает stub ITypeMapObjectMapper.Map(ResolutionContext context)</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubImplicitConversionOperatorMapper">
            <summary>Тип заглушки AutoMapper.Mappers.ImplicitConversionOperatorMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubImplicitConversionOperatorMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubImplicitConversionOperatorMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubImplicitConversionOperatorMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubImplicitConversionOperatorMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubImplicitConversionOperatorMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubImplicitConversionOperatorMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayFiller">
            <summary>Тип заглушки AutoMapper.Mappers.MultidimensionalArrayFiller</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayFiller.#ctor(System.Array)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayFiller.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMultidimensionalArrayFiller</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayFiller.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayFiller.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayFiller.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper">
            <summary>Тип заглушки AutoMapper.Mappers.MultidimensionalArrayMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.ClearEnumerable(System.Array)">
            <summary>Задает заглушка MultidimensionalArrayMapper.ClearEnumerable(Array enumerable)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.ClearEnumerableArray">
            <summary>Задает stub MultidimensionalArrayMapper.ClearEnumerable(Array enumerable)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.CreateDestinationObject(AutoMapper.ResolutionContext,System.Type,System.Int32)">
            <summary>Задает заглушка EnumerableMapperBase`1.CreateDestinationObject(ResolutionContext context, Type destinationElementType, Int32 count)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.CreateDestinationObjectBase(System.Type,System.Int32)">
            <summary>Задает заглушка MultidimensionalArrayMapper.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.CreateDestinationObjectBaseTypeInt32">
            <summary>Задает stub MultidimensionalArrayMapper.CreateDestinationObjectBase(Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.CreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает stub EnumerableMapperBase`1.CreateDestinationObject(ResolutionContext context, Type destinationElementType, Int32 count)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.GetEnumerableFor(System.Object)">
            <summary>Задает заглушка EnumerableMapperBase`1.GetEnumerableFor(Object destination)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.GetEnumerableForObject">
            <summary>Задает stub EnumerableMapperBase`1.GetEnumerableFor(Object destination)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.GetOrCreateDestinationObject(AutoMapper.ResolutionContext,System.Type,System.Int32)">
            <summary>Задает заглушка MultidimensionalArrayMapper.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.GetOrCreateDestinationObjectResolutionContextTypeInt32">
            <summary>Задает stub MultidimensionalArrayMapper.GetOrCreateDestinationObject(ResolutionContext context, Type destElementType, Int32 sourceLength)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMultidimensionalArrayMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.IsMatch(AutoMapper.TypePair)">
            <summary>Задает заглушка MultidimensionalArrayMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.IsMatchTypePair">
            <summary>Задает stub MultidimensionalArrayMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.SetElementValue(System.Array,System.Object,System.Int32)">
            <summary>Задает заглушка MultidimensionalArrayMapper.SetElementValue(Array destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.SetElementValueArrayObjectInt32">
            <summary>Задает stub MultidimensionalArrayMapper.SetElementValue(Array destination, Object mappedValue, Int32 index)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.ShouldAssignEnumerable(AutoMapper.ResolutionContext)">
            <summary>Задает заглушка EnumerableMapperBase`1.ShouldAssignEnumerable(ResolutionContext context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.ShouldAssignEnumerableResolutionContext">
            <summary>Задает stub EnumerableMapperBase`1.ShouldAssignEnumerable(ResolutionContext context)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubMultidimensionalArrayMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubNameValueCollectionMapper">
            <summary>Тип заглушки AutoMapper.Mappers.NameValueCollectionMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubNameValueCollectionMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubNameValueCollectionMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNameValueCollectionMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubNameValueCollectionMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubNameValueCollectionMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubNameValueCollectionMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubNullableMapper">
            <summary>Тип заглушки AutoMapper.Mappers.NullableMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubNullableMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubNullableMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNullableMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubNullableMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubNullableMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubNullableMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubNullableSourceMapper">
            <summary>Тип заглушки AutoMapper.Mappers.NullableSourceMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubNullableSourceMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubNullableSourceMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNullableSourceMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubNullableSourceMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubNullableSourceMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubNullableSourceMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubPrimitiveArrayMapper">
            <summary>Тип заглушки AutoMapper.Mappers.PrimitiveArrayMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubPrimitiveArrayMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubPrimitiveArrayMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPrimitiveArrayMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubPrimitiveArrayMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubPrimitiveArrayMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubPrimitiveArrayMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubReadOnlyCollectionMapper">
            <summary>Тип заглушки AutoMapper.Mappers.ReadOnlyCollectionMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubReadOnlyCollectionMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubReadOnlyCollectionMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubReadOnlyCollectionMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubReadOnlyCollectionMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubReadOnlyCollectionMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubReadOnlyCollectionMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubStringMapper">
            <summary>Тип заглушки AutoMapper.Mappers.StringMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubStringMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubStringMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubStringMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubStringMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubStringMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubStringMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubToDynamicMapper">
            <summary>Тип заглушки AutoMapper.Mappers.ToDynamicMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubToDynamicMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubToDynamicMapper.GetSourceMember(System.Reflection.MemberInfo,System.Object)">
            <summary>Задает заглушка ToDynamicMapper.GetSourceMember(MemberInfo member, Object target)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubToDynamicMapper.GetSourceMemberMemberInfoObject">
            <summary>Задает stub ToDynamicMapper.GetSourceMember(MemberInfo member, Object target)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubToDynamicMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubToDynamicMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubToDynamicMapper.IsMatch(AutoMapper.TypePair)">
            <summary>Задает заглушка ToDynamicMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubToDynamicMapper.IsMatchTypePair">
            <summary>Задает stub ToDynamicMapper.IsMatch(TypePair context)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubToDynamicMapper.MembersToMap(System.Object,System.Object)">
            <summary>Задает заглушка ToDynamicMapper.MembersToMap(Object source, Object destination)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubToDynamicMapper.MembersToMapObjectObject">
            <summary>Задает stub ToDynamicMapper.MembersToMap(Object source, Object destination)</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubToDynamicMapper.SetDestinationMember(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>Задает заглушка ToDynamicMapper.SetDestinationMember(MemberInfo member, Object target, Object value)</summary>
        </member>
        <member name="F:AutoMapper.Mappers.Fakes.StubToDynamicMapper.SetDestinationMemberMemberInfoObjectObject">
            <summary>Задает stub ToDynamicMapper.SetDestinationMember(MemberInfo member, Object target, Object value)</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubToDynamicMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubToDynamicMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubToDynamicMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubToStringDictionaryMapper">
            <summary>Тип заглушки AutoMapper.Mappers.ToStringDictionaryMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubToStringDictionaryMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubToStringDictionaryMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubToStringDictionaryMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubToStringDictionaryMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubToStringDictionaryMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubToStringDictionaryMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.Mappers.Fakes.StubTypeConverterMapper">
            <summary>Тип заглушки AutoMapper.Mappers.TypeConverterMapper</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubTypeConverterMapper.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.Mappers.Fakes.StubTypeConverterMapper.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubTypeConverterMapper</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubTypeConverterMapper.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubTypeConverterMapper.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.Mappers.Fakes.StubTypeConverterMapper.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.ExpressionBuilder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.#ctor(AutoMapper.QueryableExtensions.ExpressionBuilder)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.Bind(AutoMapper.QueryableExtensions.IExpressionBuilder)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.CreateMapExpressionOf2IDictionaryOfStringObjectMemberInfoArray``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.MemberInfo[],System.Linq.Expressions.Expression{System.Func{``0,``1}}})">
            <summary>Задает оболочка совместимости ExpressionBuilder.CreateMapExpression(IDictionary`2&lt;String,Object&gt; parameters, MemberInfo[] membersToExpand)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.ConstructorIConfigurationProvider">
            <summary>Задает оболочка совместимости ExpressionBuilder.ExpressionBuilder(IConfigurationProvider configurationProvider)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.CreateMapExpressionExpressionRequestConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости ExpressionBuilder.CreateMapExpression(ExpressionRequest request, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.CreateMapExpressionExpressionRequestExpressionConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости ExpressionBuilder.CreateMapExpression(ExpressionRequest request, Expression instanceParameter, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.CreateMapExpressionTypeTypeIDictionaryOfStringObjectMemberInfoArray">
            <summary>Задает оболочка совместимости ExpressionBuilder.CreateMapExpression(Type sourceType, Type destinationType, IDictionary`2&lt;String,Object&gt; parameters, MemberInfo[] membersToExpand)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.CreateMemberBindingsExpressionRequestTypeMapExpressionConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости ExpressionBuilder.CreateMemberBindings(ExpressionRequest request, TypeMap typeMap, Expression instanceParameter, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.ResolveExpressionPropertyMapTypeExpression">
            <summary>Задает оболочка совместимости ExpressionBuilder.ResolveExpression(PropertyMap propertyMap, Type currentType, Expression instanceParameter)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.StaticConstructor">
            <summary>Задает оболочка совместимости ExpressionBuilder.ExpressionBuilder()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder._CreateMapExpressionb__5_0ExpressionRequest">
            <summary>Задает оболочка совместимости ExpressionBuilder.&lt;CreateMapExpression&gt;b__5_0(ExpressionRequest tp)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.AllInstances.CreateMapExpressionOf2IDictionaryOfStringObjectMemberInfoArray``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.ExpressionBuilder,System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.MemberInfo[],System.Linq.Expressions.Expression{System.Func{``0,``1}}})">
            <summary>Задает оболочка совместимости ExpressionBuilder.CreateMapExpression(IDictionary`2&lt;String,Object&gt; parameters, MemberInfo[] membersToExpand)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.AllInstances.CreateMapExpressionExpressionRequestConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости ExpressionBuilder.CreateMapExpression(ExpressionRequest request, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.AllInstances.CreateMapExpressionExpressionRequestExpressionConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости ExpressionBuilder.CreateMapExpression(ExpressionRequest request, Expression instanceParameter, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.AllInstances.CreateMapExpressionTypeTypeIDictionaryOfStringObjectMemberInfoArray">
            <summary>Задает оболочка совместимости ExpressionBuilder.CreateMapExpression(Type sourceType, Type destinationType, IDictionary`2&lt;String,Object&gt; parameters, MemberInfo[] membersToExpand)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.AllInstances.CreateMemberBindingsExpressionRequestTypeMapExpressionConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости ExpressionBuilder.CreateMemberBindings(ExpressionRequest request, TypeMap typeMap, Expression instanceParameter, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionBuilder.AllInstances._CreateMapExpressionb__5_0ExpressionRequest">
            <summary>Задает оболочка совместимости ExpressionBuilder.&lt;CreateMapExpression&gt;b__5_0(ExpressionRequest tp)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.ExpressionRequest</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.#ctor(AutoMapper.QueryableExtensions.ExpressionRequest)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.Bind(System.IEquatable{AutoMapper.QueryableExtensions.ExpressionRequest})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.ConstructorTypeTypeMemberInfoArray">
            <summary>Задает оболочка совместимости ExpressionRequest.ExpressionRequest(Type sourceType, Type destinationType, MemberInfo[] membersToExpand)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.DestinationTypeGet">
            <summary>Задает оболочка совместимости ExpressionRequest.get_DestinationType()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.EqualityOpExpressionRequestExpressionRequest">
            <summary>Задает оболочка совместимости ExpressionRequest.op_Equality(ExpressionRequest left, ExpressionRequest right)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.EqualsExpressionRequest">
            <summary>Задает оболочка совместимости ExpressionRequest.Equals(ExpressionRequest other)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.EqualsObject">
            <summary>Задает оболочка совместимости ExpressionRequest.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.GetHashCode">
            <summary>Задает оболочка совместимости ExpressionRequest.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.InequalityOpExpressionRequestExpressionRequest">
            <summary>Задает оболочка совместимости ExpressionRequest.op_Inequality(ExpressionRequest left, ExpressionRequest right)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.MembersToExpandGet">
            <summary>Задает оболочка совместимости ExpressionRequest.get_MembersToExpand()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.SourceTypeGet">
            <summary>Задает оболочка совместимости ExpressionRequest.get_SourceType()</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.AllInstances.DestinationTypeGet">
            <summary>Задает оболочка совместимости ExpressionRequest.get_DestinationType()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.AllInstances.EqualsExpressionRequest">
            <summary>Задает оболочка совместимости ExpressionRequest.Equals(ExpressionRequest other)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости ExpressionRequest.Equals(Object obj)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости ExpressionRequest.GetHashCode()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.AllInstances.MembersToExpandGet">
            <summary>Задает оболочка совместимости ExpressionRequest.get_MembersToExpand()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionRequest.AllInstances.SourceTypeGet">
            <summary>Задает оболочка совместимости ExpressionRequest.get_SourceType()</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.ExpressionResolutionResult</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.#ctor(AutoMapper.QueryableExtensions.ExpressionResolutionResult)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.ConstructorExpressionType">
            <summary>Задает оболочка совместимости ExpressionResolutionResult.ExpressionResolutionResult(Expression resolutionExpression, Type type)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.ResolutionExpressionGet">
            <summary>Задает оболочка совместимости ExpressionResolutionResult.get_ResolutionExpression()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.ResolutionExpressionSetExpression">
            <summary>Задает оболочка совместимости ExpressionResolutionResult.set_ResolutionExpression(Expression value)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.TypeGet">
            <summary>Задает оболочка совместимости ExpressionResolutionResult.get_Type()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.TypeSetType">
            <summary>Задает оболочка совместимости ExpressionResolutionResult.set_Type(Type value)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.AllInstances.ResolutionExpressionGet">
            <summary>Задает оболочка совместимости ExpressionResolutionResult.get_ResolutionExpression()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.AllInstances.ResolutionExpressionSetExpression">
            <summary>Задает оболочка совместимости ExpressionResolutionResult.set_ResolutionExpression(Expression value)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.AllInstances.TypeGet">
            <summary>Задает оболочка совместимости ExpressionResolutionResult.get_Type()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExpressionResolutionResult.AllInstances.TypeSetType">
            <summary>Задает оболочка совместимости ExpressionResolutionResult.set_Type(Type value)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.ShimExtensions">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Extensions</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.MapOf2IQueryableOfM0IQueryableOfM1IConfigurationProvider``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},AutoMapper.IConfigurationProvider,System.Linq.IQueryable{``1}})">
            <summary>Задает оболочка совместимости Extensions.Map(IQueryable`1&lt;!!0&gt; sourceQuery, IQueryable`1&lt;!!1&gt; destQuery, IConfigurationProvider config)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.ProjectToOf1IQueryableExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости Extensions.ProjectTo(IQueryable source, Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.ProjectToOf1IQueryableIConfigurationProviderExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable,AutoMapper.IConfigurationProvider,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости Extensions.ProjectTo(IQueryable source, IConfigurationProvider configuration, Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.ProjectToOf1IQueryableIConfigurationProviderIDictionaryOfStringObjectStringArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable,AutoMapper.IConfigurationProvider,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости Extensions.ProjectTo(IQueryable source, IConfigurationProvider configuration, IDictionary`2&lt;String,Object&gt; parameters, String[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.ProjectToOf1IQueryableIConfigurationProviderObjectExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable,AutoMapper.IConfigurationProvider,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости Extensions.ProjectTo(IQueryable source, IConfigurationProvider configuration, Object parameters, Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.ProjectToOf1IQueryableIDictionaryOfStringObjectStringArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости Extensions.ProjectTo(IQueryable source, IDictionary`2&lt;String,Object&gt; parameters, String[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.ProjectToOf1IQueryableObjectExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости Extensions.ProjectTo(IQueryable source, Object parameters, Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.UseAsDataSourceOf1IQueryableOfM0IMapper``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable{``0},AutoMapper.IMapper,AutoMapper.QueryableExtensions.Impl.IQueryDataSourceInjection{``0}})">
            <summary>Задает оболочка совместимости Extensions.UseAsDataSource(IQueryable`1&lt;!!0&gt; dataSource, IMapper mapper)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimExtensions.StaticConstructor">
            <summary>Задает оболочка совместимости Extensions.Extensions()</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.ProjectionExpression</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.#ctor(AutoMapper.QueryableExtensions.ProjectionExpression)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.Bind(AutoMapper.QueryableExtensions.IProjectionExpression)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.GetMemberPathsOf1ExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}}})">
            <summary>Задает оболочка совместимости ProjectionExpression.GetMemberPaths(Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.ToOf1IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(IDictionary`2&lt;String,Object&gt; parameters)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.ToOf1IDictionaryOfStringObjectExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(IDictionary`2&lt;String,Object&gt; parameters, Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.ToOf1IDictionaryOfStringObjectIEnumerableOfIEnumerableOfMemberInfo``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}},System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(IDictionary`2&lt;String,Object&gt; parameters, IEnumerable`1&lt;IEnumerable`1&lt;MemberInfo&gt;&gt; memberPathsToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.ToOf1IDictionaryOfStringObjectStringArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.String[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(IDictionary`2&lt;String,Object&gt; parameters, String[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.ToOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(Object parameters)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.ToOf1ObjectExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(Object parameters, Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.ToOf1ObjectStringArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.String[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(Object parameters, String[] membersToExpand)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.ConstructorIQueryableIExpressionBuilder">
            <summary>Задает оболочка совместимости ProjectionExpression.ProjectionExpression(IQueryable source, IExpressionBuilder builder)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.FindQueryableSelectMethod">
            <summary>Задает оболочка совместимости ProjectionExpression.FindQueryableSelectMethod()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.GetMemberPathsTypeStringArray">
            <summary>Задает оболочка совместимости ProjectionExpression.GetMemberPaths(Type type, String[] membersToExpand)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.GetParametersObject">
            <summary>Задает оболочка совместимости ProjectionExpression.GetParameters(Object parameters)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.StaticConstructor">
            <summary>Задает оболочка совместимости ProjectionExpression.ProjectionExpression()</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.AllInstances.GetMemberPathsOf1ExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.ProjectionExpression,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}}})">
            <summary>Задает оболочка совместимости ProjectionExpression.GetMemberPaths(Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.AllInstances.ToOf1IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.ProjectionExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(IDictionary`2&lt;String,Object&gt; parameters)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.AllInstances.ToOf1IDictionaryOfStringObjectExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.ProjectionExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(IDictionary`2&lt;String,Object&gt; parameters, Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.AllInstances.ToOf1IDictionaryOfStringObjectIEnumerableOfIEnumerableOfMemberInfo``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.ProjectionExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}},System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(IDictionary`2&lt;String,Object&gt; parameters, IEnumerable`1&lt;IEnumerable`1&lt;MemberInfo&gt;&gt; memberPathsToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.AllInstances.ToOf1IDictionaryOfStringObjectStringArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.ProjectionExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(IDictionary`2&lt;String,Object&gt; parameters, String[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.AllInstances.ToOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.ProjectionExpression,System.Object,System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(Object parameters)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.AllInstances.ToOf1ObjectExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.ProjectionExpression,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(Object parameters, Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.AllInstances.ToOf1ObjectStringArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.ProjectionExpression,System.Object,System.String[],System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости ProjectionExpression.To(Object parameters, String[] membersToExpand)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.ShimProjectionExpression.AllInstances.GetMemberPathsTypeStringArray">
            <summary>Задает оболочка совместимости ProjectionExpression.GetMemberPaths(Type type, String[] membersToExpand)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.StubExpressionBuilder">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.ExpressionBuilder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubExpressionBuilder.#ctor(AutoMapper.IConfigurationProvider)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubExpressionBuilder.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubExpressionBuilder</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.StubExpressionBuilder.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.StubExpressionBuilder.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.StubExpressionBuilder.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.StubExpressionRequest">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.ExpressionRequest</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubExpressionRequest.#ctor(System.Type,System.Type,System.Reflection.MemberInfo[])">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubExpressionRequest.Equals(System.Object)">
            <summary>Задает заглушка ExpressionRequest.Equals(Object obj)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Fakes.StubExpressionRequest.EqualsObject">
            <summary>Задает stub ExpressionRequest.Equals(Object obj)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubExpressionRequest.GetHashCode">
            <summary>Задает заглушка ExpressionRequest.GetHashCode()</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Fakes.StubExpressionRequest.GetHashCode01">
            <summary>Задает stub ExpressionRequest.GetHashCode()</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubExpressionRequest.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubExpressionRequest</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.StubExpressionRequest.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.StubExpressionRequest.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.StubExpressionRequest.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.StubExpressionResolutionResult">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.ExpressionResolutionResult</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubExpressionResolutionResult.#ctor(System.Linq.Expressions.Expression,System.Type)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubExpressionResolutionResult.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubExpressionResolutionResult</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.StubExpressionResolutionResult.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.StubExpressionResolutionResult.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.StubExpressionResolutionResult.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBinder">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.IExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBinder.#ctor">
            <summary>Инициализирует новый экземпляр type StubIExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBinder.am::AutoMapper#QueryableExtensions#IExpressionBinder#Build(AutoMapper.IConfigurationProvider,AutoMapper.PropertyMap,AutoMapper.TypeMap,AutoMapper.QueryableExtensions.ExpressionRequest,AutoMapper.QueryableExtensions.ExpressionResolutionResult,System.Collections.Concurrent.ConcurrentDictionary{AutoMapper.QueryableExtensions.ExpressionRequest,System.Int32})">
            <summary>Задает заглушка IExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBinder.am::AutoMapper#QueryableExtensions#IExpressionBinder#IsMatch(AutoMapper.PropertyMap,AutoMapper.TypeMap,AutoMapper.QueryableExtensions.ExpressionResolutionResult)">
            <summary>Задает заглушка IExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBinder.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает stub IExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBinder.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает stub IExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBuilder">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.IExpressionBuilder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBuilder.#ctor">
            <summary>Инициализирует новый экземпляр type StubIExpressionBuilder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBuilder.am::AutoMapper#QueryableExtensions#IExpressionBuilder#CreateMapExpression(AutoMapper.QueryableExtensions.ExpressionRequest,System.Linq.Expressions.Expression,System.Collections.Concurrent.ConcurrentDictionary{AutoMapper.QueryableExtensions.ExpressionRequest,System.Int32})">
            <summary>Задает заглушка IExpressionBuilder.CreateMapExpression(ExpressionRequest request, Expression instanceParameter, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBuilder.am::AutoMapper#QueryableExtensions#IExpressionBuilder#CreateMapExpression(System.Type,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.MemberInfo[])">
            <summary>Задает заглушка IExpressionBuilder.CreateMapExpression(Type sourceType, Type destinationType, IDictionary`2&lt;String,Object&gt; parameters, MemberInfo[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBuilder.am::AutoMapper#QueryableExtensions#IExpressionBuilder#CreateMapExpression(AutoMapper.QueryableExtensions.ExpressionRequest,System.Collections.Concurrent.ConcurrentDictionary{AutoMapper.QueryableExtensions.ExpressionRequest,System.Int32})">
            <summary>Задает заглушка IExpressionBuilder.CreateMapExpression(ExpressionRequest request, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBuilder.am::AutoMapper#QueryableExtensions#IExpressionBuilder#CreateMapExpression``2(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.MemberInfo[])">
            <summary>Задает заглушка IExpressionBuilder.CreateMapExpression(IDictionary`2&lt;String,Object&gt; parameters, MemberInfo[] membersToExpand)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBuilder.CreateMapExpressionExpressionRequestConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает stub IExpressionBuilder.CreateMapExpression(ExpressionRequest request, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBuilder.CreateMapExpressionExpressionRequestExpressionConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает stub IExpressionBuilder.CreateMapExpression(ExpressionRequest request, Expression instanceParameter, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBuilder.CreateMapExpressionOf2IDictionaryOfStringObjectMemberInfoArray``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.MemberInfo[],System.Linq.Expressions.Expression{System.Func{``0,``1}}})">
            <summary>Задает заглушки CreateMapExpression(IDictionary`2&lt;String,Object&gt; parameters, MemberInfo[] membersToExpand)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Fakes.StubIExpressionBuilder.CreateMapExpressionTypeTypeIDictionaryOfStringObjectMemberInfoArray">
            <summary>Задает stub IExpressionBuilder.CreateMapExpression(Type sourceType, Type destinationType, IDictionary`2&lt;String,Object&gt; parameters, MemberInfo[] membersToExpand)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.StubIExpressionResultConverter">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.IExpressionResultConverter</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionResultConverter.#ctor">
            <summary>Инициализирует новый экземпляр type StubIExpressionResultConverter</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionResultConverter.am::AutoMapper#QueryableExtensions#IExpressionResultConverter#CanGetExpressionResolutionResult(AutoMapper.QueryableExtensions.ExpressionResolutionResult,AutoMapper.IValueResolver)">
            <summary>Задает заглушка IExpressionResultConverter.CanGetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, IValueResolver valueResolver)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionResultConverter.am::AutoMapper#QueryableExtensions#IExpressionResultConverter#GetExpressionResolutionResult(AutoMapper.QueryableExtensions.ExpressionResolutionResult,AutoMapper.ConstructorParameterMap,AutoMapper.IValueResolver)">
            <summary>Задает заглушка IExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, ConstructorParameterMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIExpressionResultConverter.am::AutoMapper#QueryableExtensions#IExpressionResultConverter#GetExpressionResolutionResult(AutoMapper.QueryableExtensions.ExpressionResolutionResult,AutoMapper.PropertyMap,AutoMapper.IValueResolver)">
            <summary>Задает заглушка IExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, PropertyMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Fakes.StubIExpressionResultConverter.CanGetExpressionResolutionResultExpressionResolutionResultIValueResolver">
            <summary>Задает stub IExpressionResultConverter.CanGetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, IValueResolver valueResolver)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Fakes.StubIExpressionResultConverter.GetExpressionResolutionResultExpressionResolutionResultConstructorParameterMapIValueResolver">
            <summary>Задает stub IExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, ConstructorParameterMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Fakes.StubIExpressionResultConverter.GetExpressionResolutionResultExpressionResolutionResultPropertyMapIValueResolver">
            <summary>Задает stub IExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, PropertyMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.IProjectionExpression</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.#ctor">
            <summary>Инициализирует новый экземпляр type StubIProjectionExpression</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.am::AutoMapper#QueryableExtensions#IProjectionExpression#To``1(System.Object)">
            <summary>Задает заглушка IProjectionExpression.To(Object parameters)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.am::AutoMapper#QueryableExtensions#IProjectionExpression#To``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Задает заглушка IProjectionExpression.To(IDictionary`2&lt;String,Object&gt; parameters)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.am::AutoMapper#QueryableExtensions#IProjectionExpression#To``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>Задает заглушка IProjectionExpression.To(Object parameters, Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.am::AutoMapper#QueryableExtensions#IProjectionExpression#To``1(System.Object,System.String[])">
            <summary>Задает заглушка IProjectionExpression.To(Object parameters, String[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.am::AutoMapper#QueryableExtensions#IProjectionExpression#To``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>Задает заглушка IProjectionExpression.To(IDictionary`2&lt;String,Object&gt; parameters, Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.am::AutoMapper#QueryableExtensions#IProjectionExpression#To``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>Задает заглушка IProjectionExpression.To(IDictionary`2&lt;String,Object&gt; parameters, String[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.ToOf1IDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.IQueryable{``0}})">
            <summary>Задает заглушки To(IDictionary`2&lt;String,Object&gt; parameters)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.ToOf1IDictionaryOfStringObjectExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Linq.IQueryable{``0}})">
            <summary>Задает заглушки To(IDictionary`2&lt;String,Object&gt; parameters, Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.ToOf1IDictionaryOfStringObjectStringArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.String[],System.Linq.IQueryable{``0}})">
            <summary>Задает заглушки To(IDictionary`2&lt;String,Object&gt; parameters, String[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.ToOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Linq.IQueryable{``0}})">
            <summary>Задает заглушки To(Object parameters)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.ToOf1ObjectExpressionOfFuncOfM0ObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Linq.IQueryable{``0}})">
            <summary>Задает заглушки To(Object parameters, Expression`1&lt;Func`2&lt;!!0,Object&gt;&gt;[] membersToExpand)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubIProjectionExpression.ToOf1ObjectStringArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.String[],System.Linq.IQueryable{``0}})">
            <summary>Задает заглушки To(Object parameters, String[] membersToExpand)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Fakes.StubProjectionExpression">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.ProjectionExpression</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubProjectionExpression.#ctor(System.Linq.IQueryable,AutoMapper.QueryableExtensions.IExpressionBuilder)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Fakes.StubProjectionExpression.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubProjectionExpression</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.StubProjectionExpression.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.StubProjectionExpression.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Fakes.StubProjectionExpression.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.AssignableExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.#ctor(AutoMapper.QueryableExtensions.Impl.AssignableExpressionBinder)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.Bind(AutoMapper.QueryableExtensions.IExpressionBinder)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.BindAssignableExpressionPropertyMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости AssignableExpressionBinder.BindAssignableExpression(PropertyMap propertyMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости AssignableExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.Constructor">
            <summary>Задает оболочка совместимости AssignableExpressionBinder.AssignableExpressionBinder()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости AssignableExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.AllInstances.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости AssignableExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimAssignableExpressionBinder.AllInstances.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости AssignableExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.CustomProjectionExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.#ctor(AutoMapper.QueryableExtensions.Impl.CustomProjectionExpressionBinder)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.Bind(AutoMapper.QueryableExtensions.IExpressionBinder)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.BindCustomProjectionExpressionPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости CustomProjectionExpressionBinder.BindCustomProjectionExpression(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости CustomProjectionExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.Constructor">
            <summary>Задает оболочка совместимости CustomProjectionExpressionBinder.CustomProjectionExpressionBinder()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости CustomProjectionExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.AllInstances.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости CustomProjectionExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimCustomProjectionExpressionBinder.AllInstances.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости CustomProjectionExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.EnumerableExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.#ctor(AutoMapper.QueryableExtensions.Impl.EnumerableExpressionBinder)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.Bind(AutoMapper.QueryableExtensions.IExpressionBinder)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.BindEnumerableExpressionIConfigurationProviderPropertyMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости EnumerableExpressionBinder.BindEnumerableExpression(IConfigurationProvider configuration, PropertyMap propertyMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости EnumerableExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.Constructor">
            <summary>Задает оболочка совместимости EnumerableExpressionBinder.EnumerableExpressionBinder()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.GetDestinationListTypeForPropertyMap">
            <summary>Задает оболочка совместимости EnumerableExpressionBinder.GetDestinationListTypeFor(PropertyMap propertyMap)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.GetToListCallExpressionPropertyMapTypeExpression">
            <summary>Задает оболочка совместимости EnumerableExpressionBinder.GetToListCallExpression(PropertyMap propertyMap, Type destinationListType, Expression selectExpression)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости EnumerableExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.AllInstances.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости EnumerableExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimEnumerableExpressionBinder.AllInstances.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости EnumerableExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.MappedTypeExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.#ctor(AutoMapper.QueryableExtensions.Impl.MappedTypeExpressionBinder)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.Bind(AutoMapper.QueryableExtensions.IExpressionBinder)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.BindMappedTypeExpressionIConfigurationProviderPropertyMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости MappedTypeExpressionBinder.BindMappedTypeExpression(IConfigurationProvider configuration, PropertyMap propertyMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости MappedTypeExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.Constructor">
            <summary>Задает оболочка совместимости MappedTypeExpressionBinder.MappedTypeExpressionBinder()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости MappedTypeExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.AllInstances.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости MappedTypeExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMappedTypeExpressionBinder.AllInstances.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости MappedTypeExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberAccessQueryMapperVisitor">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.MemberAccessQueryMapperVisitor</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberAccessQueryMapperVisitor.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberAccessQueryMapperVisitor.#ctor(AutoMapper.QueryableExtensions.Impl.MemberAccessQueryMapperVisitor)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberAccessQueryMapperVisitor.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberAccessQueryMapperVisitor.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberAccessQueryMapperVisitor.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberAccessQueryMapperVisitor.ConstructorExpressionVisitorIConfigurationProvider">
            <summary>Задает оболочка совместимости MemberAccessQueryMapperVisitor.MemberAccessQueryMapperVisitor(ExpressionVisitor rootVisitor, IConfigurationProvider config)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberAccessQueryMapperVisitor.VisitMemberMemberExpression">
            <summary>Задает оболочка совместимости MemberAccessQueryMapperVisitor.VisitMember(MemberExpression node)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberAccessQueryMapperVisitor.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberAccessQueryMapperVisitor.AllInstances.VisitMemberMemberExpression">
            <summary>Задает оболочка совместимости MemberAccessQueryMapperVisitor.VisitMember(MemberExpression node)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.MemberGetterExpressionResultConverter</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.#ctor(AutoMapper.QueryableExtensions.Impl.MemberGetterExpressionResultConverter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.Bind(AutoMapper.QueryableExtensions.IExpressionResultConverter)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.CanGetExpressionResolutionResultExpressionResolutionResultIValueResolver">
            <summary>Задает оболочка совместимости MemberGetterExpressionResultConverter.CanGetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.Constructor">
            <summary>Задает оболочка совместимости MemberGetterExpressionResultConverter.MemberGetterExpressionResultConverter()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.ExpressionResolutionResultExpressionResolutionResultIValueResolver">
            <summary>Задает оболочка совместимости MemberGetterExpressionResultConverter.ExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.GetExpressionResolutionResultExpressionResolutionResultConstructorParameterMapIValueResolver">
            <summary>Задает оболочка совместимости MemberGetterExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, ConstructorParameterMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.GetExpressionResolutionResultExpressionResolutionResultPropertyMapIValueResolver">
            <summary>Задает оболочка совместимости MemberGetterExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, PropertyMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.AllInstances.CanGetExpressionResolutionResultExpressionResolutionResultIValueResolver">
            <summary>Задает оболочка совместимости MemberGetterExpressionResultConverter.CanGetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.AllInstances.GetExpressionResolutionResultExpressionResolutionResultConstructorParameterMapIValueResolver">
            <summary>Задает оболочка совместимости MemberGetterExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, ConstructorParameterMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberGetterExpressionResultConverter.AllInstances.GetExpressionResolutionResultExpressionResolutionResultPropertyMapIValueResolver">
            <summary>Задает оболочка совместимости MemberGetterExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, PropertyMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.MemberResolverExpressionResultConverter</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.#ctor(AutoMapper.QueryableExtensions.Impl.MemberResolverExpressionResultConverter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.Bind(AutoMapper.QueryableExtensions.IExpressionResultConverter)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.CanGetExpressionResolutionResultExpressionResolutionResultIValueResolver">
            <summary>Задает оболочка совместимости MemberResolverExpressionResultConverter.CanGetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.Constructor">
            <summary>Задает оболочка совместимости MemberResolverExpressionResultConverter.MemberResolverExpressionResultConverter()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.ExpressionResolutionResultExpressionResolutionResultLambdaExpression">
            <summary>Задает оболочка совместимости MemberResolverExpressionResultConverter.ExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, LambdaExpression lambdaExpression)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.GetExpressionResolutionResultExpressionResolutionResultConstructorParameterMapIValueResolver">
            <summary>Задает оболочка совместимости MemberResolverExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, ConstructorParameterMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.GetExpressionResolutionResultExpressionResolutionResultPropertyMapIValueResolver">
            <summary>Задает оболочка совместимости MemberResolverExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, PropertyMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.AllInstances.CanGetExpressionResolutionResultExpressionResolutionResultIValueResolver">
            <summary>Задает оболочка совместимости MemberResolverExpressionResultConverter.CanGetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.AllInstances.GetExpressionResolutionResultExpressionResolutionResultConstructorParameterMapIValueResolver">
            <summary>Задает оболочка совместимости MemberResolverExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, ConstructorParameterMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimMemberResolverExpressionResultConverter.AllInstances.GetExpressionResolutionResultExpressionResolutionResultPropertyMapIValueResolver">
            <summary>Задает оболочка совместимости MemberResolverExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, PropertyMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.NullSubstitutionExpressionResultConverter</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.#ctor(AutoMapper.QueryableExtensions.Impl.NullSubstitutionExpressionResultConverter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.Bind(AutoMapper.QueryableExtensions.IExpressionResultConverter)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.CanGetExpressionResolutionResultExpressionResolutionResultIValueResolver">
            <summary>Задает оболочка совместимости NullSubstitutionExpressionResultConverter.CanGetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.Constructor">
            <summary>Задает оболочка совместимости NullSubstitutionExpressionResultConverter.NullSubstitutionExpressionResultConverter()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.GetExpressionResolutionResultExpressionResolutionResultConstructorParameterMapIValueResolver">
            <summary>Задает оболочка совместимости NullSubstitutionExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, ConstructorParameterMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.GetExpressionResolutionResultExpressionResolutionResultPropertyMapIValueResolver">
            <summary>Задает оболочка совместимости NullSubstitutionExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, PropertyMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.AllInstances.CanGetExpressionResolutionResultExpressionResolutionResultIValueResolver">
            <summary>Задает оболочка совместимости NullSubstitutionExpressionResultConverter.CanGetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.AllInstances.GetExpressionResolutionResultExpressionResolutionResultConstructorParameterMapIValueResolver">
            <summary>Задает оболочка совместимости NullSubstitutionExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, ConstructorParameterMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullSubstitutionExpressionResultConverter.AllInstances.GetExpressionResolutionResultExpressionResolutionResultPropertyMapIValueResolver">
            <summary>Задает оболочка совместимости NullSubstitutionExpressionResultConverter.GetExpressionResolutionResult(ExpressionResolutionResult expressionResolutionResult, PropertyMap propertyMap, IValueResolver valueResolver)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.NullableExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.#ctor(AutoMapper.QueryableExtensions.Impl.NullableExpressionBinder)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.Bind(AutoMapper.QueryableExtensions.IExpressionBinder)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.BindNullableExpressionPropertyMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости NullableExpressionBinder.BindNullableExpression(PropertyMap propertyMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости NullableExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.Constructor">
            <summary>Задает оболочка совместимости NullableExpressionBinder.NullableExpressionBinder()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости NullableExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.AllInstances.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости NullableExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimNullableExpressionBinder.AllInstances.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости NullableExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimParameterReplacementVisitor">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.ParameterReplacementVisitor</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimParameterReplacementVisitor.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimParameterReplacementVisitor.#ctor(AutoMapper.QueryableExtensions.Impl.ParameterReplacementVisitor)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimParameterReplacementVisitor.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimParameterReplacementVisitor.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimParameterReplacementVisitor.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimParameterReplacementVisitor.ConstructorExpression">
            <summary>Задает оболочка совместимости ParameterReplacementVisitor.ParameterReplacementVisitor(Expression memberExpression)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimParameterReplacementVisitor.VisitParameterParameterExpression">
            <summary>Задает оболочка совместимости ParameterReplacementVisitor.VisitParameter(ParameterExpression node)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimParameterReplacementVisitor.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimParameterReplacementVisitor.AllInstances.VisitParameterParameterExpression">
            <summary>Задает оболочка совместимости ParameterReplacementVisitor.VisitParameter(ParameterExpression node)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryDataSourceInjection`1">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.QueryDataSourceInjection`1</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryDataSourceInjection`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryDataSourceInjection`1.#ctor(AutoMapper.QueryableExtensions.Impl.QueryDataSourceInjection{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryDataSourceInjection`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryDataSourceInjection`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryDataSourceInjection`1.Bind(AutoMapper.QueryableExtensions.Impl.IQueryDataSourceInjection{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryDataSourceInjection`1.ForOf1SourceInjectedQueryInspector``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryInspector,System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости QueryDataSourceInjection`1.For(SourceInjectedQueryInspector inspector)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryDataSourceInjection`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryDataSourceInjection`1.ConstructorIQueryableOfT0IMapper">
            <summary>Задает оболочка совместимости QueryDataSourceInjection`1.QueryDataSourceInjection`1(IQueryable`1&lt;!0&gt; dataSource, IMapper mapper)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryDataSourceInjection`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryDataSourceInjection`1.AllInstances.ForOf1SourceInjectedQueryInspector``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.Impl.QueryDataSourceInjection{`0},AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryInspector,System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости QueryDataSourceInjection`1.For(SourceInjectedQueryInspector inspector)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.QueryMapperVisitor</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.#ctor(AutoMapper.QueryableExtensions.Impl.QueryMapperVisitor)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.MapOf2IQueryableOfM0IQueryableOfM1IConfigurationProvider``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},AutoMapper.IConfigurationProvider,System.Linq.IQueryable{``1}})">
            <summary>Задает оболочка совместимости QueryMapperVisitor.Map(IQueryable`1&lt;!!0&gt; sourceQuery, IQueryable`1&lt;!!1&gt; destQuery, IConfigurationProvider config)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.VisitLambdaOf1ExpressionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression})">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitLambda(Expression`1&lt;!!0&gt; node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor._VisitLambdab__13_0Of1ParameterExpression``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>Задает оболочка совместимости QueryMapperVisitor.&lt;VisitLambda&gt;b__13_0(ParameterExpression p)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.ChangeLambdaArgTypeFormSourceToDestTypeType">
            <summary>Задает оболочка совместимости QueryMapperVisitor.ChangeLambdaArgTypeFormSourceToDest(Type lambdaType, Type returnType)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.ChangeMethodArgTypeFormSourceToDestMethodInfo">
            <summary>Задает оболочка совместимости QueryMapperVisitor.ChangeMethodArgTypeFormSourceToDest(MethodInfo mi)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.ConstructorTypeTypeIQueryableIConfigurationProvider">
            <summary>Задает оболочка совместимости QueryMapperVisitor.QueryMapperVisitor(Type sourceType, Type destinationType, IQueryable destQuery, IConfigurationProvider config)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.VisitBinaryBinaryExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitBinary(BinaryExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.VisitConstantConstantExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitConstant(ConstantExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.VisitExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.Visit(Expression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.VisitMemberMemberExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitMember(MemberExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.VisitMethodCallMethodCallExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitMethodCall(MethodCallExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.VisitOrderByMethodCallExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitOrderBy(MethodCallExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.VisitParameterParameterExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitParameter(ParameterExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor._ChangeLambdaArgTypeFormSourceToDestb__18_0Type">
            <summary>Задает оболочка совместимости QueryMapperVisitor.&lt;ChangeLambdaArgTypeFormSourceToDest&gt;b__18_0(Type t)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor._ChangeMethodArgTypeFormSourceToDestb__17_0Type">
            <summary>Задает оболочка совместимости QueryMapperVisitor.&lt;ChangeMethodArgTypeFormSourceToDest&gt;b__17_0(Type t)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances.VisitLambdaOf1ExpressionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.Impl.QueryMapperVisitor,System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression})">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitLambda(Expression`1&lt;!!0&gt; node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances._VisitLambdab__13_0Of1ParameterExpression``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.Impl.QueryMapperVisitor,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>Задает оболочка совместимости QueryMapperVisitor.&lt;VisitLambda&gt;b__13_0(ParameterExpression p)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances.ChangeLambdaArgTypeFormSourceToDestTypeType">
            <summary>Задает оболочка совместимости QueryMapperVisitor.ChangeLambdaArgTypeFormSourceToDest(Type lambdaType, Type returnType)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances.ChangeMethodArgTypeFormSourceToDestMethodInfo">
            <summary>Задает оболочка совместимости QueryMapperVisitor.ChangeMethodArgTypeFormSourceToDest(MethodInfo mi)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances.VisitBinaryBinaryExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitBinary(BinaryExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances.VisitConstantConstantExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitConstant(ConstantExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances.VisitExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.Visit(Expression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances.VisitMemberMemberExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitMember(MemberExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances.VisitMethodCallMethodCallExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitMethodCall(MethodCallExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances.VisitOrderByMethodCallExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitOrderBy(MethodCallExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances.VisitParameterParameterExpression">
            <summary>Задает оболочка совместимости QueryMapperVisitor.VisitParameter(ParameterExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances._ChangeLambdaArgTypeFormSourceToDestb__18_0Type">
            <summary>Задает оболочка совместимости QueryMapperVisitor.&lt;ChangeLambdaArgTypeFormSourceToDest&gt;b__18_0(Type t)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimQueryMapperVisitor.AllInstances._ChangeMethodArgTypeFormSourceToDestb__17_0Type">
            <summary>Задает оболочка совместимости QueryMapperVisitor.&lt;ChangeMethodArgTypeFormSourceToDest&gt;b__17_0(Type t)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.SourceInjectedQuery`2</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.#ctor(AutoMapper.QueryableExtensions.Impl.SourceInjectedQuery{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.Bind(System.Linq.IOrderedQueryable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.Bind(System.Linq.IQueryable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.Bind(System.Linq.IOrderedQueryable{`1})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.Bind(System.Linq.IQueryable{`1})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.Bind(System.Collections.IEnumerable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.Bind(System.Collections.Generic.IEnumerable{`1})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.ConstructorIQueryProviderExpression">
            <summary>Задает оболочка совместимости SourceInjectedQuery`2.SourceInjectedQuery`2(IQueryProvider provider, Expression expression)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.ConstructorIQueryableOfT0IQueryableOfT1IMapperSourceInjectedQueryInspector">
            <summary>Задает оболочка совместимости SourceInjectedQuery`2.SourceInjectedQuery`2(IQueryable`1&lt;!0&gt; dataSource, IQueryable`1&lt;!1&gt; destQuery, IMapper mapper, SourceInjectedQueryInspector inspector)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.ElementTypeGet">
            <summary>Задает оболочка совместимости SourceInjectedQuery`2.get_ElementType()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.ExpressionGet">
            <summary>Задает оболочка совместимости SourceInjectedQuery`2.get_Expression()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.GetEnumerator">
            <summary>Задает оболочка совместимости SourceInjectedQuery`2.GetEnumerator()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.ProviderGet">
            <summary>Задает оболочка совместимости SourceInjectedQuery`2.get_Provider()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Задает оболочка совместимости SourceInjectedQuery`2.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.AllInstances.ElementTypeGet">
            <summary>Задает оболочка совместимости SourceInjectedQuery`2.get_ElementType()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.AllInstances.ExpressionGet">
            <summary>Задает оболочка совместимости SourceInjectedQuery`2.get_Expression()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.AllInstances.GetEnumerator">
            <summary>Задает оболочка совместимости SourceInjectedQuery`2.GetEnumerator()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.AllInstances.ProviderGet">
            <summary>Задает оболочка совместимости SourceInjectedQuery`2.get_Provider()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQuery`2.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Задает оболочка совместимости SourceInjectedQuery`2.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryInspector</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.#ctor(AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryInspector)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.Constructor">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.SourceInjectedQueryInspector()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.DestResultGet">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.get_DestResult()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.DestResultSetActionOfObject">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.set_DestResult(Action`1&lt;Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.SourceResultGet">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.get_SourceResult()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.SourceResultSetActionOfExpressionObject">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.set_SourceResult(Action`2&lt;Expression,Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.StartQueryExecuteInterceptorGet">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.get_StartQueryExecuteInterceptor()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.StartQueryExecuteInterceptorSetActionOfTypeExpression">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.set_StartQueryExecuteInterceptor(Action`2&lt;Type,Expression&gt; value)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.AllInstances.DestResultGet">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.get_DestResult()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.AllInstances.DestResultSetActionOfObject">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.set_DestResult(Action`1&lt;Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.AllInstances.SourceResultGet">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.get_SourceResult()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.AllInstances.SourceResultSetActionOfExpressionObject">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.set_SourceResult(Action`2&lt;Expression,Object&gt; value)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.AllInstances.StartQueryExecuteInterceptorGet">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.get_StartQueryExecuteInterceptor()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryInspector.AllInstances.StartQueryExecuteInterceptorSetActionOfTypeExpression">
            <summary>Задает оболочка совместимости SourceInjectedQueryInspector.set_StartQueryExecuteInterceptor(Action`2&lt;Type,Expression&gt; value)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryProvider`2</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.#ctor(AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryProvider{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.Bind(System.Linq.IQueryProvider)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.CreateQueryOf1Expression``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression,System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.CreateQuery(Expression expression)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.ExecuteOf1Expression``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression,``0})">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.Execute(Expression expression)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.IsProjectionOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Boolean})">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.IsProjection(Type resultType)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.ConstructorIMapperIQueryableOfT0IQueryableOfT1">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.SourceInjectedQueryProvider`2(IMapper mapper, IQueryable`1&lt;!0&gt; dataSource, IQueryable`1&lt;!1&gt; destQuery)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.ConvertDestinationExpressionToSourceExpressionExpression">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.ConvertDestinationExpressionToSourceExpression(Expression expression)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.CreateQueryExpression">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.CreateQuery(Expression expression)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.CreateSourceResultTypeType">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.CreateSourceResultType(Type destResultType)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.ExecuteExpression">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.Execute(Expression expression)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.InspectorGet">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.get_Inspector()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.InspectorSetSourceInjectedQueryInspector">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.set_Inspector(SourceInjectedQueryInspector value)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.InvokeSourceQueryTypeExpression">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.InvokeSourceQuery(Type sourceResultType, Expression sourceExpression)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.AllInstances.CreateQueryOf1Expression``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryProvider{`0,`1},System.Linq.Expressions.Expression,System.Linq.IQueryable{``0}})">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.CreateQuery(Expression expression)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.AllInstances.ExecuteOf1Expression``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryProvider{`0,`1},System.Linq.Expressions.Expression,``0})">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.Execute(Expression expression)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.AllInstances.ConvertDestinationExpressionToSourceExpressionExpression">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.ConvertDestinationExpressionToSourceExpression(Expression expression)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.AllInstances.CreateQueryExpression">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.CreateQuery(Expression expression)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.AllInstances.ExecuteExpression">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.Execute(Expression expression)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.AllInstances.InspectorGet">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.get_Inspector()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.AllInstances.InspectorSetSourceInjectedQueryInspector">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.set_Inspector(SourceInjectedQueryInspector value)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimSourceInjectedQueryProvider`2.AllInstances.InvokeSourceQueryTypeExpression">
            <summary>Задает оболочка совместимости SourceInjectedQueryProvider`2.InvokeSourceQuery(Type sourceResultType, Expression sourceExpression)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder">
            <summary>Тип оболочки совместимости для AutoMapper.QueryableExtensions.Impl.StringExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.#ctor(AutoMapper.QueryableExtensions.Impl.StringExpressionBinder)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.Bind(AutoMapper.QueryableExtensions.IExpressionBinder)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.BindStringExpressionPropertyMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости StringExpressionBinder.BindStringExpression(PropertyMap propertyMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости StringExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.Constructor">
            <summary>Задает оболочка совместимости StringExpressionBinder.StringExpressionBinder()</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости StringExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.AllInstances.BuildIConfigurationProviderPropertyMapTypeMapExpressionRequestExpressionResolutionResultConcurrentDictionaryOfExpressionRequestInt32">
            <summary>Задает оболочка совместимости StringExpressionBinder.Build(IConfigurationProvider configuration, PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionRequest request, ExpressionResolutionResult result, ConcurrentDictionary`2&lt;ExpressionRequest,Int32&gt; typePairCount)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.ShimStringExpressionBinder.AllInstances.IsMatchPropertyMapTypeMapExpressionResolutionResult">
            <summary>Задает оболочка совместимости StringExpressionBinder.IsMatch(PropertyMap propertyMap, TypeMap propertyTypeMap, ExpressionResolutionResult result)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubAssignableExpressionBinder">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.AssignableExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubAssignableExpressionBinder.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubAssignableExpressionBinder.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubAssignableExpressionBinder</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubAssignableExpressionBinder.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubAssignableExpressionBinder.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubAssignableExpressionBinder.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubCustomProjectionExpressionBinder">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.CustomProjectionExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubCustomProjectionExpressionBinder.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubCustomProjectionExpressionBinder.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubCustomProjectionExpressionBinder</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubCustomProjectionExpressionBinder.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubCustomProjectionExpressionBinder.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubCustomProjectionExpressionBinder.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubEnumerableExpressionBinder">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.EnumerableExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubEnumerableExpressionBinder.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubEnumerableExpressionBinder.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubEnumerableExpressionBinder</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubEnumerableExpressionBinder.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubEnumerableExpressionBinder.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubEnumerableExpressionBinder.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubIQueryDataSourceInjection`1">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.IQueryDataSourceInjection`1</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubIQueryDataSourceInjection`1.#ctor">
            <summary>Инициализирует новый экземпляр type StubIQueryDataSourceInjection</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubIQueryDataSourceInjection`1.am::AutoMapper#QueryableExtensions#Impl#IQueryDataSourceInjection{TSource}#For``1(AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryInspector)">
            <summary>Задает заглушка IQueryDataSourceInjection`1.For(SourceInjectedQueryInspector inspector)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubIQueryDataSourceInjection`1.ForOf1SourceInjectedQueryInspector``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryInspector,System.Linq.IQueryable{``0}})">
            <summary>Задает заглушки For(SourceInjectedQueryInspector inspector)</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubMappedTypeExpressionBinder">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.MappedTypeExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMappedTypeExpressionBinder.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMappedTypeExpressionBinder.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMappedTypeExpressionBinder</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubMappedTypeExpressionBinder.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubMappedTypeExpressionBinder.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubMappedTypeExpressionBinder.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.MemberAccessQueryMapperVisitor</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.#ctor(System.Linq.Expressions.ExpressionVisitor,AutoMapper.IConfigurationProvider)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMemberAccessQueryMapperVisitor</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitBinary(BinaryExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitBinaryBinaryExpression">
            <summary>Задает stub ExpressionVisitor.VisitBinary(BinaryExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitBlock(BlockExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitBlockBlockExpression">
            <summary>Задает stub ExpressionVisitor.VisitBlock(BlockExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <summary>Задает заглушка ExpressionVisitor.VisitCatchBlock(CatchBlock node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitCatchBlockCatchBlock">
            <summary>Задает stub ExpressionVisitor.VisitCatchBlock(CatchBlock node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitConditional(ConditionalExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitConditionalConditionalExpression">
            <summary>Задает stub ExpressionVisitor.VisitConditional(ConditionalExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitConstant(ConstantExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitConstantConstantExpression">
            <summary>Задает stub ExpressionVisitor.VisitConstant(ConstantExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitDebugInfo(DebugInfoExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitDebugInfoDebugInfoExpression">
            <summary>Задает stub ExpressionVisitor.VisitDebugInfo(DebugInfoExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitDefault(DefaultExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitDefaultDefaultExpression">
            <summary>Задает stub ExpressionVisitor.VisitDefault(DefaultExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitDynamic(DynamicExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitDynamicDynamicExpression">
            <summary>Задает stub ExpressionVisitor.VisitDynamic(DynamicExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>Задает заглушка ExpressionVisitor.VisitElementInit(ElementInit node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitElementInitElementInit">
            <summary>Задает stub ExpressionVisitor.VisitElementInit(ElementInit node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>Задает заглушка ExpressionVisitor.VisitExtension(Expression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitExtensionExpression">
            <summary>Задает stub ExpressionVisitor.VisitExtension(Expression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitGoto(GotoExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitGotoGotoExpression">
            <summary>Задает stub ExpressionVisitor.VisitGoto(GotoExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitIndex(IndexExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitIndexIndexExpression">
            <summary>Задает stub ExpressionVisitor.VisitIndex(IndexExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitInvocation(InvocationExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitInvocationInvocationExpression">
            <summary>Задает stub ExpressionVisitor.VisitInvocation(InvocationExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitLabel(LabelExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitLabelLabelExpression">
            <summary>Задает stub ExpressionVisitor.VisitLabel(LabelExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
            <summary>Задает заглушка ExpressionVisitor.VisitLabelTarget(LabelTarget node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitLabelTargetLabelTarget">
            <summary>Задает stub ExpressionVisitor.VisitLabelTarget(LabelTarget node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>Задает заглушка ExpressionVisitor.VisitLambda(Expression`1&lt;!!0&gt; node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitLambdaOf1ExpressionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression})">
            <summary>Задает заглушки VisitLambda(Expression`1&lt;!!0&gt; node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitListInit(ListInitExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitListInitListInitExpression">
            <summary>Задает stub ExpressionVisitor.VisitListInit(ListInitExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitLoop(LoopExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitLoopLoopExpression">
            <summary>Задает stub ExpressionVisitor.VisitLoop(LoopExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>Задает заглушка MemberAccessQueryMapperVisitor.VisitMember(MemberExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>Задает заглушка ExpressionVisitor.VisitMemberAssignment(MemberAssignment node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMemberAssignmentMemberAssignment">
            <summary>Задает stub ExpressionVisitor.VisitMemberAssignment(MemberAssignment node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>Задает заглушка ExpressionVisitor.VisitMemberBinding(MemberBinding node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMemberBindingMemberBinding">
            <summary>Задает stub ExpressionVisitor.VisitMemberBinding(MemberBinding node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitMemberInit(MemberInitExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMemberInitMemberInitExpression">
            <summary>Задает stub ExpressionVisitor.VisitMemberInit(MemberInitExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>Задает заглушка ExpressionVisitor.VisitMemberListBinding(MemberListBinding node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMemberListBindingMemberListBinding">
            <summary>Задает stub ExpressionVisitor.VisitMemberListBinding(MemberListBinding node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>Задает заглушка ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMemberMemberBindingMemberMemberBinding">
            <summary>Задает stub ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMemberMemberExpression">
            <summary>Задает stub MemberAccessQueryMapperVisitor.VisitMember(MemberExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitMethodCall(MethodCallExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitMethodCallMethodCallExpression">
            <summary>Задает stub ExpressionVisitor.VisitMethodCall(MethodCallExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitNew(NewExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitNewArray(NewArrayExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitNewArrayNewArrayExpression">
            <summary>Задает stub ExpressionVisitor.VisitNewArray(NewArrayExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitNewNewExpression">
            <summary>Задает stub ExpressionVisitor.VisitNew(NewExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitParameter(ParameterExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitParameterParameterExpression">
            <summary>Задает stub ExpressionVisitor.VisitParameter(ParameterExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitRuntimeVariablesRuntimeVariablesExpression">
            <summary>Задает stub ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitSwitch(SwitchExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <summary>Задает заглушка ExpressionVisitor.VisitSwitchCase(SwitchCase node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitSwitchCaseSwitchCase">
            <summary>Задает stub ExpressionVisitor.VisitSwitchCase(SwitchCase node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitSwitchSwitchExpression">
            <summary>Задает stub ExpressionVisitor.VisitSwitch(SwitchExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitTry(TryExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitTryTryExpression">
            <summary>Задает stub ExpressionVisitor.VisitTry(TryExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitTypeBinaryTypeBinaryExpression">
            <summary>Задает stub ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitUnary(UnaryExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.VisitUnaryUnaryExpression">
            <summary>Задает stub ExpressionVisitor.VisitUnary(UnaryExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberAccessQueryMapperVisitor.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberGetterExpressionResultConverter">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.MemberGetterExpressionResultConverter</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberGetterExpressionResultConverter.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberGetterExpressionResultConverter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMemberGetterExpressionResultConverter</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberGetterExpressionResultConverter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberGetterExpressionResultConverter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberGetterExpressionResultConverter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberResolverExpressionResultConverter">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.MemberResolverExpressionResultConverter</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberResolverExpressionResultConverter.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberResolverExpressionResultConverter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMemberResolverExpressionResultConverter</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberResolverExpressionResultConverter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberResolverExpressionResultConverter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubMemberResolverExpressionResultConverter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubNullSubstitutionExpressionResultConverter">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.NullSubstitutionExpressionResultConverter</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubNullSubstitutionExpressionResultConverter.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubNullSubstitutionExpressionResultConverter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNullSubstitutionExpressionResultConverter</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubNullSubstitutionExpressionResultConverter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubNullSubstitutionExpressionResultConverter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubNullSubstitutionExpressionResultConverter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubNullableExpressionBinder">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.NullableExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubNullableExpressionBinder.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubNullableExpressionBinder.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNullableExpressionBinder</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubNullableExpressionBinder.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubNullableExpressionBinder.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubNullableExpressionBinder.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.ParameterReplacementVisitor</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.#ctor(System.Linq.Expressions.Expression)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubParameterReplacementVisitor</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitBinary(BinaryExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitBinaryBinaryExpression">
            <summary>Задает stub ExpressionVisitor.VisitBinary(BinaryExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitBlock(BlockExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitBlockBlockExpression">
            <summary>Задает stub ExpressionVisitor.VisitBlock(BlockExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <summary>Задает заглушка ExpressionVisitor.VisitCatchBlock(CatchBlock node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitCatchBlockCatchBlock">
            <summary>Задает stub ExpressionVisitor.VisitCatchBlock(CatchBlock node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitConditional(ConditionalExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitConditionalConditionalExpression">
            <summary>Задает stub ExpressionVisitor.VisitConditional(ConditionalExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitConstant(ConstantExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitConstantConstantExpression">
            <summary>Задает stub ExpressionVisitor.VisitConstant(ConstantExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitDebugInfo(DebugInfoExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitDebugInfoDebugInfoExpression">
            <summary>Задает stub ExpressionVisitor.VisitDebugInfo(DebugInfoExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitDefault(DefaultExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitDefaultDefaultExpression">
            <summary>Задает stub ExpressionVisitor.VisitDefault(DefaultExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitDynamic(DynamicExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitDynamicDynamicExpression">
            <summary>Задает stub ExpressionVisitor.VisitDynamic(DynamicExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>Задает заглушка ExpressionVisitor.VisitElementInit(ElementInit node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitElementInitElementInit">
            <summary>Задает stub ExpressionVisitor.VisitElementInit(ElementInit node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>Задает заглушка ExpressionVisitor.VisitExtension(Expression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitExtensionExpression">
            <summary>Задает stub ExpressionVisitor.VisitExtension(Expression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitGoto(GotoExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitGotoGotoExpression">
            <summary>Задает stub ExpressionVisitor.VisitGoto(GotoExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitIndex(IndexExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitIndexIndexExpression">
            <summary>Задает stub ExpressionVisitor.VisitIndex(IndexExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitInvocation(InvocationExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitInvocationInvocationExpression">
            <summary>Задает stub ExpressionVisitor.VisitInvocation(InvocationExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitLabel(LabelExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitLabelLabelExpression">
            <summary>Задает stub ExpressionVisitor.VisitLabel(LabelExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
            <summary>Задает заглушка ExpressionVisitor.VisitLabelTarget(LabelTarget node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitLabelTargetLabelTarget">
            <summary>Задает stub ExpressionVisitor.VisitLabelTarget(LabelTarget node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>Задает заглушка ExpressionVisitor.VisitLambda(Expression`1&lt;!!0&gt; node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitLambdaOf1ExpressionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression})">
            <summary>Задает заглушки VisitLambda(Expression`1&lt;!!0&gt; node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitListInit(ListInitExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitListInitListInitExpression">
            <summary>Задает stub ExpressionVisitor.VisitListInit(ListInitExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitLoop(LoopExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitLoopLoopExpression">
            <summary>Задает stub ExpressionVisitor.VisitLoop(LoopExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitMember(MemberExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>Задает заглушка ExpressionVisitor.VisitMemberAssignment(MemberAssignment node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMemberAssignmentMemberAssignment">
            <summary>Задает stub ExpressionVisitor.VisitMemberAssignment(MemberAssignment node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>Задает заглушка ExpressionVisitor.VisitMemberBinding(MemberBinding node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMemberBindingMemberBinding">
            <summary>Задает stub ExpressionVisitor.VisitMemberBinding(MemberBinding node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitMemberInit(MemberInitExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMemberInitMemberInitExpression">
            <summary>Задает stub ExpressionVisitor.VisitMemberInit(MemberInitExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>Задает заглушка ExpressionVisitor.VisitMemberListBinding(MemberListBinding node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMemberListBindingMemberListBinding">
            <summary>Задает stub ExpressionVisitor.VisitMemberListBinding(MemberListBinding node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>Задает заглушка ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMemberMemberBindingMemberMemberBinding">
            <summary>Задает stub ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMemberMemberExpression">
            <summary>Задает stub ExpressionVisitor.VisitMember(MemberExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitMethodCall(MethodCallExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitMethodCallMethodCallExpression">
            <summary>Задает stub ExpressionVisitor.VisitMethodCall(MethodCallExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitNew(NewExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitNewArray(NewArrayExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitNewArrayNewArrayExpression">
            <summary>Задает stub ExpressionVisitor.VisitNewArray(NewArrayExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitNewNewExpression">
            <summary>Задает stub ExpressionVisitor.VisitNew(NewExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>Задает заглушка ParameterReplacementVisitor.VisitParameter(ParameterExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitParameterParameterExpression">
            <summary>Задает stub ParameterReplacementVisitor.VisitParameter(ParameterExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitRuntimeVariablesRuntimeVariablesExpression">
            <summary>Задает stub ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitSwitch(SwitchExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <summary>Задает заглушка ExpressionVisitor.VisitSwitchCase(SwitchCase node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitSwitchCaseSwitchCase">
            <summary>Задает stub ExpressionVisitor.VisitSwitchCase(SwitchCase node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitSwitchSwitchExpression">
            <summary>Задает stub ExpressionVisitor.VisitSwitch(SwitchExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitTry(TryExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitTryTryExpression">
            <summary>Задает stub ExpressionVisitor.VisitTry(TryExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitTypeBinaryTypeBinaryExpression">
            <summary>Задает stub ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression node)</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>Задает заглушка ExpressionVisitor.VisitUnary(UnaryExpression node)</summary>
        </member>
        <member name="F:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.VisitUnaryUnaryExpression">
            <summary>Задает stub ExpressionVisitor.VisitUnary(UnaryExpression node)</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubParameterReplacementVisitor.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubQueryDataSourceInjection`1">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.QueryDataSourceInjection`1</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubQueryDataSourceInjection`1.#ctor(System.Linq.IQueryable{`0},AutoMapper.IMapper)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubQueryDataSourceInjection`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubQueryDataSourceInjection</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubQueryDataSourceInjection`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubQueryDataSourceInjection`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubQueryDataSourceInjection`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQuery`2">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.SourceInjectedQuery`2</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQuery`2.#ctor(System.Linq.IQueryable{`0},System.Linq.IQueryable{`1},AutoMapper.IMapper,AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryInspector)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQuery`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSourceInjectedQuery</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQuery`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQuery`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQuery`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQueryInspector">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryInspector</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQueryInspector.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQueryInspector.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSourceInjectedQueryInspector</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQueryInspector.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQueryInspector.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQueryInspector.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQueryProvider`2">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.SourceInjectedQueryProvider`2</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQueryProvider`2.#ctor(AutoMapper.IMapper,System.Linq.IQueryable{`0},System.Linq.IQueryable{`1})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQueryProvider`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSourceInjectedQueryProvider</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQueryProvider`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQueryProvider`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubSourceInjectedQueryProvider`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:AutoMapper.QueryableExtensions.Impl.Fakes.StubStringExpressionBinder">
            <summary>Тип заглушки AutoMapper.QueryableExtensions.Impl.StringExpressionBinder</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubStringExpressionBinder.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:AutoMapper.QueryableExtensions.Impl.Fakes.StubStringExpressionBinder.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubStringExpressionBinder</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubStringExpressionBinder.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubStringExpressionBinder.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:AutoMapper.QueryableExtensions.Impl.Fakes.StubStringExpressionBinder.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
    </members>
</doc>
